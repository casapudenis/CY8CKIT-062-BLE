ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"tasks.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.global	pxCurrentTCB
  21              		.bss
  22              		.align	2
  23              		.type	pxCurrentTCB, %object
  24              		.size	pxCurrentTCB, 4
  25              	pxCurrentTCB:
  26 0000 00000000 		.space	4
  27              		.align	2
  28              	pxReadyTasksLists:
  29 0004 00000000 		.space	140
  29      00000000 
  29      00000000 
  29      00000000 
  29      00000000 
  30              		.align	2
  31              	xDelayedTaskList1:
  32 0090 00000000 		.space	20
  32      00000000 
  32      00000000 
  32      00000000 
  32      00000000 
  33              		.align	2
  34              	xDelayedTaskList2:
  35 00a4 00000000 		.space	20
  35      00000000 
  35      00000000 
  35      00000000 
  35      00000000 
  36              		.align	2
  37              	pxDelayedTaskList:
  38 00b8 00000000 		.space	4
  39              		.align	2
  40              	pxOverflowDelayedTaskList:
  41 00bc 00000000 		.space	4
  42              		.align	2
  43              	xPendingReadyList:
  44 00c0 00000000 		.space	20
  44      00000000 
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 2


  44      00000000 
  44      00000000 
  44      00000000 
  45              		.align	2
  46              	xTasksWaitingTermination:
  47 00d4 00000000 		.space	20
  47      00000000 
  47      00000000 
  47      00000000 
  47      00000000 
  48              		.align	2
  49              	uxDeletedTasksWaitingCleanUp:
  50 00e8 00000000 		.space	4
  51              		.align	2
  52              	xSuspendedTaskList:
  53 00ec 00000000 		.space	20
  53      00000000 
  53      00000000 
  53      00000000 
  53      00000000 
  54              		.align	2
  55              	uxCurrentNumberOfTasks:
  56 0100 00000000 		.space	4
  57              		.align	2
  58              	xTickCount:
  59 0104 00000000 		.space	4
  60              		.align	2
  61              	uxTopReadyPriority:
  62 0108 00000000 		.space	4
  63              		.align	2
  64              	xSchedulerRunning:
  65 010c 00000000 		.space	4
  66              		.align	2
  67              	uxPendedTicks:
  68 0110 00000000 		.space	4
  69              		.align	2
  70              	xYieldPending:
  71 0114 00000000 		.space	4
  72              		.align	2
  73              	xNumOfOverflows:
  74 0118 00000000 		.space	4
  75              		.align	2
  76              	uxTaskNumber:
  77 011c 00000000 		.space	4
  78              		.align	2
  79              	xNextTaskUnblockTime:
  80 0120 00000000 		.space	4
  81              		.align	2
  82              	xIdleTaskHandle:
  83 0124 00000000 		.space	4
  84              		.align	2
  85              	uxSchedulerSuspended:
  86 0128 00000000 		.space	4
  87              		.section	.text.xTaskCreate,"ax",%progbits
  88              		.align	2
  89              		.global	xTaskCreate
  90              		.thumb
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 3


  91              		.thumb_func
  92              		.type	xTaskCreate, %function
  93              	xTaskCreate:
  94              	.LFB129:
  95              		.file 1 "Generated_Source\\PSoC6\\pdl\\rtos\\FreeRTOS\\9.0.0\\Source\\tasks.c"
   1:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*
   2:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     All rights reserved
   4:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
   5:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
   7:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
   9:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
  13:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     ***************************************************************************
  14:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     ***************************************************************************
  19:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
  20:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
  25:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     ***************************************************************************
  26:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****      *                                                                       *
  27:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****      *    is the industry's de facto standard.                               *
  31:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****      *                                                                       *
  32:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****      *                                                                       *
  37:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     ***************************************************************************
  38:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
  39:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     defined configASSERT()?
  42:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
  43:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     embedded software for free we request you assist our global community by
  45:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     participating in the support forum.
  46:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
  47:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
  52:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 4


  53:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
  56:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
  59:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
  63:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     mission critical applications that require provable dependability.
  66:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
  67:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****     1 tab == 4 spaces!
  68:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** */
  69:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
  70:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /* Standard includes. */
  71:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #include <stdlib.h>
  72:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #include <string.h>
  73:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
  74:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** task.h is included from an application file. */
  77:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
  79:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /* FreeRTOS includes. */
  80:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #include "FreeRTOS.h"
  81:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #include "task.h"
  82:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #include "timers.h"
  83:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #include "StackMacros.h"
  84:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
  85:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  89:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  90:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
  91:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** functions but without including stdio.h here. */
  93:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#include <stdio.h>
  99:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 101:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 102:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 103:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	performed just because a higher priority task has been woken. */
 104:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 105:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #else
 106:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 107:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif
 108:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 109:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 5


 110:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
 111:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
 112:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
 113:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 114:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*
 115:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 116:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 117:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  */
 118:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 119:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 120:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
 121:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
 122:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
 123:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
 124:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
 125:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
 126:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** settings allow a task to be created using either statically or dynamically
 127:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
 128:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
 129:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
 130:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** made to free the RAM that was allocated statically.
 131:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
 132:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
 133:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
 134:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB. */
 135:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE ( ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && (
 136:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
 137:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
 138:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 139:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 140:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*
 141:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 142:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  */
 143:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 144:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 145:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 146:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 147:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 148:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*
 149:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 150:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * global, rather than file scope.
 151:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  */
 152:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 153:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#define static
 154:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif
 155:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 156:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 157:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 158:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 159:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 160:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	microcontroller architecture. */
 161:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 162:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 163:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	state task. */
 164:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 165:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{																									\
 166:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 6


 167:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{																								\
 168:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 169:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}																								\
 170:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 171:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 172:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/*-----------------------------------------------------------*/
 173:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 174:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 175:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{																									\
 176:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 177:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 																										\
 178:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 179:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 180:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{																								\
 181:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 182:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			--uxTopPriority;																			\
 183:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}																								\
 184:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 																										\
 185:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 186:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 187:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 188:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 189:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 190:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 191:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/*-----------------------------------------------------------*/
 192:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 193:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 194:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 195:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	being used. */
 196:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 197:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 198:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 199:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 200:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 201:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 202:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 203:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	architecture being used. */
 204:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 205:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 206:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 207:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 208:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/*-----------------------------------------------------------*/
 209:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 210:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 211:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{																								\
 212:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 213:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 																									\
 214:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 215:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 216:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 217:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 218:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 219:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 220:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/*-----------------------------------------------------------*/
 221:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 222:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 223:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 7


 224:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 225:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 226:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{																									\
 227:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 228:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{																								\
 229:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 230:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}																								\
 231:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 232:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 233:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 234:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 235:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
 236:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 237:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 238:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** count overflows. */
 239:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 240:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** {																									\
 241:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	List_t *pxTemp;																					\
 242:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 																									\
 243:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 244:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 245:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 																									\
 246:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 247:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 248:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 249:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	xNumOfOverflows++;																				\
 250:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 251:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** }
 252:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 253:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
 254:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 255:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*
 256:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 257:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 258:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  */
 259:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 260:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 261:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 262:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 263:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 264:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
 265:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 266:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*
 267:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 268:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 269:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 270:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 271:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  */
 272:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 273:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 274:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 275:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 276:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 277:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 278:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 279:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 280:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 8


 281:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** to its original value when it is released. */
 282:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 283:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 284:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #else
 285:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 286:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif
 287:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 288:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*
 289:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 290:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 291:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * (the task's run time environment, including register values)
 292:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  */
 293:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** typedef struct tskTaskControlBlock
 294:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** {
 295:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 296:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 297:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 298:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 299:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif
 300:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 301:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 302:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 303:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 304:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 305:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 306:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 307:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 308:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 309:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif
 310:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 311:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 312:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 313:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif
 314:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 315:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 316:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 317:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 318:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif
 319:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 320:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 321:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 322:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 323:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif
 324:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 325:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 326:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 327:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif
 328:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 329:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 330:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 331:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif
 332:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 333:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 334:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 335:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif
 336:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 337:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 9


 338:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 339:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 340:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 341:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 342:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 343:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 344:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 345:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		struct	_reent xNewLib_reent;
 346:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif
 347:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 348:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 349:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 350:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 351:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif
 352:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 353:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* See the comments above the definition of
 354:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 355:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 356:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 357:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif
 358:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 359:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 360:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		uint8_t ucDelayAborted;
 361:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif
 362:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 363:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** } tskTCB;
 364:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 365:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 366:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 367:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** typedef tskTCB TCB_t;
 368:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 369:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 370:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** static variables must be declared volatile. */
 371:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 372:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 373:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 374:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 375:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 376:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 377:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 378:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 379:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 380:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 381:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 382:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 383:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 384:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 385:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 386:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 387:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif
 388:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 389:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 390:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 391:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 392:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 393:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif
 394:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 10


 395:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /* Other file private variables. --------------------------------*/
 396:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 397:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 398:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 399:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 400:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 401:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 402:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 403:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 404:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 405:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 406:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 407:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 408:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 409:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 410:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 411:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 412:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 413:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 414:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** accessed from a critical section. */
 415:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 416:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 417:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 418:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 419:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 420:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 421:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 422:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif
 423:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 424:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*lint +e956 */
 425:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 426:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
 427:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 428:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 429:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 430:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 431:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif
 432:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 433:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 434:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	extern void vApplicationTickHook( void );
 435:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif
 436:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 437:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 438:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 439:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif
 440:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 441:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /* File private functions. --------------------------------*/
 442:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 443:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /**
 444:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 445:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 446:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * is in any other state.
 447:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  */
 448:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 449:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 450:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 451:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 11


 452:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*
 453:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 454:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * automatically upon the creation of the first task.
 455:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  */
 456:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 457:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 458:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*
 459:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 460:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 461:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * creation of the first user task.
 462:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  *
 463:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 464:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 465:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  *
 466:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 467:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  *
 468:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  */
 469:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 470:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 471:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*
 472:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 473:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * including the stack pointed to by the TCB.
 474:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  *
 475:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 476:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 477:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  */
 478:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 479:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 480:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 481:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 482:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif
 483:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 484:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*
 485:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 486:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 487:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * and its TCB deleted.
 488:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  */
 489:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 490:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 491:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*
 492:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 493:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * either the current or the overflow delayed task list.
 494:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  */
 495:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 496:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 497:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*
 498:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 499:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 500:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * a suspended list, etc.).
 501:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  *
 502:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 503:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * NORMAL APPLICATION CODE.
 504:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  */
 505:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 506:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 507:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 508:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 12


 509:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif
 510:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 511:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*
 512:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 513:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 514:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  */
 515:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 516:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 517:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 518:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 519:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif
 520:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 521:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*
 522:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 523:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 524:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 525:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  */
 526:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 527:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 528:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 529:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 530:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif
 531:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 532:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*
 533:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 534:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 535:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  *
 536:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 537:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 538:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 539:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * set to a value other than 1.
 540:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  */
 541:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 542:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 543:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 544:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 545:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif
 546:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 547:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*
 548:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 549:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * will exit the Blocked state.
 550:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  */
 551:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 552:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 553:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 554:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 555:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/*
 556:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 557:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	 * human readable tables of task information.
 558:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	 */
 559:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 560:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 561:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif
 562:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 563:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*
 564:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 565:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * dynamically to fill in the structure's members.
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 13


 566:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  */
 567:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 568:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 									const char * const pcName,
 569:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 									const uint32_t ulStackDepth,
 570:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 									void * const pvParameters,
 571:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 									UBaseType_t uxPriority,
 572:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 573:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 									TCB_t *pxNewTCB,
 574:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char
 575:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 576:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*
 577:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 578:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * under the control of the scheduler.
 579:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  */
 580:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 581:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 582:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
 583:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 584:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 585:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 586:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 587:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 									const char * const pcName,
 588:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 									const uint32_t ulStackDepth,
 589:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 									void * const pvParameters,
 590:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 									UBaseType_t uxPriority,
 591:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 592:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for st
 593:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 594:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t *pxNewTCB;
 595:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TaskHandle_t xReturn;
 596:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 597:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 598:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 599:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 600:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
 602:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 603:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			function - use them. */
 604:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 607:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 608:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
 609:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
 613:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 615:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
 618:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
 619:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
 620:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xReturn = NULL;
 621:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
 622:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 14


 623:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return xReturn;
 624:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 625:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 626:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
 628:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 629:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if( portUSING_MPU_WRAPPERS == 1 )
 630:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 631:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 632:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 633:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 636:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 637:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 638:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 639:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
 640:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 641:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 642:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			not static allocation is being used. */
 643:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 644:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 645:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( pxNewTCB != NULL )
 646:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
 647:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Store the stack location in the TCB. */
 648:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 649:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 650:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note
 651:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				this task had a statically allocated stack in case it is
 652:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				later deleted.  The TCB was allocated dynamically. */
 653:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 654:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 655:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 656:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 										pxTaskDefinition->pcName,
 657:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 658:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 659:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 660:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 661:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 										pxTaskDefinition->xRegions );
 662:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 663:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 664:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				xReturn = pdPASS;
 665:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
 666:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
 667:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 668:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return xReturn;
 669:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 670:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 671:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 672:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
 673:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 674:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 675:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 676:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 677:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 							const char * const pcName,
 678:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 							const uint16_t usStackDepth,
 679:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 							void * const pvParameters,
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 15


 680:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 							UBaseType_t uxPriority,
 681:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for str
 682:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
  96              		.loc 1 682 0
  97              		.cfi_startproc
  98              		@ args = 8, pretend = 0, frame = 32
  99              		@ frame_needed = 1, uses_anonymous_args = 0
 100 0000 80B5     		push	{r7, lr}
 101              		.cfi_def_cfa_offset 8
 102              		.cfi_offset 7, -8
 103              		.cfi_offset 14, -4
 104 0002 8CB0     		sub	sp, sp, #48
 105              		.cfi_def_cfa_offset 56
 106 0004 04AF     		add	r7, sp, #16
 107              		.cfi_def_cfa 7, 40
 108 0006 F860     		str	r0, [r7, #12]
 109 0008 B960     		str	r1, [r7, #8]
 110 000a 3B60     		str	r3, [r7]
 111 000c 1346     		mov	r3, r2	@ movhi
 112 000e FB80     		strh	r3, [r7, #6]	@ movhi
 113              	.LBB18:
 683:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	BaseType_t xReturn;
 685:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 686:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 687:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 688:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		the TCB then the stack. */
 689:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 690:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
 691:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 692:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 693:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			allocation is being used. */
 694:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 695:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 696:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( pxNewTCB != NULL )
 697:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
 698:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 699:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 700:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				be deleted later if required. */
 701:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 702:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 703:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 704:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
 705:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 706:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					vPortFree( pxNewTCB );
 707:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					pxNewTCB = NULL;
 708:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
 709:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
 710:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
 711:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 712:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
 713:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		StackType_t *pxStack;
 714:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 715:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 716:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 114              		.loc 1 716 0
 115 0010 FB88     		ldrh	r3, [r7, #6]
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 16


 116 0012 9B00     		lsls	r3, r3, #2
 117 0014 1846     		mov	r0, r3
 118 0016 FFF7FEFF 		bl	pvPortMalloc
 119 001a 7861     		str	r0, [r7, #20]
 717:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 718:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( pxStack != NULL )
 120              		.loc 1 718 0
 121 001c 7B69     		ldr	r3, [r7, #20]
 122 001e 002B     		cmp	r3, #0
 123 0020 0ED0     		beq	.L2
 719:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
 720:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Allocate space for the TCB. */
 721:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 124              		.loc 1 721 0
 125 0022 6020     		movs	r0, #96
 126 0024 FFF7FEFF 		bl	pvPortMalloc
 127 0028 F861     		str	r0, [r7, #28]
 722:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 723:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( pxNewTCB != NULL )
 128              		.loc 1 723 0
 129 002a FB69     		ldr	r3, [r7, #28]
 130 002c 002B     		cmp	r3, #0
 131 002e 03D0     		beq	.L3
 724:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
 725:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* Store the stack location in the TCB. */
 726:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 132              		.loc 1 726 0
 133 0030 FB69     		ldr	r3, [r7, #28]
 134 0032 7A69     		ldr	r2, [r7, #20]
 135 0034 1A63     		str	r2, [r3, #48]
 136 0036 05E0     		b	.L5
 137              	.L3:
 727:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
 728:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else
 729:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
 730:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 731:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					it again. */
 732:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					vPortFree( pxStack );
 138              		.loc 1 732 0
 139 0038 7869     		ldr	r0, [r7, #20]
 140 003a FFF7FEFF 		bl	vPortFree
 141 003e 01E0     		b	.L5
 142              	.L2:
 733:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
 734:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
 735:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
 736:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
 737:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				pxNewTCB = NULL;
 143              		.loc 1 737 0
 144 0040 0023     		movs	r3, #0
 145 0042 FB61     		str	r3, [r7, #28]
 146              	.L5:
 147              	.LBE18:
 738:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
 739:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
 740:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 741:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 17


 742:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( pxNewTCB != NULL )
 148              		.loc 1 742 0
 149 0044 FB69     		ldr	r3, [r7, #28]
 150 0046 002B     		cmp	r3, #0
 151 0048 13D0     		beq	.L6
 743:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
 744:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 745:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
 746:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 747:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 748:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 749:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
 750:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 751:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 752:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 152              		.loc 1 752 0
 153 004a FA88     		ldrh	r2, [r7, #6]
 154 004c 0023     		movs	r3, #0
 155 004e 0393     		str	r3, [sp, #12]
 156 0050 FB69     		ldr	r3, [r7, #28]
 157 0052 0293     		str	r3, [sp, #8]
 158 0054 FB6A     		ldr	r3, [r7, #44]
 159 0056 0193     		str	r3, [sp, #4]
 160 0058 BB6A     		ldr	r3, [r7, #40]
 161 005a 0093     		str	r3, [sp]
 162 005c 3B68     		ldr	r3, [r7]
 163 005e B968     		ldr	r1, [r7, #8]
 164 0060 F868     		ldr	r0, [r7, #12]
 165 0062 FFF7FEFF 		bl	prvInitialiseNewTask
 753:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 166              		.loc 1 753 0
 167 0066 F869     		ldr	r0, [r7, #28]
 168 0068 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 754:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xReturn = pdPASS;
 169              		.loc 1 754 0
 170 006c 0123     		movs	r3, #1
 171 006e BB61     		str	r3, [r7, #24]
 172 0070 02E0     		b	.L7
 173              	.L6:
 755:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
 756:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
 757:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
 758:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 174              		.loc 1 758 0
 175 0072 4FF0FF33 		mov	r3, #-1
 176 0076 BB61     		str	r3, [r7, #24]
 177              	.L7:
 759:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
 760:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 761:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return xReturn;
 178              		.loc 1 761 0
 179 0078 BB69     		ldr	r3, [r7, #24]
 762:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 180              		.loc 1 762 0
 181 007a 1846     		mov	r0, r3
 182 007c 2037     		adds	r7, r7, #32
 183              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 18


 184 007e BD46     		mov	sp, r7
 185              		.cfi_def_cfa_register 13
 186              		@ sp needed
 187 0080 80BD     		pop	{r7, pc}
 188              		.cfi_endproc
 189              	.LFE129:
 190              		.size	xTaskCreate, .-xTaskCreate
 191 0082 00BF     		.section	.text.prvInitialiseNewTask,"ax",%progbits
 192              		.align	2
 193              		.thumb
 194              		.thumb_func
 195              		.type	prvInitialiseNewTask, %function
 196              	prvInitialiseNewTask:
 197              	.LFB130:
 763:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 764:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 765:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
 766:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 767:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 768:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 									const char * const pcName,
 769:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 									const uint32_t ulStackDepth,
 770:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 									void * const pvParameters,
 771:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 									UBaseType_t uxPriority,
 772:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 773:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 									TCB_t *pxNewTCB,
 774:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed fo
 775:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** {
 198              		.loc 1 775 0
 199              		.cfi_startproc
 200              		@ args = 16, pretend = 0, frame = 24
 201              		@ frame_needed = 1, uses_anonymous_args = 0
 202 0000 80B5     		push	{r7, lr}
 203              		.cfi_def_cfa_offset 8
 204              		.cfi_offset 7, -8
 205              		.cfi_offset 14, -4
 206 0002 86B0     		sub	sp, sp, #24
 207              		.cfi_def_cfa_offset 32
 208 0004 00AF     		add	r7, sp, #0
 209              		.cfi_def_cfa_register 7
 210 0006 F860     		str	r0, [r7, #12]
 211 0008 B960     		str	r1, [r7, #8]
 212 000a 7A60     		str	r2, [r7, #4]
 213 000c 3B60     		str	r3, [r7]
 776:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** StackType_t *pxTopOfStack;
 777:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** UBaseType_t x;
 778:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 779:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 780:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 781:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		BaseType_t xRunPrivileged;
 782:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 783:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
 784:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 785:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
 786:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
 787:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
 788:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 789:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 19


 790:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 791:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 792:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 793:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 794:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 795:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 796:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 797:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 214              		.loc 1 797 0
 215 000e BB6A     		ldr	r3, [r7, #40]
 216 0010 186B     		ldr	r0, [r3, #48]
 217 0012 7B68     		ldr	r3, [r7, #4]
 218 0014 9B00     		lsls	r3, r3, #2
 219 0016 1A46     		mov	r2, r3
 220 0018 A521     		movs	r1, #165
 221 001a FFF7FEFF 		bl	memset
 798:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 799:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INC
 800:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 801:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 802:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 803:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 804:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	by the port. */
 805:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 806:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 807:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 222              		.loc 1 807 0
 223 001e BB6A     		ldr	r3, [r7, #40]
 224 0020 1A6B     		ldr	r2, [r3, #48]
 225 0022 7B68     		ldr	r3, [r7, #4]
 226 0024 03F18043 		add	r3, r3, #1073741824
 227 0028 013B     		subs	r3, r3, #1
 228 002a 9B00     		lsls	r3, r3, #2
 229 002c 1344     		add	r3, r3, r2
 230 002e 3B61     		str	r3, [r7, #16]
 808:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 231              		.loc 1 808 0
 232 0030 3B69     		ldr	r3, [r7, #16]
 233 0032 23F00703 		bic	r3, r3, #7
 234 0036 3B61     		str	r3, [r7, #16]
 809:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 810:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 811:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 235              		.loc 1 811 0
 236 0038 3B69     		ldr	r3, [r7, #16]
 237 003a 03F00703 		and	r3, r3, #7
 238 003e 002B     		cmp	r3, #0
 239 0040 01D0     		beq	.L10
 240              		.loc 1 811 0 is_stmt 0 discriminator 1
 241              		.syntax unified
 242              	@ 811 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 243 0042 72B6     		 cpsid i 
 244              	@ 0 "" 2
 245              		.thumb
 246              		.syntax unified
 247              	.L11:
 248 0044 FEE7     		b	.L11
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 20


 249              	.L10:
 812:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 813:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 814:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 815:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 816:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 817:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 818:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 819:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 820:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 821:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		performed. */
 822:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 823:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 824:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 825:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 826:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* Store the task name in the TCB. */
 827:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 250              		.loc 1 827 0 is_stmt 1
 251 0046 0023     		movs	r3, #0
 252 0048 7B61     		str	r3, [r7, #20]
 253 004a 12E0     		b	.L12
 254              	.L15:
 828:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 829:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 255              		.loc 1 829 0
 256 004c BA68     		ldr	r2, [r7, #8]
 257 004e 7B69     		ldr	r3, [r7, #20]
 258 0050 1344     		add	r3, r3, r2
 259 0052 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 260 0054 BA6A     		ldr	r2, [r7, #40]
 261 0056 7B69     		ldr	r3, [r7, #20]
 262 0058 1344     		add	r3, r3, r2
 263 005a 3433     		adds	r3, r3, #52
 264 005c 0A46     		mov	r2, r1
 265 005e 1A70     		strb	r2, [r3]
 830:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 831:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 832:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 833:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 834:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 266              		.loc 1 834 0
 267 0060 BA68     		ldr	r2, [r7, #8]
 268 0062 7B69     		ldr	r3, [r7, #20]
 269 0064 1344     		add	r3, r3, r2
 270 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 271 0068 002B     		cmp	r3, #0
 272 006a 06D0     		beq	.L20
 827:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 273              		.loc 1 827 0 discriminator 2
 274 006c 7B69     		ldr	r3, [r7, #20]
 275 006e 0133     		adds	r3, r3, #1
 276 0070 7B61     		str	r3, [r7, #20]
 277              	.L12:
 827:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 278              		.loc 1 827 0 is_stmt 0 discriminator 1
 279 0072 7B69     		ldr	r3, [r7, #20]
 280 0074 0F2B     		cmp	r3, #15
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 21


 281 0076 E9D9     		bls	.L15
 282 0078 00E0     		b	.L14
 283              	.L20:
 835:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
 836:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			break;
 284              		.loc 1 836 0 is_stmt 1
 285 007a 00BF     		nop
 286              	.L14:
 837:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
 838:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
 839:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
 840:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 841:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
 842:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 843:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 844:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 845:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 846:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 287              		.loc 1 846 0
 288 007c BB6A     		ldr	r3, [r7, #40]
 289 007e 0022     		movs	r2, #0
 290 0080 83F84320 		strb	r2, [r3, #67]
 847:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 848:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 849:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	remove the privilege bit if one is present. */
 850:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 291              		.loc 1 850 0
 292 0084 3B6A     		ldr	r3, [r7, #32]
 293 0086 062B     		cmp	r3, #6
 294 0088 01D9     		bls	.L16
 851:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 852:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 295              		.loc 1 852 0
 296 008a 0623     		movs	r3, #6
 297 008c 3B62     		str	r3, [r7, #32]
 298              	.L16:
 853:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 854:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	else
 855:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 856:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 857:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 858:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 859:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 299              		.loc 1 859 0
 300 008e BB6A     		ldr	r3, [r7, #40]
 301 0090 3A6A     		ldr	r2, [r7, #32]
 302 0092 DA62     		str	r2, [r3, #44]
 860:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 861:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 862:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 863:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 864:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 865:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 866:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 867:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 303              		.loc 1 867 0
 304 0094 BB6A     		ldr	r3, [r7, #40]
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 22


 305 0096 0433     		adds	r3, r3, #4
 306 0098 1846     		mov	r0, r3
 307 009a FFF7FEFF 		bl	vListInitialiseItem
 868:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 308              		.loc 1 868 0
 309 009e BB6A     		ldr	r3, [r7, #40]
 310 00a0 1833     		adds	r3, r3, #24
 311 00a2 1846     		mov	r0, r3
 312 00a4 FFF7FEFF 		bl	vListInitialiseItem
 869:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 870:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 871:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 872:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 313              		.loc 1 872 0
 314 00a8 BB6A     		ldr	r3, [r7, #40]
 315 00aa BA6A     		ldr	r2, [r7, #40]
 316 00ac 1A61     		str	r2, [r3, #16]
 873:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 874:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* Event lists are always in priority order. */
 875:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 317              		.loc 1 875 0
 318 00ae 3B6A     		ldr	r3, [r7, #32]
 319 00b0 C3F10702 		rsb	r2, r3, #7
 320 00b4 BB6A     		ldr	r3, [r7, #40]
 321 00b6 9A61     		str	r2, [r3, #24]
 876:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 322              		.loc 1 876 0
 323 00b8 BB6A     		ldr	r3, [r7, #40]
 324 00ba BA6A     		ldr	r2, [r7, #40]
 325 00bc 5A62     		str	r2, [r3, #36]
 877:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 878:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 879:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 880:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 881:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 882:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 883:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 884:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 885:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 886:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 887:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 888:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 889:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 890:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 891:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 892:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 893:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 894:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 895:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 896:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 897:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 898:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 899:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 900:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#else
 901:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 902:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 903:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		( void ) xRegions;
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 23


 904:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 905:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif
 906:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 907:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 908:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 909:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 326              		.loc 1 909 0
 327 00be 0023     		movs	r3, #0
 328 00c0 7B61     		str	r3, [r7, #20]
 329 00c2 09E0     		b	.L17
 330              	.L18:
 910:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
 911:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 331              		.loc 1 911 0 discriminator 3
 332 00c4 BA6A     		ldr	r2, [r7, #40]
 333 00c6 7B69     		ldr	r3, [r7, #20]
 334 00c8 1033     		adds	r3, r3, #16
 335 00ca 9B00     		lsls	r3, r3, #2
 336 00cc 1344     		add	r3, r3, r2
 337 00ce 0022     		movs	r2, #0
 338 00d0 5A60     		str	r2, [r3, #4]
 909:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
 339              		.loc 1 909 0 discriminator 3
 340 00d2 7B69     		ldr	r3, [r7, #20]
 341 00d4 0133     		adds	r3, r3, #1
 342 00d6 7B61     		str	r3, [r7, #20]
 343              	.L17:
 909:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
 344              		.loc 1 909 0 is_stmt 0 discriminator 1
 345 00d8 7B69     		ldr	r3, [r7, #20]
 346 00da 042B     		cmp	r3, #4
 347 00dc F2D9     		bls	.L18
 912:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
 913:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 914:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif
 915:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 916:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 917:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 918:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 348              		.loc 1 918 0 is_stmt 1
 349 00de BB6A     		ldr	r3, [r7, #40]
 350 00e0 0022     		movs	r2, #0
 351 00e2 9A65     		str	r2, [r3, #88]
 919:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 352              		.loc 1 919 0
 353 00e4 BB6A     		ldr	r3, [r7, #40]
 354 00e6 0022     		movs	r2, #0
 355 00e8 83F85C20 		strb	r2, [r3, #92]
 920:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 921:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif
 922:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 923:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 924:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 925:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 926:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 927:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 928:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 24


 929:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 930:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 931:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 932:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 933:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 934:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif
 935:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 936:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 937:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 938:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 939:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	the	top of stack variable is updated. */
 940:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 941:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 942:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
 943:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 944:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
 945:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 946:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 356              		.loc 1 946 0
 357 00ec 3A68     		ldr	r2, [r7]
 358 00ee F968     		ldr	r1, [r7, #12]
 359 00f0 3869     		ldr	r0, [r7, #16]
 360 00f2 FFF7FEFF 		bl	pxPortInitialiseStack
 361 00f6 0246     		mov	r2, r0
 362 00f8 BB6A     		ldr	r3, [r7, #40]
 363 00fa 1A60     		str	r2, [r3]
 947:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 948:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
 949:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 950:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 364              		.loc 1 950 0
 365 00fc 7B6A     		ldr	r3, [r7, #36]
 366 00fe 002B     		cmp	r3, #0
 367 0100 02D0     		beq	.L21
 951:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 952:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
 953:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
 954:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 368              		.loc 1 954 0
 369 0102 7B6A     		ldr	r3, [r7, #36]
 370 0104 BA6A     		ldr	r2, [r7, #40]
 371 0106 1A60     		str	r2, [r3]
 372              	.L21:
 955:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 956:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	else
 957:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 958:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 959:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 960:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** }
 373              		.loc 1 960 0
 374 0108 00BF     		nop
 375 010a 1837     		adds	r7, r7, #24
 376              		.cfi_def_cfa_offset 8
 377 010c BD46     		mov	sp, r7
 378              		.cfi_def_cfa_register 13
 379              		@ sp needed
 380 010e 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 25


 381              		.cfi_endproc
 382              	.LFE130:
 383              		.size	prvInitialiseNewTask, .-prvInitialiseNewTask
 384              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 385              		.align	2
 386              		.thumb
 387              		.thumb_func
 388              		.type	prvAddNewTaskToReadyList, %function
 389              	prvAddNewTaskToReadyList:
 390              	.LFB131:
 961:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
 962:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 963:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 964:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** {
 391              		.loc 1 964 0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 8
 394              		@ frame_needed = 1, uses_anonymous_args = 0
 395 0000 80B5     		push	{r7, lr}
 396              		.cfi_def_cfa_offset 8
 397              		.cfi_offset 7, -8
 398              		.cfi_offset 14, -4
 399 0002 82B0     		sub	sp, sp, #8
 400              		.cfi_def_cfa_offset 16
 401 0004 00AF     		add	r7, sp, #0
 402              		.cfi_def_cfa_register 7
 403 0006 7860     		str	r0, [r7, #4]
 965:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 966:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	updated. */
 967:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	taskENTER_CRITICAL();
 404              		.loc 1 967 0
 405 0008 FFF7FEFF 		bl	vPortEnterCritical
 968:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 969:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 406              		.loc 1 969 0
 407 000c 2B4B     		ldr	r3, .L28
 408 000e 1B68     		ldr	r3, [r3]
 409 0010 0133     		adds	r3, r3, #1
 410 0012 2A4A     		ldr	r2, .L28
 411 0014 1360     		str	r3, [r2]
 970:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 412              		.loc 1 970 0
 413 0016 2A4B     		ldr	r3, .L28+4
 414 0018 1B68     		ldr	r3, [r3]
 415 001a 002B     		cmp	r3, #0
 416 001c 09D1     		bne	.L23
 971:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
 972:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
 973:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			the suspended state - make this the current task. */
 974:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 417              		.loc 1 974 0
 418 001e 284A     		ldr	r2, .L28+4
 419 0020 7B68     		ldr	r3, [r7, #4]
 420 0022 1360     		str	r3, [r2]
 975:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 976:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 421              		.loc 1 976 0
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 26


 422 0024 254B     		ldr	r3, .L28
 423 0026 1B68     		ldr	r3, [r3]
 424 0028 012B     		cmp	r3, #1
 425 002a 10D1     		bne	.L24
 977:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
 978:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
 979:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				initialisation required.  We will not recover if this call
 980:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				fails, but we will report the failure. */
 981:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				prvInitialiseTaskLists();
 426              		.loc 1 981 0
 427 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 428 0030 0DE0     		b	.L24
 429              	.L23:
 982:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
 983:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
 984:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
 985:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 986:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
 987:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
 988:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
 989:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
 990:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
 991:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			current task if it is the highest priority task to be created
 992:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			so far. */
 993:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 430              		.loc 1 993 0
 431 0032 244B     		ldr	r3, .L28+8
 432 0034 1B68     		ldr	r3, [r3]
 433 0036 002B     		cmp	r3, #0
 434 0038 09D1     		bne	.L24
 994:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
 995:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 435              		.loc 1 995 0
 436 003a 214B     		ldr	r3, .L28+4
 437 003c 1B68     		ldr	r3, [r3]
 438 003e DA6A     		ldr	r2, [r3, #44]
 439 0040 7B68     		ldr	r3, [r7, #4]
 440 0042 DB6A     		ldr	r3, [r3, #44]
 441 0044 9A42     		cmp	r2, r3
 442 0046 02D8     		bhi	.L24
 996:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
 997:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 443              		.loc 1 997 0
 444 0048 1D4A     		ldr	r2, .L28+4
 445 004a 7B68     		ldr	r3, [r7, #4]
 446 004c 1360     		str	r3, [r2]
 447              	.L24:
 998:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
 999:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else
1000:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
1001:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1002:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
1003:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1004:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
1005:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1006:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1007:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 27


1008:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1009:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1010:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		uxTaskNumber++;
 448              		.loc 1 1010 0
 449 004e 1E4B     		ldr	r3, .L28+12
 450 0050 1B68     		ldr	r3, [r3]
 451 0052 0133     		adds	r3, r3, #1
 452 0054 1C4A     		ldr	r2, .L28+12
 453 0056 1360     		str	r3, [r2]
1011:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1012:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1013:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1014:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1015:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1016:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1017:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1018:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1019:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1020:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 454              		.loc 1 1020 0
 455 0058 7B68     		ldr	r3, [r7, #4]
 456 005a DA6A     		ldr	r2, [r3, #44]
 457 005c 1B4B     		ldr	r3, .L28+16
 458 005e 1B68     		ldr	r3, [r3]
 459 0060 9A42     		cmp	r2, r3
 460 0062 03D9     		bls	.L25
 461              		.loc 1 1020 0 is_stmt 0 discriminator 1
 462 0064 7B68     		ldr	r3, [r7, #4]
 463 0066 DB6A     		ldr	r3, [r3, #44]
 464 0068 184A     		ldr	r2, .L28+16
 465 006a 1360     		str	r3, [r2]
 466              	.L25:
 467              		.loc 1 1020 0 discriminator 3
 468 006c 7B68     		ldr	r3, [r7, #4]
 469 006e DA6A     		ldr	r2, [r3, #44]
 470 0070 1346     		mov	r3, r2
 471 0072 9B00     		lsls	r3, r3, #2
 472 0074 1344     		add	r3, r3, r2
 473 0076 9B00     		lsls	r3, r3, #2
 474 0078 154A     		ldr	r2, .L28+20
 475 007a 1A44     		add	r2, r2, r3
 476 007c 7B68     		ldr	r3, [r7, #4]
 477 007e 0433     		adds	r3, r3, #4
 478 0080 1946     		mov	r1, r3
 479 0082 1046     		mov	r0, r2
 480 0084 FFF7FEFF 		bl	vListInsertEnd
1021:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1022:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1023:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
1024:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	taskEXIT_CRITICAL();
 481              		.loc 1 1024 0 is_stmt 1 discriminator 3
 482 0088 FFF7FEFF 		bl	vPortExitCritical
1025:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1026:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 483              		.loc 1 1026 0 discriminator 3
 484 008c 0D4B     		ldr	r3, .L28+8
 485 008e 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 28


 486 0090 002B     		cmp	r3, #0
 487 0092 0ED0     		beq	.L27
1027:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
1028:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1029:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		then it should run now. */
1030:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 488              		.loc 1 1030 0
 489 0094 0A4B     		ldr	r3, .L28+4
 490 0096 1B68     		ldr	r3, [r3]
 491 0098 DA6A     		ldr	r2, [r3, #44]
 492 009a 7B68     		ldr	r3, [r7, #4]
 493 009c DB6A     		ldr	r3, [r3, #44]
 494 009e 9A42     		cmp	r2, r3
 495 00a0 07D2     		bcs	.L27
1031:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1032:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 496              		.loc 1 1032 0
 497 00a2 0C4B     		ldr	r3, .L28+24
 498 00a4 4FF08052 		mov	r2, #268435456
 499 00a8 1A60     		str	r2, [r3]
 500              		.syntax unified
 501              	@ 1032 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 502 00aa BFF34F8F 		dsb
 503              	@ 0 "" 2
 504              	@ 1032 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 505 00ae BFF36F8F 		isb
 506              	@ 0 "" 2
 507              		.thumb
 508              		.syntax unified
 509              	.L27:
1033:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1034:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
1035:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1036:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1037:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1038:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
1039:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	else
1040:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
1041:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1042:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
1043:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** }
 510              		.loc 1 1043 0
 511 00b2 00BF     		nop
 512 00b4 0837     		adds	r7, r7, #8
 513              		.cfi_def_cfa_offset 8
 514 00b6 BD46     		mov	sp, r7
 515              		.cfi_def_cfa_register 13
 516              		@ sp needed
 517 00b8 80BD     		pop	{r7, pc}
 518              	.L29:
 519 00ba 00BF     		.align	2
 520              	.L28:
 521 00bc 00010000 		.word	uxCurrentNumberOfTasks
 522 00c0 00000000 		.word	pxCurrentTCB
 523 00c4 0C010000 		.word	xSchedulerRunning
 524 00c8 1C010000 		.word	uxTaskNumber
 525 00cc 08010000 		.word	uxTopReadyPriority
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 29


 526 00d0 04000000 		.word	pxReadyTasksLists
 527 00d4 04ED00E0 		.word	-536810236
 528              		.cfi_endproc
 529              	.LFE131:
 530              		.size	prvAddNewTaskToReadyList, .-prvAddNewTaskToReadyList
 531              		.section	.text.vTaskDelete,"ax",%progbits
 532              		.align	2
 533              		.global	vTaskDelete
 534              		.thumb
 535              		.thumb_func
 536              		.type	vTaskDelete, %function
 537              	vTaskDelete:
 538              	.LFB132:
1044:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
1045:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1046:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1047:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1048:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1049:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 539              		.loc 1 1049 0
 540              		.cfi_startproc
 541              		@ args = 0, pretend = 0, frame = 16
 542              		@ frame_needed = 1, uses_anonymous_args = 0
 543 0000 80B5     		push	{r7, lr}
 544              		.cfi_def_cfa_offset 8
 545              		.cfi_offset 7, -8
 546              		.cfi_offset 14, -4
 547 0002 84B0     		sub	sp, sp, #16
 548              		.cfi_def_cfa_offset 24
 549 0004 00AF     		add	r7, sp, #0
 550              		.cfi_def_cfa_register 7
 551 0006 7860     		str	r0, [r7, #4]
1050:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t *pxTCB;
1051:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1052:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		taskENTER_CRITICAL();
 552              		.loc 1 1052 0
 553 0008 FFF7FEFF 		bl	vPortEnterCritical
1053:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1054:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1055:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			being deleted. */
1056:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 554              		.loc 1 1056 0
 555 000c 7B68     		ldr	r3, [r7, #4]
 556 000e 002B     		cmp	r3, #0
 557 0010 02D1     		bne	.L31
 558              		.loc 1 1056 0 is_stmt 0 discriminator 1
 559 0012 284B     		ldr	r3, .L40
 560 0014 1B68     		ldr	r3, [r3]
 561 0016 00E0     		b	.L32
 562              	.L31:
 563              		.loc 1 1056 0 discriminator 2
 564 0018 7B68     		ldr	r3, [r7, #4]
 565              	.L32:
 566              		.loc 1 1056 0 discriminator 4
 567 001a FB60     		str	r3, [r7, #12]
1057:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1058:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Remove task from the ready list. */
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 30


1059:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 568              		.loc 1 1059 0 is_stmt 1 discriminator 4
 569 001c FB68     		ldr	r3, [r7, #12]
 570 001e 0433     		adds	r3, r3, #4
 571 0020 1846     		mov	r0, r3
 572 0022 FFF7FEFF 		bl	uxListRemove
1060:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1061:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1062:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1063:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
1064:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1065:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1066:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1067:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1068:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Is the task waiting on an event also? */
1069:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 573              		.loc 1 1069 0 discriminator 4
 574 0026 FB68     		ldr	r3, [r7, #12]
 575 0028 9B6A     		ldr	r3, [r3, #40]
 576 002a 002B     		cmp	r3, #0
 577 002c 04D0     		beq	.L33
1070:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1071:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 578              		.loc 1 1071 0
 579 002e FB68     		ldr	r3, [r7, #12]
 580 0030 1833     		adds	r3, r3, #24
 581 0032 1846     		mov	r0, r3
 582 0034 FFF7FEFF 		bl	uxListRemove
 583              	.L33:
1072:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1073:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
1074:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1075:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1076:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1077:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1078:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1079:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1080:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1081:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			not return. */
1082:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			uxTaskNumber++;
 584              		.loc 1 1082 0
 585 0038 1F4B     		ldr	r3, .L40+4
 586 003a 1B68     		ldr	r3, [r3]
 587 003c 0133     		adds	r3, r3, #1
 588 003e 1E4A     		ldr	r2, .L40+4
 589 0040 1360     		str	r3, [r2]
1083:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1084:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 590              		.loc 1 1084 0
 591 0042 1C4B     		ldr	r3, .L40
 592 0044 1B68     		ldr	r3, [r3]
 593 0046 FA68     		ldr	r2, [r7, #12]
 594 0048 9A42     		cmp	r2, r3
 595 004a 0BD1     		bne	.L34
1085:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1086:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1087:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				task itself, as a context switch to another task is required.
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 31


1088:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1089:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				check the termination list and free up any memory allocated by
1090:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1091:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 596              		.loc 1 1091 0
 597 004c FB68     		ldr	r3, [r7, #12]
 598 004e 0433     		adds	r3, r3, #4
 599 0050 1946     		mov	r1, r3
 600 0052 1A48     		ldr	r0, .L40+8
 601 0054 FFF7FEFF 		bl	vListInsertEnd
1092:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1093:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1094:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1095:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1096:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 602              		.loc 1 1096 0
 603 0058 194B     		ldr	r3, .L40+12
 604 005a 1B68     		ldr	r3, [r3]
 605 005c 0133     		adds	r3, r3, #1
 606 005e 184A     		ldr	r2, .L40+12
 607 0060 1360     		str	r3, [r2]
 608 0062 09E0     		b	.L35
 609              	.L34:
1097:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1098:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1099:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1100:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				after which it is not possible to yield away from this task -
1101:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1102:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				required. */
1103:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1104:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1105:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
1106:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1107:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 610              		.loc 1 1107 0
 611 0064 174B     		ldr	r3, .L40+16
 612 0066 1B68     		ldr	r3, [r3]
 613 0068 013B     		subs	r3, r3, #1
 614 006a 164A     		ldr	r2, .L40+16
 615 006c 1360     		str	r3, [r2]
1108:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 616              		.loc 1 1108 0
 617 006e F868     		ldr	r0, [r7, #12]
 618 0070 FFF7FEFF 		bl	prvDeleteTCB
1109:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1110:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1111:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				the task that has just been deleted. */
1112:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 619              		.loc 1 1112 0
 620 0074 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 621              	.L35:
1113:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1114:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1115:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1116:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1117:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		taskEXIT_CRITICAL();
 622              		.loc 1 1117 0
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 32


 623 0078 FFF7FEFF 		bl	vPortExitCritical
1118:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1119:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1120:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		been deleted. */
1121:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 624              		.loc 1 1121 0
 625 007c 124B     		ldr	r3, .L40+20
 626 007e 1B68     		ldr	r3, [r3]
 627 0080 002B     		cmp	r3, #0
 628 0082 12D0     		beq	.L39
1122:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1123:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 629              		.loc 1 1123 0
 630 0084 0B4B     		ldr	r3, .L40
 631 0086 1B68     		ldr	r3, [r3]
 632 0088 FA68     		ldr	r2, [r7, #12]
 633 008a 9A42     		cmp	r2, r3
 634 008c 0DD1     		bne	.L39
1124:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1125:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 635              		.loc 1 1125 0
 636 008e 0F4B     		ldr	r3, .L40+24
 637 0090 1B68     		ldr	r3, [r3]
 638 0092 002B     		cmp	r3, #0
 639 0094 01D0     		beq	.L37
 640              		.loc 1 1125 0 is_stmt 0 discriminator 1
 641              		.syntax unified
 642              	@ 1125 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 643 0096 72B6     		 cpsid i 
 644              	@ 0 "" 2
 645              		.thumb
 646              		.syntax unified
 647              	.L38:
 648 0098 FEE7     		b	.L38
 649              	.L37:
1126:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				portYIELD_WITHIN_API();
 650              		.loc 1 1126 0 is_stmt 1
 651 009a 0D4B     		ldr	r3, .L40+28
 652 009c 4FF08052 		mov	r2, #268435456
 653 00a0 1A60     		str	r2, [r3]
 654              		.syntax unified
 655              	@ 1126 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 656 00a2 BFF34F8F 		dsb
 657              	@ 0 "" 2
 658              	@ 1126 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 659 00a6 BFF36F8F 		isb
 660              	@ 0 "" 2
 661              		.thumb
 662              		.syntax unified
 663              	.L39:
1127:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1128:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
1129:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1130:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1131:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1132:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1133:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 33


 664              		.loc 1 1133 0
 665 00aa 00BF     		nop
 666 00ac 1037     		adds	r7, r7, #16
 667              		.cfi_def_cfa_offset 8
 668 00ae BD46     		mov	sp, r7
 669              		.cfi_def_cfa_register 13
 670              		@ sp needed
 671 00b0 80BD     		pop	{r7, pc}
 672              	.L41:
 673 00b2 00BF     		.align	2
 674              	.L40:
 675 00b4 00000000 		.word	pxCurrentTCB
 676 00b8 1C010000 		.word	uxTaskNumber
 677 00bc D4000000 		.word	xTasksWaitingTermination
 678 00c0 E8000000 		.word	uxDeletedTasksWaitingCleanUp
 679 00c4 00010000 		.word	uxCurrentNumberOfTasks
 680 00c8 0C010000 		.word	xSchedulerRunning
 681 00cc 28010000 		.word	uxSchedulerSuspended
 682 00d0 04ED00E0 		.word	-536810236
 683              		.cfi_endproc
 684              	.LFE132:
 685              		.size	vTaskDelete, .-vTaskDelete
 686              		.section	.text.vTaskDelayUntil,"ax",%progbits
 687              		.align	2
 688              		.global	vTaskDelayUntil
 689              		.thumb
 690              		.thumb_func
 691              		.type	vTaskDelayUntil, %function
 692              	vTaskDelayUntil:
 693              	.LFB133:
1134:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1135:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1136:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
1137:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1138:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1139:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1140:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1141:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 694              		.loc 1 1141 0
 695              		.cfi_startproc
 696              		@ args = 0, pretend = 0, frame = 24
 697              		@ frame_needed = 1, uses_anonymous_args = 0
 698 0000 80B5     		push	{r7, lr}
 699              		.cfi_def_cfa_offset 8
 700              		.cfi_offset 7, -8
 701              		.cfi_offset 14, -4
 702 0002 86B0     		sub	sp, sp, #24
 703              		.cfi_def_cfa_offset 32
 704 0004 00AF     		add	r7, sp, #0
 705              		.cfi_def_cfa_register 7
 706 0006 7860     		str	r0, [r7, #4]
 707 0008 3960     		str	r1, [r7]
1142:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TickType_t xTimeToWake;
1143:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 708              		.loc 1 1143 0
 709 000a 0023     		movs	r3, #0
 710 000c 7B61     		str	r3, [r7, #20]
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 34


1144:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1145:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 711              		.loc 1 1145 0
 712 000e 7B68     		ldr	r3, [r7, #4]
 713 0010 002B     		cmp	r3, #0
 714 0012 01D1     		bne	.L43
 715              		.loc 1 1145 0 is_stmt 0 discriminator 1
 716              		.syntax unified
 717              	@ 1145 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 718 0014 72B6     		 cpsid i 
 719              	@ 0 "" 2
 720              		.thumb
 721              		.syntax unified
 722              	.L44:
 723 0016 FEE7     		b	.L44
 724              	.L43:
1146:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 725              		.loc 1 1146 0 is_stmt 1
 726 0018 3B68     		ldr	r3, [r7]
 727 001a 002B     		cmp	r3, #0
 728 001c 01D1     		bne	.L45
 729              		.loc 1 1146 0 is_stmt 0 discriminator 1
 730              		.syntax unified
 731              	@ 1146 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 732 001e 72B6     		 cpsid i 
 733              	@ 0 "" 2
 734              		.thumb
 735              		.syntax unified
 736              	.L46:
 737              		.loc 1 1146 0 discriminator 2
 738 0020 FEE7     		b	.L46
 739              	.L45:
1147:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 740              		.loc 1 1147 0 is_stmt 1
 741 0022 254B     		ldr	r3, .L55
 742 0024 1B68     		ldr	r3, [r3]
 743 0026 002B     		cmp	r3, #0
 744 0028 01D0     		beq	.L47
 745              		.loc 1 1147 0 is_stmt 0 discriminator 1
 746              		.syntax unified
 747              	@ 1147 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 748 002a 72B6     		 cpsid i 
 749              	@ 0 "" 2
 750              		.thumb
 751              		.syntax unified
 752              	.L48:
 753              		.loc 1 1147 0 discriminator 3
 754 002c FEE7     		b	.L48
 755              	.L47:
1148:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1149:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		vTaskSuspendAll();
 756              		.loc 1 1149 0 is_stmt 1
 757 002e FFF7FEFF 		bl	vTaskSuspendAll
 758              	.LBB19:
1150:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1151:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1152:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			block. */
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 35


1153:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 759              		.loc 1 1153 0
 760 0032 224B     		ldr	r3, .L55+4
 761 0034 1B68     		ldr	r3, [r3]
 762 0036 3B61     		str	r3, [r7, #16]
1154:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1155:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1156:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 763              		.loc 1 1156 0
 764 0038 7B68     		ldr	r3, [r7, #4]
 765 003a 1A68     		ldr	r2, [r3]
 766 003c 3B68     		ldr	r3, [r7]
 767 003e 1344     		add	r3, r3, r2
 768 0040 FB60     		str	r3, [r7, #12]
1157:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1158:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 769              		.loc 1 1158 0
 770 0042 7B68     		ldr	r3, [r7, #4]
 771 0044 1A68     		ldr	r2, [r3]
 772 0046 3B69     		ldr	r3, [r7, #16]
 773 0048 9A42     		cmp	r2, r3
 774 004a 0BD9     		bls	.L49
1159:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1160:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* The tick count has overflowed since this function was
1161:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1162:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1163:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1164:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1165:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 775              		.loc 1 1165 0
 776 004c 7B68     		ldr	r3, [r7, #4]
 777 004e 1A68     		ldr	r2, [r3]
 778 0050 FB68     		ldr	r3, [r7, #12]
 779 0052 9A42     		cmp	r2, r3
 780 0054 11D9     		bls	.L50
 781              		.loc 1 1165 0 is_stmt 0 discriminator 1
 782 0056 FA68     		ldr	r2, [r7, #12]
 783 0058 3B69     		ldr	r3, [r7, #16]
 784 005a 9A42     		cmp	r2, r3
 785 005c 0DD9     		bls	.L50
1166:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
1167:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					xShouldDelay = pdTRUE;
 786              		.loc 1 1167 0 is_stmt 1
 787 005e 0123     		movs	r3, #1
 788 0060 7B61     		str	r3, [r7, #20]
 789 0062 0AE0     		b	.L50
 790              	.L49:
1168:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
1169:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else
1170:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
1171:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1172:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
1173:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1174:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
1175:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1176:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1177:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 36


1178:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				tick time is less than the wake time. */
1179:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 791              		.loc 1 1179 0
 792 0064 7B68     		ldr	r3, [r7, #4]
 793 0066 1A68     		ldr	r2, [r3]
 794 0068 FB68     		ldr	r3, [r7, #12]
 795 006a 9A42     		cmp	r2, r3
 796 006c 03D8     		bhi	.L51
 797              		.loc 1 1179 0 is_stmt 0 discriminator 1
 798 006e FA68     		ldr	r2, [r7, #12]
 799 0070 3B69     		ldr	r3, [r7, #16]
 800 0072 9A42     		cmp	r2, r3
 801 0074 01D9     		bls	.L50
 802              	.L51:
1180:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
1181:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					xShouldDelay = pdTRUE;
 803              		.loc 1 1181 0 is_stmt 1
 804 0076 0123     		movs	r3, #1
 805 0078 7B61     		str	r3, [r7, #20]
 806              	.L50:
1182:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
1183:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else
1184:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
1185:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1186:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
1187:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1188:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1189:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1190:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 807              		.loc 1 1190 0
 808 007a 7B68     		ldr	r3, [r7, #4]
 809 007c FA68     		ldr	r2, [r7, #12]
 810 007e 1A60     		str	r2, [r3]
1191:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1192:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 811              		.loc 1 1192 0
 812 0080 7B69     		ldr	r3, [r7, #20]
 813 0082 002B     		cmp	r3, #0
 814 0084 06D0     		beq	.L52
1193:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1194:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1195:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1196:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1197:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1198:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 815              		.loc 1 1198 0
 816 0086 FA68     		ldr	r2, [r7, #12]
 817 0088 3B69     		ldr	r3, [r7, #16]
 818 008a D31A     		subs	r3, r2, r3
 819 008c 0021     		movs	r1, #0
 820 008e 1846     		mov	r0, r3
 821 0090 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 822              	.L52:
 823              	.LBE19:
1199:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1200:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
1201:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 37


1202:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1203:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1204:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1205:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 824              		.loc 1 1205 0
 825 0094 FFF7FEFF 		bl	xTaskResumeAll
 826 0098 B860     		str	r0, [r7, #8]
1206:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1207:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1208:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		have put ourselves to sleep. */
1209:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 827              		.loc 1 1209 0
 828 009a BB68     		ldr	r3, [r7, #8]
 829 009c 002B     		cmp	r3, #0
 830 009e 07D1     		bne	.L54
1210:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1211:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			portYIELD_WITHIN_API();
 831              		.loc 1 1211 0
 832 00a0 074B     		ldr	r3, .L55+8
 833 00a2 4FF08052 		mov	r2, #268435456
 834 00a6 1A60     		str	r2, [r3]
 835              		.syntax unified
 836              	@ 1211 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 837 00a8 BFF34F8F 		dsb
 838              	@ 0 "" 2
 839              	@ 1211 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 840 00ac BFF36F8F 		isb
 841              	@ 0 "" 2
 842              		.thumb
 843              		.syntax unified
 844              	.L54:
1212:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1213:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
1214:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1215:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1216:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1217:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 845              		.loc 1 1217 0
 846 00b0 00BF     		nop
 847 00b2 1837     		adds	r7, r7, #24
 848              		.cfi_def_cfa_offset 8
 849 00b4 BD46     		mov	sp, r7
 850              		.cfi_def_cfa_register 13
 851              		@ sp needed
 852 00b6 80BD     		pop	{r7, pc}
 853              	.L56:
 854              		.align	2
 855              	.L55:
 856 00b8 28010000 		.word	uxSchedulerSuspended
 857 00bc 04010000 		.word	xTickCount
 858 00c0 04ED00E0 		.word	-536810236
 859              		.cfi_endproc
 860              	.LFE133:
 861              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 862              		.section	.text.vTaskDelay,"ax",%progbits
 863              		.align	2
 864              		.global	vTaskDelay
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 38


 865              		.thumb
 866              		.thumb_func
 867              		.type	vTaskDelay, %function
 868              	vTaskDelay:
 869              	.LFB134:
1218:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1219:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1220:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
1221:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1222:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1223:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1224:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1225:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 870              		.loc 1 1225 0
 871              		.cfi_startproc
 872              		@ args = 0, pretend = 0, frame = 16
 873              		@ frame_needed = 1, uses_anonymous_args = 0
 874 0000 80B5     		push	{r7, lr}
 875              		.cfi_def_cfa_offset 8
 876              		.cfi_offset 7, -8
 877              		.cfi_offset 14, -4
 878 0002 84B0     		sub	sp, sp, #16
 879              		.cfi_def_cfa_offset 24
 880 0004 00AF     		add	r7, sp, #0
 881              		.cfi_def_cfa_register 7
 882 0006 7860     		str	r0, [r7, #4]
1226:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 883              		.loc 1 1226 0
 884 0008 0023     		movs	r3, #0
 885 000a FB60     		str	r3, [r7, #12]
1227:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1228:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1229:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 886              		.loc 1 1229 0
 887 000c 7B68     		ldr	r3, [r7, #4]
 888 000e 002B     		cmp	r3, #0
 889 0010 0ED0     		beq	.L58
1230:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1231:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 890              		.loc 1 1231 0
 891 0012 0F4B     		ldr	r3, .L63
 892 0014 1B68     		ldr	r3, [r3]
 893 0016 002B     		cmp	r3, #0
 894 0018 01D0     		beq	.L59
 895              		.loc 1 1231 0 is_stmt 0 discriminator 1
 896              		.syntax unified
 897              	@ 1231 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 898 001a 72B6     		 cpsid i 
 899              	@ 0 "" 2
 900              		.thumb
 901              		.syntax unified
 902              	.L60:
 903 001c FEE7     		b	.L60
 904              	.L59:
1232:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			vTaskSuspendAll();
 905              		.loc 1 1232 0 is_stmt 1
 906 001e FFF7FEFF 		bl	vTaskSuspendAll
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 39


1233:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1234:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				traceTASK_DELAY();
1235:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1236:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* A task that is removed from the event list while the
1237:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1238:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1239:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				is resumed.
1240:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1241:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1242:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				executing task. */
1243:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 907              		.loc 1 1243 0
 908 0022 0021     		movs	r1, #0
 909 0024 7868     		ldr	r0, [r7, #4]
 910 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1244:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1245:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 911              		.loc 1 1245 0
 912 002a FFF7FEFF 		bl	xTaskResumeAll
 913 002e F860     		str	r0, [r7, #12]
 914              	.L58:
1246:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1247:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
1248:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1249:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1250:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1251:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1252:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1253:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		have put ourselves to sleep. */
1254:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 915              		.loc 1 1254 0
 916 0030 FB68     		ldr	r3, [r7, #12]
 917 0032 002B     		cmp	r3, #0
 918 0034 07D1     		bne	.L62
1255:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1256:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			portYIELD_WITHIN_API();
 919              		.loc 1 1256 0
 920 0036 074B     		ldr	r3, .L63+4
 921 0038 4FF08052 		mov	r2, #268435456
 922 003c 1A60     		str	r2, [r3]
 923              		.syntax unified
 924              	@ 1256 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 925 003e BFF34F8F 		dsb
 926              	@ 0 "" 2
 927              	@ 1256 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 928 0042 BFF36F8F 		isb
 929              	@ 0 "" 2
 930              		.thumb
 931              		.syntax unified
 932              	.L62:
1257:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1258:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
1259:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1260:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1261:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1262:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 933              		.loc 1 1262 0
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 40


 934 0046 00BF     		nop
 935 0048 1037     		adds	r7, r7, #16
 936              		.cfi_def_cfa_offset 8
 937 004a BD46     		mov	sp, r7
 938              		.cfi_def_cfa_register 13
 939              		@ sp needed
 940 004c 80BD     		pop	{r7, pc}
 941              	.L64:
 942 004e 00BF     		.align	2
 943              	.L63:
 944 0050 28010000 		.word	uxSchedulerSuspended
 945 0054 04ED00E0 		.word	-536810236
 946              		.cfi_endproc
 947              	.LFE134:
 948              		.size	vTaskDelay, .-vTaskDelay
 949              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 950              		.align	2
 951              		.global	uxTaskPriorityGet
 952              		.thumb
 953              		.thumb_func
 954              		.type	uxTaskPriorityGet, %function
 955              	uxTaskPriorityGet:
 956              	.LFB135:
1263:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1264:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1265:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
1266:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1267:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1268:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1269:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1270:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
1271:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	eTaskState eReturn;
1272:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	List_t *pxStateList;
1273:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1274:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1275:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		configASSERT( pxTCB );
1276:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1277:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1278:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1279:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1280:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			eReturn = eRunning;
1281:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1282:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
1283:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1284:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			taskENTER_CRITICAL();
1285:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1286:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1287:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1288:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			taskEXIT_CRITICAL();
1289:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1290:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1291:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1292:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1293:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				lists. */
1294:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				eReturn = eBlocked;
1295:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1296:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 41


1297:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1298:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1299:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
1300:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1301:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1302:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					indefinitely? */
1303:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1304:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
1305:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						eReturn = eSuspended;
1306:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
1307:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					else
1308:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
1309:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						eReturn = eBlocked;
1310:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
1311:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
1312:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			#endif
1313:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1314:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1315:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1316:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
1317:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1318:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1319:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					all. */
1320:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					eReturn = eDeleted;
1321:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
1322:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			#endif
1323:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1324:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1325:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1326:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1327:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				Ready (including pending ready) state. */
1328:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				eReturn = eReady;
1329:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1330:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1331:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1332:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return eReturn;
1333:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1334:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1335:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1336:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
1337:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1338:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1339:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1340:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1341:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 957              		.loc 1 1341 0
 958              		.cfi_startproc
 959              		@ args = 0, pretend = 0, frame = 16
 960              		@ frame_needed = 1, uses_anonymous_args = 0
 961 0000 80B5     		push	{r7, lr}
 962              		.cfi_def_cfa_offset 8
 963              		.cfi_offset 7, -8
 964              		.cfi_offset 14, -4
 965 0002 84B0     		sub	sp, sp, #16
 966              		.cfi_def_cfa_offset 24
 967 0004 00AF     		add	r7, sp, #0
 968              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 42


 969 0006 7860     		str	r0, [r7, #4]
1342:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t *pxTCB;
1343:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	UBaseType_t uxReturn;
1344:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1345:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		taskENTER_CRITICAL();
 970              		.loc 1 1345 0
 971 0008 FFF7FEFF 		bl	vPortEnterCritical
1346:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1347:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1348:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1349:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 972              		.loc 1 1349 0
 973 000c 7B68     		ldr	r3, [r7, #4]
 974 000e 002B     		cmp	r3, #0
 975 0010 02D1     		bne	.L66
 976              		.loc 1 1349 0 is_stmt 0 discriminator 1
 977 0012 074B     		ldr	r3, .L69
 978 0014 1B68     		ldr	r3, [r3]
 979 0016 00E0     		b	.L67
 980              	.L66:
 981              		.loc 1 1349 0 discriminator 2
 982 0018 7B68     		ldr	r3, [r7, #4]
 983              	.L67:
 984              		.loc 1 1349 0 discriminator 4
 985 001a FB60     		str	r3, [r7, #12]
1350:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 986              		.loc 1 1350 0 is_stmt 1 discriminator 4
 987 001c FB68     		ldr	r3, [r7, #12]
 988 001e DB6A     		ldr	r3, [r3, #44]
 989 0020 BB60     		str	r3, [r7, #8]
1351:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1352:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		taskEXIT_CRITICAL();
 990              		.loc 1 1352 0 discriminator 4
 991 0022 FFF7FEFF 		bl	vPortExitCritical
1353:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1354:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return uxReturn;
 992              		.loc 1 1354 0 discriminator 4
 993 0026 BB68     		ldr	r3, [r7, #8]
1355:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 994              		.loc 1 1355 0 discriminator 4
 995 0028 1846     		mov	r0, r3
 996 002a 1037     		adds	r7, r7, #16
 997              		.cfi_def_cfa_offset 8
 998 002c BD46     		mov	sp, r7
 999              		.cfi_def_cfa_register 13
 1000              		@ sp needed
 1001 002e 80BD     		pop	{r7, pc}
 1002              	.L70:
 1003              		.align	2
 1004              	.L69:
 1005 0030 00000000 		.word	pxCurrentTCB
 1006              		.cfi_endproc
 1007              	.LFE135:
 1008              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 1009              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1010              		.align	2
 1011              		.global	uxTaskPriorityGetFromISR
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 43


 1012              		.thumb
 1013              		.thumb_func
 1014              		.type	uxTaskPriorityGetFromISR, %function
 1015              	uxTaskPriorityGetFromISR:
 1016              	.LFB136:
1356:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1357:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1358:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
1359:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1360:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1361:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1362:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1363:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 1017              		.loc 1 1363 0
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 32
 1020              		@ frame_needed = 1, uses_anonymous_args = 0
 1021 0000 80B5     		push	{r7, lr}
 1022              		.cfi_def_cfa_offset 8
 1023              		.cfi_offset 7, -8
 1024              		.cfi_offset 14, -4
 1025 0002 88B0     		sub	sp, sp, #32
 1026              		.cfi_def_cfa_offset 40
 1027 0004 00AF     		add	r7, sp, #0
 1028              		.cfi_def_cfa_register 7
 1029 0006 7860     		str	r0, [r7, #4]
1364:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t *pxTCB;
1365:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1366:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1367:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1368:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1369:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1370:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1371:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1372:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1373:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1374:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1375:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1376:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1377:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1378:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1379:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1380:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1381:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		provided on the following link:
1382:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1383:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1030              		.loc 1 1383 0
 1031 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1032              	.LBB20:
 1033              	.LBB21:
 1034              		.file 2 "Generated_Source\\PSoC6\\pdl\\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h"
   1:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** /*
   2:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     All rights reserved
   4:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
   5:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 44


   7:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
   9:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
  13:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     ***************************************************************************
  14:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     ***************************************************************************
  19:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
  20:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
  25:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     ***************************************************************************
  26:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****      *                                                                       *
  27:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****      *                                                                       *
  32:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****      *                                                                       *
  37:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     ***************************************************************************
  38:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
  39:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     defined configASSERT()?
  42:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
  43:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     participating in the support forum.
  46:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
  47:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
  52:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
  56:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
  59:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
  63:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 45


  64:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
  67:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** */
  69:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
  70:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
  71:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #define PORTMACRO_H
  73:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
  74:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #ifdef __cplusplus
  75:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** extern "C" {
  76:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #endif
  77:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
  78:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****  * Port specific definitions.
  80:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****  *
  81:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****  * given hardware and compiler.
  83:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****  *
  84:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****  * These settings should not be altered.
  85:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****  */
  87:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
  88:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** /* Type definitions. */
  89:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #define portCHAR        char
  90:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #define portFLOAT       float
  91:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #define portDOUBLE      double
  92:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #define portLONG        long
  93:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #define portSHORT       short
  94:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #define portSTACK_TYPE  uint32_t
  95:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #define portBASE_TYPE   long
  96:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
  97:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** typedef long BaseType_t;
  99:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
 101:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     typedef uint16_t TickType_t;
 103:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     #define portMAX_DELAY ( TickType_t ) 0xffff
 104:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #else
 105:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     typedef uint32_t TickType_t;
 106:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     #define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
 108:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     not need to be guarded with a critical section. */
 110:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     #define portTICK_TYPE_IS_ATOMIC 1
 111:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #endif
 112:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
 114:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** /* Architecture specifics. */
 115:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #define portSTACK_GROWTH              ( -1 )
 116:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #define portTICK_PERIOD_MS            ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #define portBYTE_ALIGNMENT            8
 118:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
 120:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 46


 121:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** /* Scheduler utilities. */
 122:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #define portYIELD()                                                            \
 123:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** {                                                                              \
 124:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     /* Set a PendSV to request a context switch. */                            \
 125:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;                            \
 126:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****                                                                                \
 127:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     /* Barriers are normally not required but do ensure the code is completely \
 128:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     within the specified behaviour for the architecture. */                    \
 129:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     __asm volatile( "dsb" );                                                   \
 130:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     __asm volatile( "isb" );                                                   \
 131:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** }                                                                              \
 132:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
 133:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG         ( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 134:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT        ( 1UL << 28UL )
 135:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 136:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x )       portEND_SWITCHING_ISR( x )
 137:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 138:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
 139:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
 140:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** /* Critical section management. */
 141:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 142:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** extern void vPortExitCritical( void );
 143:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()       ulPortRaiseBASEPRI()
 144:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)    vPortSetBASEPRI(x)
 145:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()                __asm volatile   ( " cpsid i " )
 146:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()                 __asm volatile   ( " cpsie i " )
 147:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #define portENTER_CRITICAL()                    vPortEnterCritical()
 148:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #define portEXIT_CRITICAL()                     vPortExitCritical()
 149:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
 150:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 151:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
 152:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site. */
 153:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 157:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
 158:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #ifdef configASSERT
 159:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     void vPortValidateInterruptPriority( void );
 160:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()     vPortValidateInterruptPriority()
 161:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #endif
 162:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
 163:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 164:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #define portNOP()
 165:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
 166:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #define portINLINE    __inline
 167:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
 168:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 169:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     #define portFORCE_INLINE inline __attribute__(( always_inline))
 170:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** #endif
 171:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
 172:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 173:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
 174:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 175:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** {
 176:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 177:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** BaseType_t xReturn;
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 47


 178:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
 179:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     /* Obtain the number of the currently executing interrupt. */
 180:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     __asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 181:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
 182:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     if( ulCurrentInterrupt == 0 )
 183:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     {
 184:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****         xReturn = pdFALSE;
 185:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     }
 186:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     else
 187:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     {
 188:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****         xReturn = pdTRUE;
 189:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     }
 190:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
 191:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     return xReturn;
 192:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** }
 193:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 194:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
 195:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 196:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** {
 197:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 198:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
 199:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     __asm volatile
 200:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     (
 201:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****         "    mov %0, %1                                                 \n" \
 202:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****         "    msr basepri, %0                                            \n" \
 203:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****         "    isb                                                        \n" \
 204:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****         "    dsb                                                        \n" \
 205:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****         :"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 206:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     );
 207:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** }
 208:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
 209:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 210:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
 211:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 212:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** {
 213:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 214:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
 215:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     __asm volatile
 1035              		.loc 2 215 0
 1036              		.syntax unified
 1037              	@ 215 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h" 1
 1038 000c EFF31182 		    mrs r2, basepri                                            
 1039 0010 4FF0BF03 	    mov r3, #191                                                 
 1040 0014 83F31188 	    msr basepri, r3                                            
 1041 0018 BFF36F8F 	    isb                                                        
 1042 001c BFF34F8F 	    dsb                                                        
 1043              	
 1044              	@ 0 "" 2
 1045              		.thumb
 1046              		.syntax unified
 1047 0020 FA60     		str	r2, [r7, #12]
 1048 0022 BB60     		str	r3, [r7, #8]
 216:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     (
 217:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****         "    mrs %0, basepri                                            \n" \
 218:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****         "    mov %1, %2                                                 \n" \
 219:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****         "    msr basepri, %1                                            \n" \
 220:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****         "    isb                                                        \n" \
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 48


 221:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****         "    dsb                                                        \n" \
 222:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****         :"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY
 223:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     );
 224:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
 225:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     /* This return will not be reached but is necessary to prevent compiler
 226:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     warnings. */
 227:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     return ulOriginalBASEPRI;
 1049              		.loc 2 227 0
 1050 0024 FB68     		ldr	r3, [r7, #12]
 1051              	.LBE21:
 1052              	.LBE20:
1384:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1385:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1053              		.loc 1 1385 0
 1054 0026 BB61     		str	r3, [r7, #24]
1386:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1387:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1388:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			task that is being queried. */
1389:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1055              		.loc 1 1389 0
 1056 0028 7B68     		ldr	r3, [r7, #4]
 1057 002a 002B     		cmp	r3, #0
 1058 002c 02D1     		bne	.L73
 1059              		.loc 1 1389 0 is_stmt 0 discriminator 1
 1060 002e 094B     		ldr	r3, .L76
 1061 0030 1B68     		ldr	r3, [r3]
 1062 0032 00E0     		b	.L74
 1063              	.L73:
 1064              		.loc 1 1389 0 discriminator 2
 1065 0034 7B68     		ldr	r3, [r7, #4]
 1066              	.L74:
 1067              		.loc 1 1389 0 discriminator 4
 1068 0036 7B61     		str	r3, [r7, #20]
1390:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1069              		.loc 1 1390 0 is_stmt 1 discriminator 4
 1070 0038 7B69     		ldr	r3, [r7, #20]
 1071 003a DB6A     		ldr	r3, [r3, #44]
 1072 003c 3B61     		str	r3, [r7, #16]
 1073 003e BB69     		ldr	r3, [r7, #24]
 1074 0040 FB61     		str	r3, [r7, #28]
 1075              	.LBB22:
 1076              	.LBB23:
 228:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** }
 229:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 230:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** 
 231:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 232:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** {
 233:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     __asm volatile
 1077              		.loc 2 233 0 discriminator 4
 1078 0042 FB69     		ldr	r3, [r7, #28]
 1079              		.syntax unified
 1080              	@ 233 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h" 1
 1081 0044 83F31188 		    msr basepri, r3  
 1082              	@ 0 "" 2
 1083              		.thumb
 1084              		.syntax unified
 1085              	.LBE23:
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 49


 1086              	.LBE22:
1391:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1392:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1393:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1394:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return uxReturn;
 1087              		.loc 1 1394 0 discriminator 4
 1088 0048 3B69     		ldr	r3, [r7, #16]
1395:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 1089              		.loc 1 1395 0 discriminator 4
 1090 004a 1846     		mov	r0, r3
 1091 004c 2037     		adds	r7, r7, #32
 1092              		.cfi_def_cfa_offset 8
 1093 004e BD46     		mov	sp, r7
 1094              		.cfi_def_cfa_register 13
 1095              		@ sp needed
 1096 0050 80BD     		pop	{r7, pc}
 1097              	.L77:
 1098 0052 00BF     		.align	2
 1099              	.L76:
 1100 0054 00000000 		.word	pxCurrentTCB
 1101              		.cfi_endproc
 1102              	.LFE136:
 1103              		.size	uxTaskPriorityGetFromISR, .-uxTaskPriorityGetFromISR
 1104              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1105              		.align	2
 1106              		.global	vTaskPrioritySet
 1107              		.thumb
 1108              		.thumb_func
 1109              		.type	vTaskPrioritySet, %function
 1110              	vTaskPrioritySet:
 1111              	.LFB137:
1396:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1397:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1398:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
1399:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1400:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1401:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1402:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1403:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 1112              		.loc 1 1403 0
 1113              		.cfi_startproc
 1114              		@ args = 0, pretend = 0, frame = 24
 1115              		@ frame_needed = 1, uses_anonymous_args = 0
 1116 0000 80B5     		push	{r7, lr}
 1117              		.cfi_def_cfa_offset 8
 1118              		.cfi_offset 7, -8
 1119              		.cfi_offset 14, -4
 1120 0002 86B0     		sub	sp, sp, #24
 1121              		.cfi_def_cfa_offset 32
 1122 0004 00AF     		add	r7, sp, #0
 1123              		.cfi_def_cfa_register 7
 1124 0006 7860     		str	r0, [r7, #4]
 1125 0008 3960     		str	r1, [r7]
1404:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t *pxTCB;
1405:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1406:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1126              		.loc 1 1406 0
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 50


 1127 000a 0023     		movs	r3, #0
 1128 000c 7B61     		str	r3, [r7, #20]
1407:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1408:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1129              		.loc 1 1408 0
 1130 000e 3B68     		ldr	r3, [r7]
 1131 0010 062B     		cmp	r3, #6
 1132 0012 01D9     		bls	.L79
 1133              		.loc 1 1408 0 is_stmt 0 discriminator 1
 1134              		.syntax unified
 1135              	@ 1408 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 1136 0014 72B6     		 cpsid i 
 1137              	@ 0 "" 2
 1138              		.thumb
 1139              		.syntax unified
 1140              	.L80:
 1141 0016 FEE7     		b	.L80
 1142              	.L79:
1409:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1410:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Ensure the new priority is valid. */
1411:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1143              		.loc 1 1411 0 is_stmt 1
 1144 0018 3B68     		ldr	r3, [r7]
 1145 001a 062B     		cmp	r3, #6
 1146 001c 01D9     		bls	.L81
1412:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1413:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1147              		.loc 1 1413 0
 1148 001e 0623     		movs	r3, #6
 1149 0020 3B60     		str	r3, [r7]
 1150              	.L81:
1414:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1415:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
1416:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1417:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1418:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1419:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1420:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		taskENTER_CRITICAL();
 1151              		.loc 1 1420 0
 1152 0022 FFF7FEFF 		bl	vPortEnterCritical
1421:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1422:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1423:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			task that is being changed. */
1424:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1153              		.loc 1 1424 0
 1154 0026 7B68     		ldr	r3, [r7, #4]
 1155 0028 002B     		cmp	r3, #0
 1156 002a 02D1     		bne	.L82
 1157              		.loc 1 1424 0 is_stmt 0 discriminator 1
 1158 002c 384B     		ldr	r3, .L92
 1159 002e 1B68     		ldr	r3, [r3]
 1160 0030 00E0     		b	.L83
 1161              	.L82:
 1162              		.loc 1 1424 0 discriminator 2
 1163 0032 7B68     		ldr	r3, [r7, #4]
 1164              	.L83:
 1165              		.loc 1 1424 0 discriminator 4
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 51


 1166 0034 3B61     		str	r3, [r7, #16]
1425:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1426:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1427:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1428:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1429:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1430:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1431:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1432:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			#else
1433:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1434:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
 1167              		.loc 1 1434 0 is_stmt 1 discriminator 4
 1168 0036 3B69     		ldr	r3, [r7, #16]
 1169 0038 DB6A     		ldr	r3, [r3, #44]
 1170 003a FB60     		str	r3, [r7, #12]
1435:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1436:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			#endif
1437:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1438:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1171              		.loc 1 1438 0 discriminator 4
 1172 003c FA68     		ldr	r2, [r7, #12]
 1173 003e 3B68     		ldr	r3, [r7]
 1174 0040 9A42     		cmp	r2, r3
 1175 0042 5FD0     		beq	.L84
1439:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1440:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* The priority change may have readied a task of higher
1441:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				priority than the calling task. */
1442:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1176              		.loc 1 1442 0
 1177 0044 3A68     		ldr	r2, [r7]
 1178 0046 FB68     		ldr	r3, [r7, #12]
 1179 0048 9A42     		cmp	r2, r3
 1180 004a 0DD9     		bls	.L85
1443:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
1444:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1181              		.loc 1 1444 0
 1182 004c 304B     		ldr	r3, .L92
 1183 004e 1B68     		ldr	r3, [r3]
 1184 0050 3A69     		ldr	r2, [r7, #16]
 1185 0052 9A42     		cmp	r2, r3
 1186 0054 0FD0     		beq	.L86
1445:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
1446:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						/* The priority of a task other than the currently
1447:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						running task is being raised.  Is the priority being
1448:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						raised above that of the running task? */
1449:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1187              		.loc 1 1449 0
 1188 0056 2E4B     		ldr	r3, .L92
 1189 0058 1B68     		ldr	r3, [r3]
 1190 005a DA6A     		ldr	r2, [r3, #44]
 1191 005c 3B68     		ldr	r3, [r7]
 1192 005e 9A42     		cmp	r2, r3
 1193 0060 09D8     		bhi	.L86
1450:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						{
1451:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1194              		.loc 1 1451 0
 1195 0062 0123     		movs	r3, #1
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 52


 1196 0064 7B61     		str	r3, [r7, #20]
 1197 0066 06E0     		b	.L86
 1198              	.L85:
1452:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						}
1453:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						else
1454:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						{
1455:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1456:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						}
1457:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
1458:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					else
1459:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
1460:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						/* The priority of the running task is being raised,
1461:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						but the running task must already be the highest
1462:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						priority task able to run so no yield is required. */
1463:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
1464:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
1465:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1199              		.loc 1 1465 0
 1200 0068 294B     		ldr	r3, .L92
 1201 006a 1B68     		ldr	r3, [r3]
 1202 006c 3A69     		ldr	r2, [r7, #16]
 1203 006e 9A42     		cmp	r2, r3
 1204 0070 01D1     		bne	.L86
1466:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
1467:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* Setting the priority of the running task down means
1468:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					there may now be another task of higher priority that
1469:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					is ready to execute. */
1470:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1205              		.loc 1 1470 0
 1206 0072 0123     		movs	r3, #1
 1207 0074 7B61     		str	r3, [r7, #20]
 1208              	.L86:
1471:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
1472:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else
1473:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
1474:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* Setting the priority of any other task down does not
1475:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					require a yield as the running task must be above the
1476:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					new priority of the task being modified. */
1477:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
1478:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1479:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1480:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				before its uxPriority member is changed so the
1481:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1482:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1209              		.loc 1 1482 0
 1210 0076 3B69     		ldr	r3, [r7, #16]
 1211 0078 DB6A     		ldr	r3, [r3, #44]
 1212 007a BB60     		str	r3, [r7, #8]
1483:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1484:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1485:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
1486:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* Only change the priority being used if the task is not
1487:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					currently using an inherited priority. */
1488:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1489:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
1490:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1491:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 53


1492:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					else
1493:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
1494:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1495:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
1496:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1497:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* The base priority gets set whatever. */
1498:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1499:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
1500:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				#else
1501:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
1502:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
 1213              		.loc 1 1502 0
 1214 007c 3B69     		ldr	r3, [r7, #16]
 1215 007e 3A68     		ldr	r2, [r7]
 1216 0080 DA62     		str	r2, [r3, #44]
1503:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
1504:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				#endif
1505:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1506:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1507:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				being used for anything else. */
1508:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1217              		.loc 1 1508 0
 1218 0082 3B69     		ldr	r3, [r7, #16]
 1219 0084 9B69     		ldr	r3, [r3, #24]
 1220 0086 002B     		cmp	r3, #0
 1221 0088 04DB     		blt	.L87
1509:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
1510:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1222              		.loc 1 1510 0
 1223 008a 3B68     		ldr	r3, [r7]
 1224 008c C3F10702 		rsb	r2, r3, #7
 1225 0090 3B69     		ldr	r3, [r7, #16]
 1226 0092 9A61     		str	r2, [r3, #24]
 1227              	.L87:
1511:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
1512:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else
1513:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
1514:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1515:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
1516:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1517:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1518:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				nothing more than change it's priority variable. However, if
1519:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1520:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				in the list appropriate to its new priority. */
1521:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1228              		.loc 1 1521 0
 1229 0094 3B69     		ldr	r3, [r7, #16]
 1230 0096 5969     		ldr	r1, [r3, #20]
 1231 0098 BA68     		ldr	r2, [r7, #8]
 1232 009a 1346     		mov	r3, r2
 1233 009c 9B00     		lsls	r3, r3, #2
 1234 009e 1344     		add	r3, r3, r2
 1235 00a0 9B00     		lsls	r3, r3, #2
 1236 00a2 1C4A     		ldr	r2, .L92+4
 1237 00a4 1344     		add	r3, r3, r2
 1238 00a6 9942     		cmp	r1, r3
 1239 00a8 01D1     		bne	.L88
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 54


 1240              		.loc 1 1521 0 is_stmt 0 discriminator 1
 1241 00aa 0123     		movs	r3, #1
 1242 00ac 00E0     		b	.L89
 1243              	.L88:
 1244              		.loc 1 1521 0 discriminator 2
 1245 00ae 0023     		movs	r3, #0
 1246              	.L89:
 1247              		.loc 1 1521 0 discriminator 4
 1248 00b0 002B     		cmp	r3, #0
 1249 00b2 1CD0     		beq	.L90
1522:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
1523:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1524:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1525:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					can do this even if the scheduler is suspended. */
1526:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1250              		.loc 1 1526 0 is_stmt 1
 1251 00b4 3B69     		ldr	r3, [r7, #16]
 1252 00b6 0433     		adds	r3, r3, #4
 1253 00b8 1846     		mov	r0, r3
 1254 00ba FFF7FEFF 		bl	uxListRemove
1527:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
1528:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						/* It is known that the task is in its ready list so
1529:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						there is no need to check again and the port level
1530:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						reset macro can be called directly. */
1531:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1532:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
1533:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					else
1534:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
1535:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1536:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
1537:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1255              		.loc 1 1537 0
 1256 00be 3B69     		ldr	r3, [r7, #16]
 1257 00c0 DA6A     		ldr	r2, [r3, #44]
 1258 00c2 154B     		ldr	r3, .L92+8
 1259 00c4 1B68     		ldr	r3, [r3]
 1260 00c6 9A42     		cmp	r2, r3
 1261 00c8 03D9     		bls	.L91
 1262              		.loc 1 1537 0 is_stmt 0 discriminator 1
 1263 00ca 3B69     		ldr	r3, [r7, #16]
 1264 00cc DB6A     		ldr	r3, [r3, #44]
 1265 00ce 124A     		ldr	r2, .L92+8
 1266 00d0 1360     		str	r3, [r2]
 1267              	.L91:
 1268              		.loc 1 1537 0 discriminator 3
 1269 00d2 3B69     		ldr	r3, [r7, #16]
 1270 00d4 DA6A     		ldr	r2, [r3, #44]
 1271 00d6 1346     		mov	r3, r2
 1272 00d8 9B00     		lsls	r3, r3, #2
 1273 00da 1344     		add	r3, r3, r2
 1274 00dc 9B00     		lsls	r3, r3, #2
 1275 00de 0D4A     		ldr	r2, .L92+4
 1276 00e0 1A44     		add	r2, r2, r3
 1277 00e2 3B69     		ldr	r3, [r7, #16]
 1278 00e4 0433     		adds	r3, r3, #4
 1279 00e6 1946     		mov	r1, r3
 1280 00e8 1046     		mov	r0, r2
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 55


 1281 00ea FFF7FEFF 		bl	vListInsertEnd
 1282              	.L90:
1538:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
1539:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else
1540:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
1541:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1542:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
1543:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1544:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1283              		.loc 1 1544 0 is_stmt 1
 1284 00ee 7B69     		ldr	r3, [r7, #20]
 1285 00f0 002B     		cmp	r3, #0
 1286 00f2 07D0     		beq	.L84
1545:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
1546:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1287              		.loc 1 1546 0
 1288 00f4 094B     		ldr	r3, .L92+12
 1289 00f6 4FF08052 		mov	r2, #268435456
 1290 00fa 1A60     		str	r2, [r3]
 1291              		.syntax unified
 1292              	@ 1546 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 1293 00fc BFF34F8F 		dsb
 1294              	@ 0 "" 2
 1295              	@ 1546 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 1296 0100 BFF36F8F 		isb
 1297              	@ 0 "" 2
 1298              		.thumb
 1299              		.syntax unified
 1300              	.L84:
1547:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
1548:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else
1549:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
1550:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1551:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
1552:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1553:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1554:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				optimised task selection is not being used. */
1555:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1556:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1557:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1558:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		taskEXIT_CRITICAL();
 1301              		.loc 1 1558 0
 1302 0104 FFF7FEFF 		bl	vPortExitCritical
1559:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 1303              		.loc 1 1559 0
 1304 0108 00BF     		nop
 1305 010a 1837     		adds	r7, r7, #24
 1306              		.cfi_def_cfa_offset 8
 1307 010c BD46     		mov	sp, r7
 1308              		.cfi_def_cfa_register 13
 1309              		@ sp needed
 1310 010e 80BD     		pop	{r7, pc}
 1311              	.L93:
 1312              		.align	2
 1313              	.L92:
 1314 0110 00000000 		.word	pxCurrentTCB
 1315 0114 04000000 		.word	pxReadyTasksLists
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 56


 1316 0118 08010000 		.word	uxTopReadyPriority
 1317 011c 04ED00E0 		.word	-536810236
 1318              		.cfi_endproc
 1319              	.LFE137:
 1320              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1321              		.section	.text.vTaskSuspend,"ax",%progbits
 1322              		.align	2
 1323              		.global	vTaskSuspend
 1324              		.thumb
 1325              		.thumb_func
 1326              		.type	vTaskSuspend, %function
 1327              	vTaskSuspend:
 1328              	.LFB138:
1560:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1561:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1562:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
1563:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1564:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1565:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1566:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1567:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 1329              		.loc 1 1567 0
 1330              		.cfi_startproc
 1331              		@ args = 0, pretend = 0, frame = 16
 1332              		@ frame_needed = 1, uses_anonymous_args = 0
 1333 0000 80B5     		push	{r7, lr}
 1334              		.cfi_def_cfa_offset 8
 1335              		.cfi_offset 7, -8
 1336              		.cfi_offset 14, -4
 1337 0002 84B0     		sub	sp, sp, #16
 1338              		.cfi_def_cfa_offset 24
 1339 0004 00AF     		add	r7, sp, #0
 1340              		.cfi_def_cfa_register 7
 1341 0006 7860     		str	r0, [r7, #4]
1568:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t *pxTCB;
1569:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1570:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		taskENTER_CRITICAL();
 1342              		.loc 1 1570 0
 1343 0008 FFF7FEFF 		bl	vPortEnterCritical
1571:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1572:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1573:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			being suspended. */
1574:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1344              		.loc 1 1574 0
 1345 000c 7B68     		ldr	r3, [r7, #4]
 1346 000e 002B     		cmp	r3, #0
 1347 0010 02D1     		bne	.L95
 1348              		.loc 1 1574 0 is_stmt 0 discriminator 1
 1349 0012 264B     		ldr	r3, .L106
 1350 0014 1B68     		ldr	r3, [r3]
 1351 0016 00E0     		b	.L96
 1352              	.L95:
 1353              		.loc 1 1574 0 discriminator 2
 1354 0018 7B68     		ldr	r3, [r7, #4]
 1355              	.L96:
 1356              		.loc 1 1574 0 discriminator 4
 1357 001a FB60     		str	r3, [r7, #12]
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 57


1575:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1576:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1577:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1578:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1579:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			suspended list. */
1580:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1358              		.loc 1 1580 0 is_stmt 1 discriminator 4
 1359 001c FB68     		ldr	r3, [r7, #12]
 1360 001e 0433     		adds	r3, r3, #4
 1361 0020 1846     		mov	r0, r3
 1362 0022 FFF7FEFF 		bl	uxListRemove
1581:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1582:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1583:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1584:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
1585:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1586:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1587:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1588:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1589:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Is the task waiting on an event also? */
1590:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1363              		.loc 1 1590 0 discriminator 4
 1364 0026 FB68     		ldr	r3, [r7, #12]
 1365 0028 9B6A     		ldr	r3, [r3, #40]
 1366 002a 002B     		cmp	r3, #0
 1367 002c 04D0     		beq	.L97
1591:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1592:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1368              		.loc 1 1592 0
 1369 002e FB68     		ldr	r3, [r7, #12]
 1370 0030 1833     		adds	r3, r3, #24
 1371 0032 1846     		mov	r0, r3
 1372 0034 FFF7FEFF 		bl	uxListRemove
 1373              	.L97:
1593:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1594:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
1595:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1596:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1597:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1598:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1599:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1374              		.loc 1 1599 0
 1375 0038 FB68     		ldr	r3, [r7, #12]
 1376 003a 0433     		adds	r3, r3, #4
 1377 003c 1946     		mov	r1, r3
 1378 003e 1C48     		ldr	r0, .L106+4
 1379 0040 FFF7FEFF 		bl	vListInsertEnd
1600:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1601:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		taskEXIT_CRITICAL();
 1380              		.loc 1 1601 0
 1381 0044 FFF7FEFF 		bl	vPortExitCritical
1602:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1603:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1382              		.loc 1 1603 0
 1383 0048 1A4B     		ldr	r3, .L106+8
 1384 004a 1B68     		ldr	r3, [r3]
 1385 004c 002B     		cmp	r3, #0
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 58


 1386 004e 05D0     		beq	.L98
1604:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1605:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1606:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			task that is now in the Suspended state. */
1607:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			taskENTER_CRITICAL();
 1387              		.loc 1 1607 0
 1388 0050 FFF7FEFF 		bl	vPortEnterCritical
1608:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1609:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 1389              		.loc 1 1609 0
 1390 0054 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1610:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1611:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			taskEXIT_CRITICAL();
 1391              		.loc 1 1611 0
 1392 0058 FFF7FEFF 		bl	vPortExitCritical
 1393              	.L98:
1612:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1613:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
1614:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1615:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1616:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1617:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1618:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1394              		.loc 1 1618 0
 1395 005c 134B     		ldr	r3, .L106
 1396 005e 1B68     		ldr	r3, [r3]
 1397 0060 FA68     		ldr	r2, [r7, #12]
 1398 0062 9A42     		cmp	r2, r3
 1399 0064 1ED1     		bne	.L105
1619:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1620:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1400              		.loc 1 1620 0
 1401 0066 134B     		ldr	r3, .L106+8
 1402 0068 1B68     		ldr	r3, [r3]
 1403 006a 002B     		cmp	r3, #0
 1404 006c 0ED0     		beq	.L100
1621:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1622:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* The current task has just been suspended. */
1623:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 1405              		.loc 1 1623 0
 1406 006e 124B     		ldr	r3, .L106+12
 1407 0070 1B68     		ldr	r3, [r3]
 1408 0072 002B     		cmp	r3, #0
 1409 0074 01D0     		beq	.L101
 1410              		.loc 1 1623 0 is_stmt 0 discriminator 1
 1411              		.syntax unified
 1412              	@ 1623 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 1413 0076 72B6     		 cpsid i 
 1414              	@ 0 "" 2
 1415              		.thumb
 1416              		.syntax unified
 1417              	.L102:
 1418 0078 FEE7     		b	.L102
 1419              	.L101:
1624:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				portYIELD_WITHIN_API();
 1420              		.loc 1 1624 0 is_stmt 1
 1421 007a 104B     		ldr	r3, .L106+16
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 59


 1422 007c 4FF08052 		mov	r2, #268435456
 1423 0080 1A60     		str	r2, [r3]
 1424              		.syntax unified
 1425              	@ 1624 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 1426 0082 BFF34F8F 		dsb
 1427              	@ 0 "" 2
 1428              	@ 1624 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 1429 0086 BFF36F8F 		isb
 1430              	@ 0 "" 2
1625:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1626:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
1627:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1628:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1629:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1630:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				must be adjusted to point to a different task. */
1631:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1632:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
1633:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1634:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1635:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					be set to point to it no matter what its relative priority
1636:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					is. */
1637:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					pxCurrentTCB = NULL;
1638:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
1639:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else
1640:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
1641:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					vTaskSwitchContext();
1642:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
1643:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1644:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1645:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
1646:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1647:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1648:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1649:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 1431              		.loc 1 1649 0
 1432              		.thumb
 1433              		.syntax unified
 1434 008a 0BE0     		b	.L105
 1435              	.L100:
1631:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
 1436              		.loc 1 1631 0
 1437 008c 084B     		ldr	r3, .L106+4
 1438 008e 1A68     		ldr	r2, [r3]
 1439 0090 0B4B     		ldr	r3, .L106+20
 1440 0092 1B68     		ldr	r3, [r3]
 1441 0094 9A42     		cmp	r2, r3
 1442 0096 03D1     		bne	.L104
1637:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
 1443              		.loc 1 1637 0
 1444 0098 044B     		ldr	r3, .L106
 1445 009a 0022     		movs	r2, #0
 1446 009c 1A60     		str	r2, [r3]
 1447              		.loc 1 1649 0
 1448 009e 01E0     		b	.L105
 1449              	.L104:
1641:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
 1450              		.loc 1 1641 0
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 60


 1451 00a0 FFF7FEFF 		bl	vTaskSwitchContext
 1452              	.L105:
 1453              		.loc 1 1649 0
 1454 00a4 00BF     		nop
 1455 00a6 1037     		adds	r7, r7, #16
 1456              		.cfi_def_cfa_offset 8
 1457 00a8 BD46     		mov	sp, r7
 1458              		.cfi_def_cfa_register 13
 1459              		@ sp needed
 1460 00aa 80BD     		pop	{r7, pc}
 1461              	.L107:
 1462              		.align	2
 1463              	.L106:
 1464 00ac 00000000 		.word	pxCurrentTCB
 1465 00b0 EC000000 		.word	xSuspendedTaskList
 1466 00b4 0C010000 		.word	xSchedulerRunning
 1467 00b8 28010000 		.word	uxSchedulerSuspended
 1468 00bc 04ED00E0 		.word	-536810236
 1469 00c0 00010000 		.word	uxCurrentNumberOfTasks
 1470              		.cfi_endproc
 1471              	.LFE138:
 1472              		.size	vTaskSuspend, .-vTaskSuspend
 1473              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 1474              		.align	2
 1475              		.thumb
 1476              		.thumb_func
 1477              		.type	prvTaskIsTaskSuspended, %function
 1478              	prvTaskIsTaskSuspended:
 1479              	.LFB139:
1650:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1651:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1652:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
1653:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1654:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1655:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1656:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1657:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 1480              		.loc 1 1657 0
 1481              		.cfi_startproc
 1482              		@ args = 0, pretend = 0, frame = 16
 1483              		@ frame_needed = 1, uses_anonymous_args = 0
 1484              		@ link register save eliminated.
 1485 0000 80B4     		push	{r7}
 1486              		.cfi_def_cfa_offset 4
 1487              		.cfi_offset 7, -4
 1488 0002 85B0     		sub	sp, sp, #20
 1489              		.cfi_def_cfa_offset 24
 1490 0004 00AF     		add	r7, sp, #0
 1491              		.cfi_def_cfa_register 7
 1492 0006 7860     		str	r0, [r7, #4]
1658:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 1493              		.loc 1 1658 0
 1494 0008 0023     		movs	r3, #0
 1495 000a FB60     		str	r3, [r7, #12]
1659:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 1496              		.loc 1 1659 0
 1497 000c 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 61


 1498 000e BB60     		str	r3, [r7, #8]
1660:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1661:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1662:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		section. */
1663:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1664:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1665:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		configASSERT( xTask );
 1499              		.loc 1 1665 0
 1500 0010 7B68     		ldr	r3, [r7, #4]
 1501 0012 002B     		cmp	r3, #0
 1502 0014 01D1     		bne	.L109
 1503              		.loc 1 1665 0 is_stmt 0 discriminator 1
 1504              		.syntax unified
 1505              	@ 1665 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 1506 0016 72B6     		 cpsid i 
 1507              	@ 0 "" 2
 1508              		.thumb
 1509              		.syntax unified
 1510              	.L110:
 1511 0018 FEE7     		b	.L110
 1512              	.L109:
1666:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1667:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1668:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1513              		.loc 1 1668 0 is_stmt 1
 1514 001a BB68     		ldr	r3, [r7, #8]
 1515 001c 5B69     		ldr	r3, [r3, #20]
 1516 001e 0F4A     		ldr	r2, .L117
 1517 0020 9342     		cmp	r3, r2
 1518 0022 01D1     		bne	.L111
 1519              		.loc 1 1668 0 is_stmt 0 discriminator 1
 1520 0024 0123     		movs	r3, #1
 1521 0026 00E0     		b	.L112
 1522              	.L111:
 1523              		.loc 1 1668 0 discriminator 2
 1524 0028 0023     		movs	r3, #0
 1525              	.L112:
 1526              		.loc 1 1668 0 discriminator 4
 1527 002a 002B     		cmp	r3, #0
 1528 002c 0FD0     		beq	.L113
1669:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1670:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1671:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1529              		.loc 1 1671 0 is_stmt 1
 1530 002e BB68     		ldr	r3, [r7, #8]
 1531 0030 9B6A     		ldr	r3, [r3, #40]
 1532 0032 0B4A     		ldr	r2, .L117+4
 1533 0034 9342     		cmp	r3, r2
 1534 0036 0AD0     		beq	.L113
1672:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1673:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1674:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1675:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 1535              		.loc 1 1675 0
 1536 0038 BB68     		ldr	r3, [r7, #8]
 1537 003a 9B6A     		ldr	r3, [r3, #40]
 1538 003c 002B     		cmp	r3, #0
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 62


 1539 003e 01D1     		bne	.L114
 1540              		.loc 1 1675 0 is_stmt 0 discriminator 1
 1541 0040 0123     		movs	r3, #1
 1542 0042 00E0     		b	.L115
 1543              	.L114:
 1544              		.loc 1 1675 0 discriminator 2
 1545 0044 0023     		movs	r3, #0
 1546              	.L115:
 1547              		.loc 1 1675 0 discriminator 4
 1548 0046 002B     		cmp	r3, #0
 1549 0048 01D0     		beq	.L113
1676:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
1677:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					xReturn = pdTRUE;
 1550              		.loc 1 1677 0 is_stmt 1
 1551 004a 0123     		movs	r3, #1
 1552 004c FB60     		str	r3, [r7, #12]
 1553              	.L113:
1678:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
1679:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else
1680:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
1681:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1682:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
1683:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1684:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
1685:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1686:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1687:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1688:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1689:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
1690:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1691:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1692:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1693:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1694:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return xReturn;
 1554              		.loc 1 1694 0
 1555 004e FB68     		ldr	r3, [r7, #12]
1695:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1556              		.loc 1 1695 0
 1557 0050 1846     		mov	r0, r3
 1558 0052 1437     		adds	r7, r7, #20
 1559              		.cfi_def_cfa_offset 4
 1560 0054 BD46     		mov	sp, r7
 1561              		.cfi_def_cfa_register 13
 1562              		@ sp needed
 1563 0056 5DF8047B 		ldr	r7, [sp], #4
 1564              		.cfi_restore 7
 1565              		.cfi_def_cfa_offset 0
 1566 005a 7047     		bx	lr
 1567              	.L118:
 1568              		.align	2
 1569              	.L117:
 1570 005c EC000000 		.word	xSuspendedTaskList
 1571 0060 C0000000 		.word	xPendingReadyList
 1572              		.cfi_endproc
 1573              	.LFE139:
 1574              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
 1575              		.section	.text.vTaskResume,"ax",%progbits
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 63


 1576              		.align	2
 1577              		.global	vTaskResume
 1578              		.thumb
 1579              		.thumb_func
 1580              		.type	vTaskResume, %function
 1581              	vTaskResume:
 1582              	.LFB140:
1696:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1697:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1698:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
1699:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1700:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1701:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1702:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1703:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 1583              		.loc 1 1703 0
 1584              		.cfi_startproc
 1585              		@ args = 0, pretend = 0, frame = 16
 1586              		@ frame_needed = 1, uses_anonymous_args = 0
 1587 0000 80B5     		push	{r7, lr}
 1588              		.cfi_def_cfa_offset 8
 1589              		.cfi_offset 7, -8
 1590              		.cfi_offset 14, -4
 1591 0002 84B0     		sub	sp, sp, #16
 1592              		.cfi_def_cfa_offset 24
 1593 0004 00AF     		add	r7, sp, #0
 1594              		.cfi_def_cfa_register 7
 1595 0006 7860     		str	r0, [r7, #4]
1704:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1596              		.loc 1 1704 0
 1597 0008 7B68     		ldr	r3, [r7, #4]
 1598 000a FB60     		str	r3, [r7, #12]
1705:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1706:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1707:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		configASSERT( xTaskToResume );
 1599              		.loc 1 1707 0
 1600 000c 7B68     		ldr	r3, [r7, #4]
 1601 000e 002B     		cmp	r3, #0
 1602 0010 01D1     		bne	.L120
 1603              		.loc 1 1707 0 is_stmt 0 discriminator 1
 1604              		.syntax unified
 1605              	@ 1707 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 1606 0012 72B6     		 cpsid i 
 1607              	@ 0 "" 2
 1608              		.thumb
 1609              		.syntax unified
 1610              	.L121:
 1611 0014 FEE7     		b	.L121
 1612              	.L120:
1708:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1709:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1710:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		currently executing task. */
1711:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 1613              		.loc 1 1711 0 is_stmt 1
 1614 0016 FB68     		ldr	r3, [r7, #12]
 1615 0018 002B     		cmp	r3, #0
 1616 001a 3AD0     		beq	.L125
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 64


 1617              		.loc 1 1711 0 is_stmt 0 discriminator 1
 1618 001c 1F4B     		ldr	r3, .L126
 1619 001e 1B68     		ldr	r3, [r3]
 1620 0020 FA68     		ldr	r2, [r7, #12]
 1621 0022 9A42     		cmp	r2, r3
 1622 0024 35D0     		beq	.L125
1712:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1713:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			taskENTER_CRITICAL();
 1623              		.loc 1 1713 0 is_stmt 1
 1624 0026 FFF7FEFF 		bl	vPortEnterCritical
1714:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1715:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1625              		.loc 1 1715 0
 1626 002a F868     		ldr	r0, [r7, #12]
 1627 002c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1628 0030 0346     		mov	r3, r0
 1629 0032 002B     		cmp	r3, #0
 1630 0034 2BD0     		beq	.L123
1716:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
1717:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1718:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1719:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1720:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					lists even if the scheduler is suspended. */
1721:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 1631              		.loc 1 1721 0
 1632 0036 FB68     		ldr	r3, [r7, #12]
 1633 0038 0433     		adds	r3, r3, #4
 1634 003a 1846     		mov	r0, r3
 1635 003c FFF7FEFF 		bl	uxListRemove
1722:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1636              		.loc 1 1722 0
 1637 0040 FB68     		ldr	r3, [r7, #12]
 1638 0042 DA6A     		ldr	r2, [r3, #44]
 1639 0044 164B     		ldr	r3, .L126+4
 1640 0046 1B68     		ldr	r3, [r3]
 1641 0048 9A42     		cmp	r2, r3
 1642 004a 03D9     		bls	.L124
 1643              		.loc 1 1722 0 is_stmt 0 discriminator 1
 1644 004c FB68     		ldr	r3, [r7, #12]
 1645 004e DB6A     		ldr	r3, [r3, #44]
 1646 0050 134A     		ldr	r2, .L126+4
 1647 0052 1360     		str	r3, [r2]
 1648              	.L124:
 1649              		.loc 1 1722 0 discriminator 3
 1650 0054 FB68     		ldr	r3, [r7, #12]
 1651 0056 DA6A     		ldr	r2, [r3, #44]
 1652 0058 1346     		mov	r3, r2
 1653 005a 9B00     		lsls	r3, r3, #2
 1654 005c 1344     		add	r3, r3, r2
 1655 005e 9B00     		lsls	r3, r3, #2
 1656 0060 104A     		ldr	r2, .L126+8
 1657 0062 1A44     		add	r2, r2, r3
 1658 0064 FB68     		ldr	r3, [r7, #12]
 1659 0066 0433     		adds	r3, r3, #4
 1660 0068 1946     		mov	r1, r3
 1661 006a 1046     		mov	r0, r2
 1662 006c FFF7FEFF 		bl	vListInsertEnd
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 65


1723:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1724:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1725:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1663              		.loc 1 1725 0 is_stmt 1 discriminator 3
 1664 0070 FB68     		ldr	r3, [r7, #12]
 1665 0072 DA6A     		ldr	r2, [r3, #44]
 1666 0074 094B     		ldr	r3, .L126
 1667 0076 1B68     		ldr	r3, [r3]
 1668 0078 DB6A     		ldr	r3, [r3, #44]
 1669 007a 9A42     		cmp	r2, r3
 1670 007c 07D3     		bcc	.L123
1726:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
1727:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1728:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						but will leave the lists in the correct state for the
1729:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						next yield. */
1730:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 1671              		.loc 1 1730 0
 1672 007e 0A4B     		ldr	r3, .L126+12
 1673 0080 4FF08052 		mov	r2, #268435456
 1674 0084 1A60     		str	r2, [r3]
 1675              		.syntax unified
 1676              	@ 1730 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 1677 0086 BFF34F8F 		dsb
 1678              	@ 0 "" 2
 1679              	@ 1730 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 1680 008a BFF36F8F 		isb
 1681              	@ 0 "" 2
 1682              		.thumb
 1683              		.syntax unified
 1684              	.L123:
1731:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
1732:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					else
1733:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
1734:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1735:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
1736:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
1737:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else
1738:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
1739:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1740:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
1741:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1742:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			taskEXIT_CRITICAL();
 1685              		.loc 1 1742 0
 1686 008e FFF7FEFF 		bl	vPortExitCritical
 1687              	.L125:
1743:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1744:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
1745:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1746:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1747:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1748:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 1688              		.loc 1 1748 0
 1689 0092 00BF     		nop
 1690 0094 1037     		adds	r7, r7, #16
 1691              		.cfi_def_cfa_offset 8
 1692 0096 BD46     		mov	sp, r7
 1693              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 66


 1694              		@ sp needed
 1695 0098 80BD     		pop	{r7, pc}
 1696              	.L127:
 1697 009a 00BF     		.align	2
 1698              	.L126:
 1699 009c 00000000 		.word	pxCurrentTCB
 1700 00a0 08010000 		.word	uxTopReadyPriority
 1701 00a4 04000000 		.word	pxReadyTasksLists
 1702 00a8 04ED00E0 		.word	-536810236
 1703              		.cfi_endproc
 1704              	.LFE140:
 1705              		.size	vTaskResume, .-vTaskResume
 1706              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1707              		.align	2
 1708              		.global	xTaskResumeFromISR
 1709              		.thumb
 1710              		.thumb_func
 1711              		.type	xTaskResumeFromISR, %function
 1712              	xTaskResumeFromISR:
 1713              	.LFB141:
1749:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1750:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1751:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1752:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
1753:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1754:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1755:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1756:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1757:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 1714              		.loc 1 1757 0
 1715              		.cfi_startproc
 1716              		@ args = 0, pretend = 0, frame = 32
 1717              		@ frame_needed = 1, uses_anonymous_args = 0
 1718 0000 80B5     		push	{r7, lr}
 1719              		.cfi_def_cfa_offset 8
 1720              		.cfi_offset 7, -8
 1721              		.cfi_offset 14, -4
 1722 0002 88B0     		sub	sp, sp, #32
 1723              		.cfi_def_cfa_offset 40
 1724 0004 00AF     		add	r7, sp, #0
 1725              		.cfi_def_cfa_register 7
 1726 0006 7860     		str	r0, [r7, #4]
1758:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1727              		.loc 1 1758 0
 1728 0008 0023     		movs	r3, #0
 1729 000a FB61     		str	r3, [r7, #28]
1759:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1730              		.loc 1 1759 0
 1731 000c 7B68     		ldr	r3, [r7, #4]
 1732 000e BB61     		str	r3, [r7, #24]
1760:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1761:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1762:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		configASSERT( xTaskToResume );
 1733              		.loc 1 1762 0
 1734 0010 7B68     		ldr	r3, [r7, #4]
 1735 0012 002B     		cmp	r3, #0
 1736 0014 01D1     		bne	.L129
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 67


 1737              		.loc 1 1762 0 is_stmt 0 discriminator 1
 1738              		.syntax unified
 1739              	@ 1762 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 1740 0016 72B6     		 cpsid i 
 1741              	@ 0 "" 2
 1742              		.thumb
 1743              		.syntax unified
 1744              	.L130:
 1745 0018 FEE7     		b	.L130
 1746              	.L129:
1763:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1764:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1765:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1766:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1767:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1768:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1769:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1770:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1771:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1772:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1773:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1774:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1775:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1776:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1777:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1778:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		provided on the following link:
1779:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1780:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1747              		.loc 1 1780 0 is_stmt 1
 1748 001a FFF7FEFF 		bl	vPortValidateInterruptPriority
 1749              	.LBB24:
 1750              	.LBB25:
 215:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     (
 1751              		.loc 2 215 0
 1752              		.syntax unified
 1753              	@ 215 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h" 1
 1754 001e EFF31182 		    mrs r2, basepri                                            
 1755 0022 4FF0BF03 	    mov r3, #191                                                 
 1756 0026 83F31188 	    msr basepri, r3                                            
 1757 002a BFF36F8F 	    isb                                                        
 1758 002e BFF34F8F 	    dsb                                                        
 1759              	
 1760              	@ 0 "" 2
 1761              		.thumb
 1762              		.syntax unified
 1763 0032 FA60     		str	r2, [r7, #12]
 1764 0034 BB60     		str	r3, [r7, #8]
 227:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** }
 1765              		.loc 2 227 0
 1766 0036 FB68     		ldr	r3, [r7, #12]
 1767              	.LBE25:
 1768              	.LBE24:
1781:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1782:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1769              		.loc 1 1782 0
 1770 0038 3B61     		str	r3, [r7, #16]
1783:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 68


1784:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1771              		.loc 1 1784 0
 1772 003a B869     		ldr	r0, [r7, #24]
 1773 003c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1774 0040 0346     		mov	r3, r0
 1775 0042 002B     		cmp	r3, #0
 1776 0044 30D0     		beq	.L132
1785:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1786:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1787:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1788:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1789:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1777              		.loc 1 1789 0
 1778 0046 1D4B     		ldr	r3, .L138
 1779 0048 1B68     		ldr	r3, [r3]
 1780 004a 002B     		cmp	r3, #0
 1781 004c 26D1     		bne	.L133
1790:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
1791:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1792:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					suspended list to the ready list directly. */
1793:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1782              		.loc 1 1793 0
 1783 004e BB69     		ldr	r3, [r7, #24]
 1784 0050 DA6A     		ldr	r2, [r3, #44]
 1785 0052 1B4B     		ldr	r3, .L138+4
 1786 0054 1B68     		ldr	r3, [r3]
 1787 0056 DB6A     		ldr	r3, [r3, #44]
 1788 0058 9A42     		cmp	r2, r3
 1789 005a 01D3     		bcc	.L134
1794:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
1795:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						xYieldRequired = pdTRUE;
 1790              		.loc 1 1795 0
 1791 005c 0123     		movs	r3, #1
 1792 005e FB61     		str	r3, [r7, #28]
 1793              	.L134:
1796:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
1797:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					else
1798:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
1799:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1800:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
1801:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1802:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1794              		.loc 1 1802 0
 1795 0060 BB69     		ldr	r3, [r7, #24]
 1796 0062 0433     		adds	r3, r3, #4
 1797 0064 1846     		mov	r0, r3
 1798 0066 FFF7FEFF 		bl	uxListRemove
1803:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1799              		.loc 1 1803 0
 1800 006a BB69     		ldr	r3, [r7, #24]
 1801 006c DA6A     		ldr	r2, [r3, #44]
 1802 006e 154B     		ldr	r3, .L138+8
 1803 0070 1B68     		ldr	r3, [r3]
 1804 0072 9A42     		cmp	r2, r3
 1805 0074 03D9     		bls	.L135
 1806              		.loc 1 1803 0 is_stmt 0 discriminator 1
 1807 0076 BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 69


 1808 0078 DB6A     		ldr	r3, [r3, #44]
 1809 007a 124A     		ldr	r2, .L138+8
 1810 007c 1360     		str	r3, [r2]
 1811              	.L135:
 1812              		.loc 1 1803 0 discriminator 3
 1813 007e BB69     		ldr	r3, [r7, #24]
 1814 0080 DA6A     		ldr	r2, [r3, #44]
 1815 0082 1346     		mov	r3, r2
 1816 0084 9B00     		lsls	r3, r3, #2
 1817 0086 1344     		add	r3, r3, r2
 1818 0088 9B00     		lsls	r3, r3, #2
 1819 008a 0F4A     		ldr	r2, .L138+12
 1820 008c 1A44     		add	r2, r2, r3
 1821 008e BB69     		ldr	r3, [r7, #24]
 1822 0090 0433     		adds	r3, r3, #4
 1823 0092 1946     		mov	r1, r3
 1824 0094 1046     		mov	r0, r2
 1825 0096 FFF7FEFF 		bl	vListInsertEnd
 1826 009a 05E0     		b	.L132
 1827              	.L133:
1804:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
1805:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else
1806:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
1807:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1808:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1809:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					unsuspended. */
1810:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1828              		.loc 1 1810 0 is_stmt 1
 1829 009c BB69     		ldr	r3, [r7, #24]
 1830 009e 1833     		adds	r3, r3, #24
 1831 00a0 1946     		mov	r1, r3
 1832 00a2 0A48     		ldr	r0, .L138+16
 1833 00a4 FFF7FEFF 		bl	vListInsertEnd
 1834              	.L132:
 1835 00a8 3B69     		ldr	r3, [r7, #16]
 1836 00aa 7B61     		str	r3, [r7, #20]
 1837              	.LBB26:
 1838              	.LBB27:
 1839              		.loc 2 233 0
 1840 00ac 7B69     		ldr	r3, [r7, #20]
 1841              		.syntax unified
 1842              	@ 233 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h" 1
 1843 00ae 83F31188 		    msr basepri, r3  
 1844              	@ 0 "" 2
 1845              		.thumb
 1846              		.syntax unified
 1847              	.LBE27:
 1848              	.LBE26:
1811:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
1812:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1813:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
1814:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1815:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1816:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1817:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1818:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1819:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 70


1820:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return xYieldRequired;
 1849              		.loc 1 1820 0
 1850 00b2 FB69     		ldr	r3, [r7, #28]
1821:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 1851              		.loc 1 1821 0
 1852 00b4 1846     		mov	r0, r3
 1853 00b6 2037     		adds	r7, r7, #32
 1854              		.cfi_def_cfa_offset 8
 1855 00b8 BD46     		mov	sp, r7
 1856              		.cfi_def_cfa_register 13
 1857              		@ sp needed
 1858 00ba 80BD     		pop	{r7, pc}
 1859              	.L139:
 1860              		.align	2
 1861              	.L138:
 1862 00bc 28010000 		.word	uxSchedulerSuspended
 1863 00c0 00000000 		.word	pxCurrentTCB
 1864 00c4 08010000 		.word	uxTopReadyPriority
 1865 00c8 04000000 		.word	pxReadyTasksLists
 1866 00cc C0000000 		.word	xPendingReadyList
 1867              		.cfi_endproc
 1868              	.LFE141:
 1869              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1870              		.section	.rodata
 1871              		.align	2
 1872              	.LC0:
 1873 0000 49444C45 		.ascii	"IDLE\000"
 1873      00
 1874              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1875              		.align	2
 1876              		.global	vTaskStartScheduler
 1877              		.thumb
 1878              		.thumb_func
 1879              		.type	vTaskStartScheduler, %function
 1880              	vTaskStartScheduler:
 1881              	.LFB142:
1822:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1823:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1824:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
1825:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1826:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** void vTaskStartScheduler( void )
1827:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** {
 1882              		.loc 1 1827 0
 1883              		.cfi_startproc
 1884              		@ args = 0, pretend = 0, frame = 8
 1885              		@ frame_needed = 1, uses_anonymous_args = 0
 1886 0000 80B5     		push	{r7, lr}
 1887              		.cfi_def_cfa_offset 8
 1888              		.cfi_offset 7, -8
 1889              		.cfi_offset 14, -4
 1890 0002 84B0     		sub	sp, sp, #16
 1891              		.cfi_def_cfa_offset 24
 1892 0004 02AF     		add	r7, sp, #8
 1893              		.cfi_def_cfa 7, 16
1828:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** BaseType_t xReturn;
1829:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1830:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 71


1831:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1832:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
1833:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1834:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1835:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1836:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1837:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1838:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		address of the RAM then create the idle task. */
1839:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1840:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1841:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 												"IDLE",
1842:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 												ulIdleTaskStackSize,
1843:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 												( void * ) NULL,
1844:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1845:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 												pxIdleTaskStackBuffer,
1846:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1847:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1848:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1849:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1850:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xReturn = pdPASS;
1851:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1852:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
1853:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1854:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xReturn = pdFAIL;
1855:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1856:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
1857:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#else
1858:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
1859:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1860:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
 1894              		.loc 1 1860 0
 1895 0006 164B     		ldr	r3, .L146
 1896 0008 0193     		str	r3, [sp, #4]
 1897 000a 0023     		movs	r3, #0
 1898 000c 0093     		str	r3, [sp]
 1899 000e 0023     		movs	r3, #0
 1900 0010 8022     		movs	r2, #128
 1901 0012 1449     		ldr	r1, .L146+4
 1902 0014 1448     		ldr	r0, .L146+8
 1903 0016 FFF7FEFF 		bl	xTaskCreate
 1904 001a 7860     		str	r0, [r7, #4]
1861:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
1862:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 								( void * ) NULL,
1863:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1864:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1865:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
1866:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1867:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1868:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1869:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
1870:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( xReturn == pdPASS )
 1905              		.loc 1 1870 0
 1906 001c 7B68     		ldr	r3, [r7, #4]
 1907 001e 012B     		cmp	r3, #1
 1908 0020 02D1     		bne	.L141
1871:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1872:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 72


 1909              		.loc 1 1872 0
 1910 0022 FFF7FEFF 		bl	xTimerCreateTimerTask
 1911 0026 7860     		str	r0, [r7, #4]
 1912              	.L141:
1873:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1874:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
1875:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1876:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1877:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1878:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
1879:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1880:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1881:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	if( xReturn == pdPASS )
 1913              		.loc 1 1881 0
 1914 0028 7B68     		ldr	r3, [r7, #4]
 1915 002a 012B     		cmp	r3, #1
 1916 002c 0DD1     		bne	.L142
1882:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
1883:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1884:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1885:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1886:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1887:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		starts to run. */
1888:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		portDISABLE_INTERRUPTS();
 1917              		.loc 1 1888 0
 1918              		.syntax unified
 1919              	@ 1888 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 1920 002e 72B6     		 cpsid i 
 1921              	@ 0 "" 2
1889:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1890:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1891:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1892:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1893:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			structure specific to the task that will run first. */
1894:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1895:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1896:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1897:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1898:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 1922              		.loc 1 1898 0
 1923              		.thumb
 1924              		.syntax unified
 1925 0030 0E4B     		ldr	r3, .L146+12
 1926 0032 4FF0FF32 		mov	r2, #-1
 1927 0036 1A60     		str	r2, [r3]
1899:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1928              		.loc 1 1899 0
 1929 0038 0D4B     		ldr	r3, .L146+16
 1930 003a 0122     		movs	r2, #1
 1931 003c 1A60     		str	r2, [r3]
1900:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1932              		.loc 1 1900 0
 1933 003e 0D4B     		ldr	r3, .L146+20
 1934 0040 0022     		movs	r2, #0
 1935 0042 1A60     		str	r2, [r3]
1901:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1902:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 73


1903:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1904:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		the run time counter time base. */
1905:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1906:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1907:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1908:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		portable interface. */
1909:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 1936              		.loc 1 1909 0
 1937 0044 FFF7FEFF 		bl	xPortStartScheduler
1910:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1911:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1912:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			function will not return. */
1913:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1914:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
1915:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1916:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1917:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1918:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
1919:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	else
1920:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
1921:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1922:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1923:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		or the timer task. */
1924:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1925:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
1926:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1927:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
1928:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
1929:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	( void ) xIdleTaskHandle;
1930:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** }
 1938              		.loc 1 1930 0
 1939 0048 05E0     		b	.L145
 1940              	.L142:
1924:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 1941              		.loc 1 1924 0
 1942 004a 7B68     		ldr	r3, [r7, #4]
 1943 004c B3F1FF3F 		cmp	r3, #-1
 1944 0050 01D1     		bne	.L145
1924:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 1945              		.loc 1 1924 0 is_stmt 0 discriminator 1
 1946              		.syntax unified
 1947              	@ 1924 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 1948 0052 72B6     		 cpsid i 
 1949              	@ 0 "" 2
 1950              		.thumb
 1951              		.syntax unified
 1952              	.L144:
1924:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 1953              		.loc 1 1924 0 discriminator 2
 1954 0054 FEE7     		b	.L144
 1955              	.L145:
 1956              		.loc 1 1930 0 is_stmt 1
 1957 0056 00BF     		nop
 1958 0058 0837     		adds	r7, r7, #8
 1959              		.cfi_def_cfa_offset 8
 1960 005a BD46     		mov	sp, r7
 1961              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 74


 1962              		@ sp needed
 1963 005c 80BD     		pop	{r7, pc}
 1964              	.L147:
 1965 005e 00BF     		.align	2
 1966              	.L146:
 1967 0060 24010000 		.word	xIdleTaskHandle
 1968 0064 00000000 		.word	.LC0
 1969 0068 00000000 		.word	prvIdleTask
 1970 006c 20010000 		.word	xNextTaskUnblockTime
 1971 0070 0C010000 		.word	xSchedulerRunning
 1972 0074 04010000 		.word	xTickCount
 1973              		.cfi_endproc
 1974              	.LFE142:
 1975              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1976              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1977              		.align	2
 1978              		.global	vTaskEndScheduler
 1979              		.thumb
 1980              		.thumb_func
 1981              		.type	vTaskEndScheduler, %function
 1982              	vTaskEndScheduler:
 1983              	.LFB143:
1931:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
1932:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1933:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** void vTaskEndScheduler( void )
1934:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** {
 1984              		.loc 1 1934 0
 1985              		.cfi_startproc
 1986              		@ args = 0, pretend = 0, frame = 0
 1987              		@ frame_needed = 1, uses_anonymous_args = 0
 1988 0000 80B5     		push	{r7, lr}
 1989              		.cfi_def_cfa_offset 8
 1990              		.cfi_offset 7, -8
 1991              		.cfi_offset 14, -4
 1992 0002 00AF     		add	r7, sp, #0
 1993              		.cfi_def_cfa_register 7
1935:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1936:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1937:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1938:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	portDISABLE_INTERRUPTS();
 1994              		.loc 1 1938 0
 1995              		.syntax unified
 1996              	@ 1938 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 1997 0004 72B6     		 cpsid i 
 1998              	@ 0 "" 2
1939:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1999              		.loc 1 1939 0
 2000              		.thumb
 2001              		.syntax unified
 2002 0006 034B     		ldr	r3, .L149
 2003 0008 0022     		movs	r2, #0
 2004 000a 1A60     		str	r2, [r3]
1940:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	vPortEndScheduler();
 2005              		.loc 1 1940 0
 2006 000c FFF7FEFF 		bl	vPortEndScheduler
1941:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** }
 2007              		.loc 1 1941 0
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 75


 2008 0010 00BF     		nop
 2009 0012 80BD     		pop	{r7, pc}
 2010              	.L150:
 2011              		.align	2
 2012              	.L149:
 2013 0014 0C010000 		.word	xSchedulerRunning
 2014              		.cfi_endproc
 2015              	.LFE143:
 2016              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 2017              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2018              		.align	2
 2019              		.global	vTaskSuspendAll
 2020              		.thumb
 2021              		.thumb_func
 2022              		.type	vTaskSuspendAll, %function
 2023              	vTaskSuspendAll:
 2024              	.LFB144:
1942:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*----------------------------------------------------------*/
1943:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1944:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** void vTaskSuspendAll( void )
1945:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** {
 2025              		.loc 1 1945 0
 2026              		.cfi_startproc
 2027              		@ args = 0, pretend = 0, frame = 0
 2028              		@ frame_needed = 1, uses_anonymous_args = 0
 2029              		@ link register save eliminated.
 2030 0000 80B4     		push	{r7}
 2031              		.cfi_def_cfa_offset 4
 2032              		.cfi_offset 7, -4
 2033 0002 00AF     		add	r7, sp, #0
 2034              		.cfi_def_cfa_register 7
1946:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1947:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1948:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1949:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	http://goo.gl/wu4acr */
1950:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	++uxSchedulerSuspended;
 2035              		.loc 1 1950 0
 2036 0004 044B     		ldr	r3, .L152
 2037 0006 1B68     		ldr	r3, [r3]
 2038 0008 0133     		adds	r3, r3, #1
 2039 000a 034A     		ldr	r2, .L152
 2040 000c 1360     		str	r3, [r2]
1951:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** }
 2041              		.loc 1 1951 0
 2042 000e 00BF     		nop
 2043 0010 BD46     		mov	sp, r7
 2044              		.cfi_def_cfa_register 13
 2045              		@ sp needed
 2046 0012 5DF8047B 		ldr	r7, [sp], #4
 2047              		.cfi_restore 7
 2048              		.cfi_def_cfa_offset 0
 2049 0016 7047     		bx	lr
 2050              	.L153:
 2051              		.align	2
 2052              	.L152:
 2053 0018 28010000 		.word	uxSchedulerSuspended
 2054              		.cfi_endproc
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 76


 2055              	.LFE144:
 2056              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 2057              		.section	.text.xTaskResumeAll,"ax",%progbits
 2058              		.align	2
 2059              		.global	xTaskResumeAll
 2060              		.thumb
 2061              		.thumb_func
 2062              		.type	xTaskResumeAll, %function
 2063              	xTaskResumeAll:
 2064              	.LFB145:
1952:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*----------------------------------------------------------*/
1953:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1954:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1955:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1956:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1957:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
1958:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TickType_t xReturn;
1959:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
1960:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1961:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
1962:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
1963:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
1964:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		running. */
1965:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
1966:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1967:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
1968:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1969:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1970:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1971:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1972:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#else
1973:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1974:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
1975:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1976:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
1977:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
1978:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
1979:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
1980:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
1981:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
1982:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
1983:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1984:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
1985:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1986:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#endif
1987:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
1988:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1989:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1990:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xReturn = 0;
1991:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
1992:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1993:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
1994:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1995:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1996:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			processed. */
1997:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xReturn = 0;
1998:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 77


1999:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2000:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2001:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2002:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			idle priority.  This path can only be reached if
2003:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2004:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xReturn = 0;
2005:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2006:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
2007:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2008:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2009:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2010:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2011:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return xReturn;
2012:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
2013:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2014:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2015:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*----------------------------------------------------------*/
2016:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2017:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2018:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** {
 2065              		.loc 1 2018 0
 2066              		.cfi_startproc
 2067              		@ args = 0, pretend = 0, frame = 16
 2068              		@ frame_needed = 1, uses_anonymous_args = 0
 2069 0000 80B5     		push	{r7, lr}
 2070              		.cfi_def_cfa_offset 8
 2071              		.cfi_offset 7, -8
 2072              		.cfi_offset 14, -4
 2073 0002 84B0     		sub	sp, sp, #16
 2074              		.cfi_def_cfa_offset 24
 2075 0004 00AF     		add	r7, sp, #0
 2076              		.cfi_def_cfa_register 7
2019:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** TCB_t *pxTCB = NULL;
 2077              		.loc 1 2019 0
 2078 0006 0023     		movs	r3, #0
 2079 0008 FB60     		str	r3, [r7, #12]
2020:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2080              		.loc 1 2020 0
 2081 000a 0023     		movs	r3, #0
 2082 000c BB60     		str	r3, [r7, #8]
2021:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2022:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2023:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2024:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2083              		.loc 1 2024 0
 2084 000e 3D4B     		ldr	r3, .L166
 2085 0010 1B68     		ldr	r3, [r3]
 2086 0012 002B     		cmp	r3, #0
 2087 0014 01D1     		bne	.L155
 2088              		.loc 1 2024 0 is_stmt 0 discriminator 1
 2089              		.syntax unified
 2090              	@ 2024 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 2091 0016 72B6     		 cpsid i 
 2092              	@ 0 "" 2
 2093              		.thumb
 2094              		.syntax unified
 2095              	.L156:
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 78


 2096 0018 FEE7     		b	.L156
 2097              	.L155:
2025:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2026:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2027:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2028:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2029:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2030:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2031:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	taskENTER_CRITICAL();
 2098              		.loc 1 2031 0 is_stmt 1
 2099 001a FFF7FEFF 		bl	vPortEnterCritical
2032:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
2033:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		--uxSchedulerSuspended;
 2100              		.loc 1 2033 0
 2101 001e 394B     		ldr	r3, .L166
 2102 0020 1B68     		ldr	r3, [r3]
 2103 0022 013B     		subs	r3, r3, #1
 2104 0024 374A     		ldr	r2, .L166
 2105 0026 1360     		str	r3, [r2]
2034:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2035:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2106              		.loc 1 2035 0
 2107 0028 364B     		ldr	r3, .L166
 2108 002a 1B68     		ldr	r3, [r3]
 2109 002c 002B     		cmp	r3, #0
 2110 002e 62D1     		bne	.L157
2036:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2037:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2111              		.loc 1 2037 0
 2112 0030 354B     		ldr	r3, .L166+4
 2113 0032 1B68     		ldr	r3, [r3]
 2114 0034 002B     		cmp	r3, #0
 2115 0036 5ED0     		beq	.L157
2038:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
2039:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2040:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				appropriate ready list. */
2041:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2116              		.loc 1 2041 0
 2117 0038 2FE0     		b	.L158
 2118              	.L160:
2042:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
2043:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 2119              		.loc 1 2043 0
 2120 003a 344B     		ldr	r3, .L166+8
 2121 003c DB68     		ldr	r3, [r3, #12]
 2122 003e DB68     		ldr	r3, [r3, #12]
 2123 0040 FB60     		str	r3, [r7, #12]
2044:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2124              		.loc 1 2044 0
 2125 0042 FB68     		ldr	r3, [r7, #12]
 2126 0044 1833     		adds	r3, r3, #24
 2127 0046 1846     		mov	r0, r3
 2128 0048 FFF7FEFF 		bl	uxListRemove
2045:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2129              		.loc 1 2045 0
 2130 004c FB68     		ldr	r3, [r7, #12]
 2131 004e 0433     		adds	r3, r3, #4
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 79


 2132 0050 1846     		mov	r0, r3
 2133 0052 FFF7FEFF 		bl	uxListRemove
2046:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2134              		.loc 1 2046 0
 2135 0056 FB68     		ldr	r3, [r7, #12]
 2136 0058 DA6A     		ldr	r2, [r3, #44]
 2137 005a 2D4B     		ldr	r3, .L166+12
 2138 005c 1B68     		ldr	r3, [r3]
 2139 005e 9A42     		cmp	r2, r3
 2140 0060 03D9     		bls	.L159
 2141              		.loc 1 2046 0 is_stmt 0 discriminator 1
 2142 0062 FB68     		ldr	r3, [r7, #12]
 2143 0064 DB6A     		ldr	r3, [r3, #44]
 2144 0066 2A4A     		ldr	r2, .L166+12
 2145 0068 1360     		str	r3, [r2]
 2146              	.L159:
 2147              		.loc 1 2046 0 discriminator 3
 2148 006a FB68     		ldr	r3, [r7, #12]
 2149 006c DA6A     		ldr	r2, [r3, #44]
 2150 006e 1346     		mov	r3, r2
 2151 0070 9B00     		lsls	r3, r3, #2
 2152 0072 1344     		add	r3, r3, r2
 2153 0074 9B00     		lsls	r3, r3, #2
 2154 0076 274A     		ldr	r2, .L166+16
 2155 0078 1A44     		add	r2, r2, r3
 2156 007a FB68     		ldr	r3, [r7, #12]
 2157 007c 0433     		adds	r3, r3, #4
 2158 007e 1946     		mov	r1, r3
 2159 0080 1046     		mov	r0, r2
 2160 0082 FFF7FEFF 		bl	vListInsertEnd
2047:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2048:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2049:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					task then a yield must be performed. */
2050:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2161              		.loc 1 2050 0 is_stmt 1 discriminator 3
 2162 0086 FB68     		ldr	r3, [r7, #12]
 2163 0088 DA6A     		ldr	r2, [r3, #44]
 2164 008a 234B     		ldr	r3, .L166+20
 2165 008c 1B68     		ldr	r3, [r3]
 2166 008e DB6A     		ldr	r3, [r3, #44]
 2167 0090 9A42     		cmp	r2, r3
 2168 0092 02D3     		bcc	.L158
2051:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
2052:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						xYieldPending = pdTRUE;
 2169              		.loc 1 2052 0
 2170 0094 214B     		ldr	r3, .L166+24
 2171 0096 0122     		movs	r2, #1
 2172 0098 1A60     		str	r2, [r3]
 2173              	.L158:
2041:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
 2174              		.loc 1 2041 0
 2175 009a 1C4B     		ldr	r3, .L166+8
 2176 009c 1B68     		ldr	r3, [r3]
 2177 009e 002B     		cmp	r3, #0
 2178 00a0 CBD1     		bne	.L160
2053:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
2054:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					else
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 80


2055:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
2056:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2057:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
2058:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
2059:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2060:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( pxTCB != NULL )
 2179              		.loc 1 2060 0
 2180 00a2 FB68     		ldr	r3, [r7, #12]
 2181 00a4 002B     		cmp	r3, #0
 2182 00a6 01D0     		beq	.L161
2061:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
2062:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2063:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					which may have prevented the next unblock time from being
2064:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2065:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					important for low power tickless implementations, where
2066:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2067:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					state. */
2068:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 2183              		.loc 1 2068 0
 2184 00a8 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2185              	.L161:
 2186              	.LBB28:
2069:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
2070:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2071:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2072:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2073:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2074:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				time. */
2075:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
2076:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 2187              		.loc 1 2076 0
 2188 00ac 1C4B     		ldr	r3, .L166+28
 2189 00ae 1B68     		ldr	r3, [r3]
 2190 00b0 7B60     		str	r3, [r7, #4]
2077:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2078:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
 2191              		.loc 1 2078 0
 2192 00b2 7B68     		ldr	r3, [r7, #4]
 2193 00b4 002B     		cmp	r3, #0
 2194 00b6 10D0     		beq	.L162
 2195              	.L164:
2079:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
2080:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						do
2081:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						{
2082:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2196              		.loc 1 2082 0
 2197 00b8 FFF7FEFF 		bl	xTaskIncrementTick
 2198 00bc 0346     		mov	r3, r0
 2199 00be 002B     		cmp	r3, #0
 2200 00c0 02D0     		beq	.L163
2083:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 							{
2084:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 								xYieldPending = pdTRUE;
 2201              		.loc 1 2084 0
 2202 00c2 164B     		ldr	r3, .L166+24
 2203 00c4 0122     		movs	r2, #1
 2204 00c6 1A60     		str	r2, [r3]
 2205              	.L163:
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 81


2085:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 							}
2086:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 							else
2087:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 							{
2088:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2089:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 							}
2090:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 							--uxPendedCounts;
 2206              		.loc 1 2090 0
 2207 00c8 7B68     		ldr	r3, [r7, #4]
 2208 00ca 013B     		subs	r3, r3, #1
 2209 00cc 7B60     		str	r3, [r7, #4]
2091:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2210              		.loc 1 2091 0
 2211 00ce 7B68     		ldr	r3, [r7, #4]
 2212 00d0 002B     		cmp	r3, #0
 2213 00d2 F1D1     		bne	.L164
2092:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2093:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						uxPendedTicks = 0;
 2214              		.loc 1 2093 0
 2215 00d4 124B     		ldr	r3, .L166+28
 2216 00d6 0022     		movs	r2, #0
 2217 00d8 1A60     		str	r2, [r3]
 2218              	.L162:
 2219              	.LBE28:
2094:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
2095:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					else
2096:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
2097:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2098:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
2099:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
2100:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2101:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 2220              		.loc 1 2101 0
 2221 00da 104B     		ldr	r3, .L166+24
 2222 00dc 1B68     		ldr	r3, [r3]
 2223 00de 002B     		cmp	r3, #0
 2224 00e0 09D0     		beq	.L157
2102:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
2103:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2104:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
2105:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 2225              		.loc 1 2105 0
 2226 00e2 0123     		movs	r3, #1
 2227 00e4 BB60     		str	r3, [r7, #8]
2106:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
2107:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					#endif
2108:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 2228              		.loc 1 2108 0
 2229 00e6 0F4B     		ldr	r3, .L166+32
 2230 00e8 4FF08052 		mov	r2, #268435456
 2231 00ec 1A60     		str	r2, [r3]
 2232              		.syntax unified
 2233              	@ 2108 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 2234 00ee BFF34F8F 		dsb
 2235              	@ 0 "" 2
 2236              	@ 2108 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 2237 00f2 BFF36F8F 		isb
 2238              	@ 0 "" 2
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 82


 2239              		.thumb
 2240              		.syntax unified
 2241              	.L157:
2109:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
2110:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else
2111:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
2112:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2113:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
2114:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
2115:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2116:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
2117:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2118:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2119:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2120:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
2121:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	taskEXIT_CRITICAL();
 2242              		.loc 1 2121 0
 2243 00f6 FFF7FEFF 		bl	vPortExitCritical
2122:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2123:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	return xAlreadyYielded;
 2244              		.loc 1 2123 0
 2245 00fa BB68     		ldr	r3, [r7, #8]
2124:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** }
 2246              		.loc 1 2124 0
 2247 00fc 1846     		mov	r0, r3
 2248 00fe 1037     		adds	r7, r7, #16
 2249              		.cfi_def_cfa_offset 8
 2250 0100 BD46     		mov	sp, r7
 2251              		.cfi_def_cfa_register 13
 2252              		@ sp needed
 2253 0102 80BD     		pop	{r7, pc}
 2254              	.L167:
 2255              		.align	2
 2256              	.L166:
 2257 0104 28010000 		.word	uxSchedulerSuspended
 2258 0108 00010000 		.word	uxCurrentNumberOfTasks
 2259 010c C0000000 		.word	xPendingReadyList
 2260 0110 08010000 		.word	uxTopReadyPriority
 2261 0114 04000000 		.word	pxReadyTasksLists
 2262 0118 00000000 		.word	pxCurrentTCB
 2263 011c 14010000 		.word	xYieldPending
 2264 0120 10010000 		.word	uxPendedTicks
 2265 0124 04ED00E0 		.word	-536810236
 2266              		.cfi_endproc
 2267              	.LFE145:
 2268              		.size	xTaskResumeAll, .-xTaskResumeAll
 2269              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2270              		.align	2
 2271              		.global	xTaskGetTickCount
 2272              		.thumb
 2273              		.thumb_func
 2274              		.type	xTaskGetTickCount, %function
 2275              	xTaskGetTickCount:
 2276              	.LFB146:
2125:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
2126:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2127:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** TickType_t xTaskGetTickCount( void )
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 83


2128:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** {
 2277              		.loc 1 2128 0
 2278              		.cfi_startproc
 2279              		@ args = 0, pretend = 0, frame = 8
 2280              		@ frame_needed = 1, uses_anonymous_args = 0
 2281              		@ link register save eliminated.
 2282 0000 80B4     		push	{r7}
 2283              		.cfi_def_cfa_offset 4
 2284              		.cfi_offset 7, -4
 2285 0002 83B0     		sub	sp, sp, #12
 2286              		.cfi_def_cfa_offset 16
 2287 0004 00AF     		add	r7, sp, #0
 2288              		.cfi_def_cfa_register 7
2129:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** TickType_t xTicks;
2130:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2131:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2132:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2133:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
2134:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		xTicks = xTickCount;
 2289              		.loc 1 2134 0
 2290 0006 054B     		ldr	r3, .L170
 2291 0008 1B68     		ldr	r3, [r3]
 2292 000a 7B60     		str	r3, [r7, #4]
2135:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
2136:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2137:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2138:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	return xTicks;
 2293              		.loc 1 2138 0
 2294 000c 7B68     		ldr	r3, [r7, #4]
2139:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** }
 2295              		.loc 1 2139 0
 2296 000e 1846     		mov	r0, r3
 2297 0010 0C37     		adds	r7, r7, #12
 2298              		.cfi_def_cfa_offset 4
 2299 0012 BD46     		mov	sp, r7
 2300              		.cfi_def_cfa_register 13
 2301              		@ sp needed
 2302 0014 5DF8047B 		ldr	r7, [sp], #4
 2303              		.cfi_restore 7
 2304              		.cfi_def_cfa_offset 0
 2305 0018 7047     		bx	lr
 2306              	.L171:
 2307 001a 00BF     		.align	2
 2308              	.L170:
 2309 001c 04010000 		.word	xTickCount
 2310              		.cfi_endproc
 2311              	.LFE146:
 2312              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 2313              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2314              		.align	2
 2315              		.global	xTaskGetTickCountFromISR
 2316              		.thumb
 2317              		.thumb_func
 2318              		.type	xTaskGetTickCountFromISR, %function
 2319              	xTaskGetTickCountFromISR:
 2320              	.LFB147:
2140:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 84


2141:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2142:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2143:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** {
 2321              		.loc 1 2143 0
 2322              		.cfi_startproc
 2323              		@ args = 0, pretend = 0, frame = 8
 2324              		@ frame_needed = 1, uses_anonymous_args = 0
 2325 0000 80B5     		push	{r7, lr}
 2326              		.cfi_def_cfa_offset 8
 2327              		.cfi_offset 7, -8
 2328              		.cfi_offset 14, -4
 2329 0002 82B0     		sub	sp, sp, #8
 2330              		.cfi_def_cfa_offset 16
 2331 0004 00AF     		add	r7, sp, #0
 2332              		.cfi_def_cfa_register 7
2144:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** TickType_t xReturn;
2145:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2146:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2147:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2148:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2149:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2150:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2151:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2152:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2153:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2154:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2155:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2156:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2157:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2158:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2159:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2160:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2161:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2333              		.loc 1 2161 0
 2334 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
2162:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2163:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2335              		.loc 1 2163 0
 2336 000a 0023     		movs	r3, #0
 2337 000c 7B60     		str	r3, [r7, #4]
2164:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
2165:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		xReturn = xTickCount;
 2338              		.loc 1 2165 0
 2339 000e 044B     		ldr	r3, .L174
 2340 0010 1B68     		ldr	r3, [r3]
 2341 0012 3B60     		str	r3, [r7]
2166:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
2167:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2168:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2169:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	return xReturn;
 2342              		.loc 1 2169 0
 2343 0014 3B68     		ldr	r3, [r7]
2170:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** }
 2344              		.loc 1 2170 0
 2345 0016 1846     		mov	r0, r3
 2346 0018 0837     		adds	r7, r7, #8
 2347              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 85


 2348 001a BD46     		mov	sp, r7
 2349              		.cfi_def_cfa_register 13
 2350              		@ sp needed
 2351 001c 80BD     		pop	{r7, pc}
 2352              	.L175:
 2353 001e 00BF     		.align	2
 2354              	.L174:
 2355 0020 04010000 		.word	xTickCount
 2356              		.cfi_endproc
 2357              	.LFE147:
 2358              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 2359              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2360              		.align	2
 2361              		.global	uxTaskGetNumberOfTasks
 2362              		.thumb
 2363              		.thumb_func
 2364              		.type	uxTaskGetNumberOfTasks, %function
 2365              	uxTaskGetNumberOfTasks:
 2366              	.LFB148:
2171:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
2172:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2173:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2174:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** {
 2367              		.loc 1 2174 0
 2368              		.cfi_startproc
 2369              		@ args = 0, pretend = 0, frame = 0
 2370              		@ frame_needed = 1, uses_anonymous_args = 0
 2371              		@ link register save eliminated.
 2372 0000 80B4     		push	{r7}
 2373              		.cfi_def_cfa_offset 4
 2374              		.cfi_offset 7, -4
 2375 0002 00AF     		add	r7, sp, #0
 2376              		.cfi_def_cfa_register 7
2175:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2176:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	BaseType_t. */
2177:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 2377              		.loc 1 2177 0
 2378 0004 034B     		ldr	r3, .L178
 2379 0006 1B68     		ldr	r3, [r3]
2178:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** }
 2380              		.loc 1 2178 0
 2381 0008 1846     		mov	r0, r3
 2382 000a BD46     		mov	sp, r7
 2383              		.cfi_def_cfa_register 13
 2384              		@ sp needed
 2385 000c 5DF8047B 		ldr	r7, [sp], #4
 2386              		.cfi_restore 7
 2387              		.cfi_def_cfa_offset 0
 2388 0010 7047     		bx	lr
 2389              	.L179:
 2390 0012 00BF     		.align	2
 2391              	.L178:
 2392 0014 00010000 		.word	uxCurrentNumberOfTasks
 2393              		.cfi_endproc
 2394              	.LFE148:
 2395              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 2396              		.section	.text.pcTaskGetName,"ax",%progbits
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 86


 2397              		.align	2
 2398              		.global	pcTaskGetName
 2399              		.thumb
 2400              		.thumb_func
 2401              		.type	pcTaskGetName, %function
 2402              	pcTaskGetName:
 2403              	.LFB149:
2179:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
2180:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2181:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2182:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** {
 2404              		.loc 1 2182 0
 2405              		.cfi_startproc
 2406              		@ args = 0, pretend = 0, frame = 16
 2407              		@ frame_needed = 1, uses_anonymous_args = 0
 2408              		@ link register save eliminated.
 2409 0000 80B4     		push	{r7}
 2410              		.cfi_def_cfa_offset 4
 2411              		.cfi_offset 7, -4
 2412 0002 85B0     		sub	sp, sp, #20
 2413              		.cfi_def_cfa_offset 24
 2414 0004 00AF     		add	r7, sp, #0
 2415              		.cfi_def_cfa_register 7
 2416 0006 7860     		str	r0, [r7, #4]
2183:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** TCB_t *pxTCB;
2184:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2185:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2186:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	queried. */
2187:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 2417              		.loc 1 2187 0
 2418 0008 7B68     		ldr	r3, [r7, #4]
 2419 000a 002B     		cmp	r3, #0
 2420 000c 02D1     		bne	.L181
 2421              		.loc 1 2187 0 is_stmt 0 discriminator 1
 2422 000e 094B     		ldr	r3, .L186
 2423 0010 1B68     		ldr	r3, [r3]
 2424 0012 00E0     		b	.L182
 2425              	.L181:
 2426              		.loc 1 2187 0 discriminator 2
 2427 0014 7B68     		ldr	r3, [r7, #4]
 2428              	.L182:
 2429              		.loc 1 2187 0 discriminator 4
 2430 0016 FB60     		str	r3, [r7, #12]
2188:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	configASSERT( pxTCB );
 2431              		.loc 1 2188 0 is_stmt 1 discriminator 4
 2432 0018 FB68     		ldr	r3, [r7, #12]
 2433 001a 002B     		cmp	r3, #0
 2434 001c 01D1     		bne	.L183
 2435              		.loc 1 2188 0 is_stmt 0 discriminator 1
 2436              		.syntax unified
 2437              	@ 2188 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 2438 001e 72B6     		 cpsid i 
 2439              	@ 0 "" 2
 2440              		.thumb
 2441              		.syntax unified
 2442              	.L184:
 2443 0020 FEE7     		b	.L184
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 87


 2444              	.L183:
2189:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2445              		.loc 1 2189 0 is_stmt 1
 2446 0022 FB68     		ldr	r3, [r7, #12]
 2447 0024 3433     		adds	r3, r3, #52
2190:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** }
 2448              		.loc 1 2190 0
 2449 0026 1846     		mov	r0, r3
 2450 0028 1437     		adds	r7, r7, #20
 2451              		.cfi_def_cfa_offset 4
 2452 002a BD46     		mov	sp, r7
 2453              		.cfi_def_cfa_register 13
 2454              		@ sp needed
 2455 002c 5DF8047B 		ldr	r7, [sp], #4
 2456              		.cfi_restore 7
 2457              		.cfi_def_cfa_offset 0
 2458 0030 7047     		bx	lr
 2459              	.L187:
 2460 0032 00BF     		.align	2
 2461              	.L186:
 2462 0034 00000000 		.word	pxCurrentTCB
 2463              		.cfi_endproc
 2464              	.LFE149:
 2465              		.size	pcTaskGetName, .-pcTaskGetName
 2466              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2467              		.align	2
 2468              		.global	xTaskIncrementTick
 2469              		.thumb
 2470              		.thumb_func
 2471              		.type	xTaskIncrementTick, %function
 2472              	xTaskIncrementTick:
 2473              	.LFB150:
2191:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
2192:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2193:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2194:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2195:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2196:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
2197:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2198:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	UBaseType_t x;
2199:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	char cNextChar;
2200:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2201:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2202:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2203:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2204:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2205:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2206:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2207:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			do
2208:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
2209:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2210:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2211:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Check each character in the name looking for a match or
2212:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mismatch. */
2213:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2214:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
2215:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 88


2216:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2217:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2218:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
2219:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						/* Characters didn't match. */
2220:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						break;
2221:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
2222:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					else if( cNextChar == 0x00 )
2223:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
2224:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						/* Both strings terminated, a match must have been
2225:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						found. */
2226:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						pxReturn = pxNextTCB;
2227:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						break;
2228:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
2229:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					else
2230:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
2231:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2232:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
2233:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
2234:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2235:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( pxReturn != NULL )
2236:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
2237:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* The handle has been found. */
2238:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					break;
2239:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
2240:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2241:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2242:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2243:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
2244:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2245:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2246:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2247:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2248:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return pxReturn;
2249:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
2250:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2251:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2252:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
2253:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2254:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2255:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2256:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2257:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
2258:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2259:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t* pxTCB;
2260:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2261:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2262:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2263:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2264:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		vTaskSuspendAll();
2265:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2266:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Search the ready lists. */
2267:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			do
2268:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
2269:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				uxQueue--;
2270:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2271:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2272:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( pxTCB != NULL )
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 89


2273:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
2274:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* Found the handle. */
2275:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					break;
2276:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
2277:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2278:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2279:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2280:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Search the delayed lists. */
2281:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( pxTCB == NULL )
2282:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
2283:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2284:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
2285:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2286:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( pxTCB == NULL )
2287:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
2288:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2289:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
2290:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2291:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2292:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
2293:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( pxTCB == NULL )
2294:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
2295:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* Search the suspended list. */
2296:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2297:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
2298:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
2299:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			#endif
2300:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2301:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2302:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
2303:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( pxTCB == NULL )
2304:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
2305:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* Search the deleted list. */
2306:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2307:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
2308:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
2309:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			#endif
2310:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2311:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		( void ) xTaskResumeAll();
2312:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2313:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2314:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
2315:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2316:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2317:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2319:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2320:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2321:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2322:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
2323:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2324:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2325:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		vTaskSuspendAll();
2326:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2327:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2328:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2329:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 90


2330:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2331:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				task in the Ready state. */
2332:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				do
2333:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
2334:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					uxQueue--;
2335:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2336:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2337:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2338:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2339:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2340:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				task in the Blocked state. */
2341:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2342:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2343:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2344:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2345:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
2346:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2347:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2348:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2349:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
2350:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				#endif
2351:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2352:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2353:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
2354:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2355:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					each task in the Suspended state. */
2356:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2357:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
2358:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				#endif
2359:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2360:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2361:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
2362:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2363:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
2364:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2365:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2366:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						#else
2367:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2368:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						#endif
2369:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
2370:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
2371:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				#else
2372:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
2373:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2374:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
2375:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						*pulTotalRunTime = 0;
2376:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
2377:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
2378:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				#endif
2379:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
2380:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
2381:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
2382:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2383:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
2384:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2385:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		( void ) xTaskResumeAll();
2386:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 91


2387:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return uxTask;
2388:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
2389:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2390:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2391:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*----------------------------------------------------------*/
2392:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2393:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2394:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2395:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2396:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
2397:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2398:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2399:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2400:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return xIdleTaskHandle;
2401:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
2402:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2403:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2404:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*----------------------------------------------------------*/
2405:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2406:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2407:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2408:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2409:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 1. */
2410:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2411:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2412:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2413:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
2414:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2415:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2416:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		each stepped tick. */
2417:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2418:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		xTickCount += xTicksToJump;
2419:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2420:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
2421:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2422:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2423:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*----------------------------------------------------------*/
2424:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2425:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2426:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2427:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2428:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
2429:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2430:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
2431:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2432:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		configASSERT( pxTCB );
2433:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2434:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		vTaskSuspendAll();
2435:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2436:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2437:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			it is actually in the Blocked state. */
2438:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2439:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
2440:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2441:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2442:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				scheduler is suspended. */
2443:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 92


2444:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2445:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2446:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2447:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2448:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				is used. */
2449:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				taskENTER_CRITICAL();
2450:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
2451:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2452:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
2453:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2454:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2455:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
2456:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					else
2457:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
2458:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2459:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
2460:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
2461:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				taskEXIT_CRITICAL();
2462:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2463:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2464:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2465:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2466:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2467:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				switch if preemption is turned off. */
2468:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2469:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
2470:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2471:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					performed if the unblocked task has a priority that is
2472:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					equal to or higher than the currently executing task. */
2473:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2474:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
2475:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2476:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						is unsuspended. */
2477:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						xYieldPending = pdTRUE;
2478:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
2479:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					else
2480:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
2481:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2482:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
2483:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
2484:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2485:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
2486:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
2487:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
2488:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2489:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
2490:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2491:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		xTaskResumeAll();
2492:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2493:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return xReturn;
2494:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
2495:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2496:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2497:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*----------------------------------------------------------*/
2498:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2499:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2500:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** {
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 93


 2474              		.loc 1 2500 0
 2475              		.cfi_startproc
 2476              		@ args = 0, pretend = 0, frame = 24
 2477              		@ frame_needed = 1, uses_anonymous_args = 0
 2478 0000 80B5     		push	{r7, lr}
 2479              		.cfi_def_cfa_offset 8
 2480              		.cfi_offset 7, -8
 2481              		.cfi_offset 14, -4
 2482 0002 86B0     		sub	sp, sp, #24
 2483              		.cfi_def_cfa_offset 32
 2484 0004 00AF     		add	r7, sp, #0
 2485              		.cfi_def_cfa_register 7
2501:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** TCB_t * pxTCB;
2502:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** TickType_t xItemValue;
2503:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 2486              		.loc 1 2503 0
 2487 0006 0023     		movs	r3, #0
 2488 0008 7B61     		str	r3, [r7, #20]
2504:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2505:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2506:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2507:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	tasks to be unblocked. */
2508:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2509:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2489              		.loc 1 2509 0
 2490 000a 454B     		ldr	r3, .L205
 2491 000c 1B68     		ldr	r3, [r3]
 2492 000e 002B     		cmp	r3, #0
 2493 0010 75D1     		bne	.L189
 2494              	.LBB29:
2510:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
2511:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2512:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		block. */
2513:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + 1;
 2495              		.loc 1 2513 0
 2496 0012 444B     		ldr	r3, .L205+4
 2497 0014 1B68     		ldr	r3, [r3]
 2498 0016 0133     		adds	r3, r3, #1
 2499 0018 3B61     		str	r3, [r7, #16]
2514:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2515:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2516:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		delayed lists if it wraps to 0. */
2517:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		xTickCount = xConstTickCount;
 2500              		.loc 1 2517 0
 2501 001a 424A     		ldr	r2, .L205+4
 2502 001c 3B69     		ldr	r3, [r7, #16]
 2503 001e 1360     		str	r3, [r2]
2518:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2519:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U )
 2504              		.loc 1 2519 0
 2505 0020 3B69     		ldr	r3, [r7, #16]
 2506 0022 002B     		cmp	r3, #0
 2507 0024 17D1     		bne	.L190
 2508              	.LBB30:
2520:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2521:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 2509              		.loc 1 2521 0
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 94


 2510 0026 404B     		ldr	r3, .L205+8
 2511 0028 1B68     		ldr	r3, [r3]
 2512 002a 1B68     		ldr	r3, [r3]
 2513 002c 002B     		cmp	r3, #0
 2514 002e 01D0     		beq	.L191
 2515              		.loc 1 2521 0 is_stmt 0 discriminator 1
 2516              		.syntax unified
 2517              	@ 2521 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 2518 0030 72B6     		 cpsid i 
 2519              	@ 0 "" 2
 2520              		.thumb
 2521              		.syntax unified
 2522              	.L192:
 2523 0032 FEE7     		b	.L192
 2524              	.L191:
 2525              		.loc 1 2521 0 discriminator 2
 2526 0034 3C4B     		ldr	r3, .L205+8
 2527 0036 1B68     		ldr	r3, [r3]
 2528 0038 FB60     		str	r3, [r7, #12]
 2529 003a 3C4B     		ldr	r3, .L205+12
 2530 003c 1B68     		ldr	r3, [r3]
 2531 003e 3A4A     		ldr	r2, .L205+8
 2532 0040 1360     		str	r3, [r2]
 2533 0042 3A4A     		ldr	r2, .L205+12
 2534 0044 FB68     		ldr	r3, [r7, #12]
 2535 0046 1360     		str	r3, [r2]
 2536 0048 394B     		ldr	r3, .L205+16
 2537 004a 1B68     		ldr	r3, [r3]
 2538 004c 0133     		adds	r3, r3, #1
 2539 004e 384A     		ldr	r2, .L205+16
 2540 0050 1360     		str	r3, [r2]
 2541 0052 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2542              	.L190:
 2543              	.LBE30:
2522:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2523:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
2524:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2525:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2526:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2527:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2528:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2529:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2530:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2531:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		look any further down the list. */
2532:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 2544              		.loc 1 2532 0 is_stmt 1
 2545 0056 374B     		ldr	r3, .L205+20
 2546 0058 1B68     		ldr	r3, [r3]
 2547 005a 3A69     		ldr	r2, [r7, #16]
 2548 005c 9A42     		cmp	r2, r3
 2549 005e 53D3     		bcc	.L202
 2550              	.L201:
2533:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2534:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			for( ;; )
2535:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
2536:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2551              		.loc 1 2536 0
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 95


 2552 0060 314B     		ldr	r3, .L205+8
 2553 0062 1B68     		ldr	r3, [r3]
 2554 0064 1B68     		ldr	r3, [r3]
 2555 0066 002B     		cmp	r3, #0
 2556 0068 01D1     		bne	.L194
 2557              		.loc 1 2536 0 is_stmt 0 discriminator 1
 2558 006a 0123     		movs	r3, #1
 2559 006c 00E0     		b	.L195
 2560              	.L194:
 2561              		.loc 1 2536 0 discriminator 2
 2562 006e 0023     		movs	r3, #0
 2563              	.L195:
 2564              		.loc 1 2536 0 discriminator 4
 2565 0070 002B     		cmp	r3, #0
 2566 0072 04D0     		beq	.L196
2537:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
2538:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2539:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					to the maximum possible value so it is extremely
2540:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					unlikely that the
2541:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2542:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					next time through. */
2543:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 2567              		.loc 1 2543 0 is_stmt 1
 2568 0074 2F4B     		ldr	r3, .L205+20
 2569 0076 4FF0FF32 		mov	r2, #-1
 2570 007a 1A60     		str	r2, [r3]
2544:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					break;
 2571              		.loc 1 2544 0
 2572 007c 44E0     		b	.L202
 2573              	.L196:
2545:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
2546:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else
2547:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
2548:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2549:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2550:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					at which the task at the head of the delayed list must
2551:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					be removed from the Blocked state. */
2552:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 2574              		.loc 1 2552 0
 2575 007e 2A4B     		ldr	r3, .L205+8
 2576 0080 1B68     		ldr	r3, [r3]
 2577 0082 DB68     		ldr	r3, [r3, #12]
 2578 0084 DB68     		ldr	r3, [r3, #12]
 2579 0086 BB60     		str	r3, [r7, #8]
2553:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2580              		.loc 1 2553 0
 2581 0088 BB68     		ldr	r3, [r7, #8]
 2582 008a 5B68     		ldr	r3, [r3, #4]
 2583 008c 7B60     		str	r3, [r7, #4]
2554:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2555:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					if( xConstTickCount < xItemValue )
 2584              		.loc 1 2555 0
 2585 008e 3A69     		ldr	r2, [r7, #16]
 2586 0090 7B68     		ldr	r3, [r7, #4]
 2587 0092 9A42     		cmp	r2, r3
 2588 0094 03D2     		bcs	.L197
2556:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 96


2557:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2558:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						item value is the time at which the task at the head
2559:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2560:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						state -	so record the item value in
2561:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						xNextTaskUnblockTime. */
2562:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 2589              		.loc 1 2562 0
 2590 0096 274A     		ldr	r2, .L205+20
 2591 0098 7B68     		ldr	r3, [r7, #4]
 2592 009a 1360     		str	r3, [r2]
2563:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						break;
 2593              		.loc 1 2563 0
 2594 009c 34E0     		b	.L202
 2595              	.L197:
2564:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
2565:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					else
2566:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
2567:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2568:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
2569:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2570:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2571:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2596              		.loc 1 2571 0
 2597 009e BB68     		ldr	r3, [r7, #8]
 2598 00a0 0433     		adds	r3, r3, #4
 2599 00a2 1846     		mov	r0, r3
 2600 00a4 FFF7FEFF 		bl	uxListRemove
2572:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2573:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2574:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					it from the event list. */
2575:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 2601              		.loc 1 2575 0
 2602 00a8 BB68     		ldr	r3, [r7, #8]
 2603 00aa 9B6A     		ldr	r3, [r3, #40]
 2604 00ac 002B     		cmp	r3, #0
 2605 00ae 04D0     		beq	.L198
2576:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
2577:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2606              		.loc 1 2577 0
 2607 00b0 BB68     		ldr	r3, [r7, #8]
 2608 00b2 1833     		adds	r3, r3, #24
 2609 00b4 1846     		mov	r0, r3
 2610 00b6 FFF7FEFF 		bl	uxListRemove
 2611              	.L198:
2578:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
2579:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					else
2580:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
2581:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2582:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
2583:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2584:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2585:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					list. */
2586:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2612              		.loc 1 2586 0
 2613 00ba BB68     		ldr	r3, [r7, #8]
 2614 00bc DA6A     		ldr	r2, [r3, #44]
 2615 00be 1E4B     		ldr	r3, .L205+24
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 97


 2616 00c0 1B68     		ldr	r3, [r3]
 2617 00c2 9A42     		cmp	r2, r3
 2618 00c4 03D9     		bls	.L199
 2619              		.loc 1 2586 0 is_stmt 0 discriminator 1
 2620 00c6 BB68     		ldr	r3, [r7, #8]
 2621 00c8 DB6A     		ldr	r3, [r3, #44]
 2622 00ca 1B4A     		ldr	r2, .L205+24
 2623 00cc 1360     		str	r3, [r2]
 2624              	.L199:
 2625              		.loc 1 2586 0 discriminator 3
 2626 00ce BB68     		ldr	r3, [r7, #8]
 2627 00d0 DA6A     		ldr	r2, [r3, #44]
 2628 00d2 1346     		mov	r3, r2
 2629 00d4 9B00     		lsls	r3, r3, #2
 2630 00d6 1344     		add	r3, r3, r2
 2631 00d8 9B00     		lsls	r3, r3, #2
 2632 00da 184A     		ldr	r2, .L205+28
 2633 00dc 1A44     		add	r2, r2, r3
 2634 00de BB68     		ldr	r3, [r7, #8]
 2635 00e0 0433     		adds	r3, r3, #4
 2636 00e2 1946     		mov	r1, r3
 2637 00e4 1046     		mov	r0, r2
 2638 00e6 FFF7FEFF 		bl	vListInsertEnd
2587:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2588:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2589:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					context switch if preemption is turned off. */
2590:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2591:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
2592:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						/* Preemption is on, but a context switch should
2593:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						only be performed if the unblocked task has a
2594:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						priority that is equal to or higher than the
2595:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						currently executing task. */
2596:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2639              		.loc 1 2596 0 is_stmt 1 discriminator 3
 2640 00ea BB68     		ldr	r3, [r7, #8]
 2641 00ec DA6A     		ldr	r2, [r3, #44]
 2642 00ee 144B     		ldr	r3, .L205+32
 2643 00f0 1B68     		ldr	r3, [r3]
 2644 00f2 DB6A     		ldr	r3, [r3, #44]
 2645 00f4 9A42     		cmp	r2, r3
 2646 00f6 B3D3     		bcc	.L201
2597:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						{
2598:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 							xSwitchRequired = pdTRUE;
 2647              		.loc 1 2598 0
 2648 00f8 0123     		movs	r3, #1
 2649 00fa 7B61     		str	r3, [r7, #20]
2599:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						}
2600:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						else
2601:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						{
2602:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2603:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						}
2604:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
2605:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2606:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
2607:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
 2650              		.loc 1 2607 0
 2651 00fc B0E7     		b	.L201
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 98


 2652              	.L189:
 2653              	.LBE29:
2608:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2609:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2610:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2611:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2612:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2613:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2614:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2615:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2616:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
2617:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2618:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
2619:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
2620:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
2621:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2622:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
2623:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2624:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2625:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2626:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2627:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2628:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2629:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2630:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2631:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
2632:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				vApplicationTickHook();
2633:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
2634:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
2635:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
2636:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2637:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
2638:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2639:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2640:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
2641:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	else
2642:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
2643:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		++uxPendedTicks;
 2654              		.loc 1 2643 0
 2655 00fe 114B     		ldr	r3, .L205+36
 2656 0100 1B68     		ldr	r3, [r3]
 2657 0102 0133     		adds	r3, r3, #1
 2658 0104 0F4A     		ldr	r2, .L205+36
 2659 0106 1360     		str	r3, [r2]
 2660              	.L202:
2644:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2645:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2646:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		scheduler is locked. */
2647:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2648:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2649:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			vApplicationTickHook();
2650:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2651:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#endif
2652:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
2653:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2654:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2655:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 99


2656:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( xYieldPending != pdFALSE )
 2661              		.loc 1 2656 0
 2662 0108 0F4B     		ldr	r3, .L205+40
 2663 010a 1B68     		ldr	r3, [r3]
 2664 010c 002B     		cmp	r3, #0
 2665 010e 01D0     		beq	.L203
2657:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2658:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xSwitchRequired = pdTRUE;
 2666              		.loc 1 2658 0
 2667 0110 0123     		movs	r3, #1
 2668 0112 7B61     		str	r3, [r7, #20]
 2669              	.L203:
2659:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2660:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
2661:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2662:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2663:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2664:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
2665:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2666:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2667:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	return xSwitchRequired;
 2670              		.loc 1 2667 0
 2671 0114 7B69     		ldr	r3, [r7, #20]
2668:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** }
 2672              		.loc 1 2668 0
 2673 0116 1846     		mov	r0, r3
 2674 0118 1837     		adds	r7, r7, #24
 2675              		.cfi_def_cfa_offset 8
 2676 011a BD46     		mov	sp, r7
 2677              		.cfi_def_cfa_register 13
 2678              		@ sp needed
 2679 011c 80BD     		pop	{r7, pc}
 2680              	.L206:
 2681 011e 00BF     		.align	2
 2682              	.L205:
 2683 0120 28010000 		.word	uxSchedulerSuspended
 2684 0124 04010000 		.word	xTickCount
 2685 0128 B8000000 		.word	pxDelayedTaskList
 2686 012c BC000000 		.word	pxOverflowDelayedTaskList
 2687 0130 18010000 		.word	xNumOfOverflows
 2688 0134 20010000 		.word	xNextTaskUnblockTime
 2689 0138 08010000 		.word	uxTopReadyPriority
 2690 013c 04000000 		.word	pxReadyTasksLists
 2691 0140 00000000 		.word	pxCurrentTCB
 2692 0144 10010000 		.word	uxPendedTicks
 2693 0148 14010000 		.word	xYieldPending
 2694              		.cfi_endproc
 2695              	.LFE150:
 2696              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 2697              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2698              		.align	2
 2699              		.global	vTaskSwitchContext
 2700              		.thumb
 2701              		.thumb_func
 2702              		.type	vTaskSwitchContext, %function
 2703              	vTaskSwitchContext:
 2704              	.LFB151:
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 100


2669:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
2670:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2671:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2672:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2673:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2674:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
2675:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t *xTCB;
2676:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2677:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2678:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		getting set. */
2679:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( xTask == NULL )
2680:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2681:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2682:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2683:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
2684:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2685:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2686:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2687:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2688:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2689:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		the value can be accessed from an interrupt. */
2690:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		taskENTER_CRITICAL();
2691:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2692:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		taskEXIT_CRITICAL();
2693:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
2694:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2695:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2696:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
2697:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2698:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2699:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2700:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2701:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
2702:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t *xTCB;
2703:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TaskHookFunction_t xReturn;
2704:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2705:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2706:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( xTask == NULL )
2707:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2708:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2709:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2710:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
2711:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2712:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2713:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2714:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2715:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2716:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		the value can be accessed from an interrupt. */
2717:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		taskENTER_CRITICAL();
2718:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2719:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2720:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2721:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		taskEXIT_CRITICAL();
2722:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2723:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return xReturn;
2724:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
2725:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 101


2726:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2727:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
2728:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2729:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2730:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2731:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2732:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
2733:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t *xTCB;
2734:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	BaseType_t xReturn;
2735:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2736:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2737:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( xTask == NULL )
2738:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2739:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2740:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2741:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
2742:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2743:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2744:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2745:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2746:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2747:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2748:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2749:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2750:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
2751:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2752:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xReturn = pdFAIL;
2753:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2754:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2755:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return xReturn;
2756:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
2757:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2758:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2759:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
2760:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2761:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** void vTaskSwitchContext( void )
2762:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** {
 2705              		.loc 1 2762 0
 2706              		.cfi_startproc
 2707              		@ args = 0, pretend = 0, frame = 16
 2708              		@ frame_needed = 1, uses_anonymous_args = 0
 2709 0000 80B5     		push	{r7, lr}
 2710              		.cfi_def_cfa_offset 8
 2711              		.cfi_offset 7, -8
 2712              		.cfi_offset 14, -4
 2713 0002 84B0     		sub	sp, sp, #16
 2714              		.cfi_def_cfa_offset 24
 2715 0004 00AF     		add	r7, sp, #0
 2716              		.cfi_def_cfa_register 7
2763:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2717              		.loc 1 2763 0
 2718 0006 364B     		ldr	r3, .L218
 2719 0008 1B68     		ldr	r3, [r3]
 2720 000a 002B     		cmp	r3, #0
 2721 000c 03D0     		beq	.L208
2764:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
2765:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 102


2766:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		switch. */
2767:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		xYieldPending = pdTRUE;
 2722              		.loc 1 2767 0
 2723 000e 354B     		ldr	r3, .L218+4
 2724 0010 0122     		movs	r2, #1
 2725 0012 1A60     		str	r2, [r3]
2768:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
2769:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	else
2770:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
2771:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		xYieldPending = pdFALSE;
2772:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2773:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2774:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2775:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2776:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2777:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2778:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				#else
2779:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2780:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				#endif
2781:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2782:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2783:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2784:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2785:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				protection here so count values are only valid until the timer
2786:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2787:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				against suspect run time stat counter implementations - which
2788:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				are provided by the application, not the kernel. */
2789:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2790:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
2791:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2792:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
2793:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else
2794:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
2795:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2796:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
2797:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2798:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2799:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2800:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2801:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2802:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{																									\
2803:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		const uint32_t * const pulStack = ( uint32_t * ) pxCurrentTCB->pxStack;							\
2804:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		const uint32_t ulCheckValue = ( uint32_t ) 0xa5a5a5a5;											\
2805:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 																										\
2806:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( ( pulStack[ 0 ] != ulCheckValue ) ||												\
2807:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			( pulStack[ 1 ] != ulCheckValue ) ||												\
2808:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			( pulStack[ 2 ] != ulCheckValue ) ||												\
2809:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			( pulStack[ 3 ] != ulCheckValue ) )												\
2810:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{																								\
2811:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			vApplicationStackOverflowHook( ( TaskHandle_t ) pxCurrentTCB, pxCurrentTCB->pcTaskName );	\
2812:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}																								\
2813:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
2814:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2815:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2816:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		optimised asm code. */
2817:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2818:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 103


2819:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2820:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2821:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2822:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2823:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			structure specific to this task. */
2824:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2825:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2826:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2827:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
2828:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** }
 2726              		.loc 1 2828 0
 2727 0014 5FE0     		b	.L217
 2728              	.L208:
2771:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2729              		.loc 1 2771 0
 2730 0016 334B     		ldr	r3, .L218+4
 2731 0018 0022     		movs	r2, #0
 2732 001a 1A60     		str	r2, [r3]
 2733              	.LBB31:
2803:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		const uint32_t ulCheckValue = ( uint32_t ) 0xa5a5a5a5;											\
 2734              		.loc 1 2803 0
 2735 001c 324B     		ldr	r3, .L218+8
 2736 001e 1B68     		ldr	r3, [r3]
 2737 0020 1B6B     		ldr	r3, [r3, #48]
 2738 0022 BB60     		str	r3, [r7, #8]
2804:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 																										\
 2739              		.loc 1 2804 0
 2740 0024 4FF0A533 		mov	r3, #-1515870811
 2741 0028 7B60     		str	r3, [r7, #4]
2806:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			( pulStack[ 1 ] != ulCheckValue ) ||												\
 2742              		.loc 1 2806 0
 2743 002a BB68     		ldr	r3, [r7, #8]
 2744 002c 1A68     		ldr	r2, [r3]
 2745 002e 7B68     		ldr	r3, [r7, #4]
 2746 0030 9A42     		cmp	r2, r3
 2747 0032 11D1     		bne	.L210
2807:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			( pulStack[ 2 ] != ulCheckValue ) ||												\
 2748              		.loc 1 2807 0 discriminator 1
 2749 0034 BB68     		ldr	r3, [r7, #8]
 2750 0036 0433     		adds	r3, r3, #4
 2751 0038 1A68     		ldr	r2, [r3]
2806:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			( pulStack[ 1 ] != ulCheckValue ) ||												\
 2752              		.loc 1 2806 0 discriminator 1
 2753 003a 7B68     		ldr	r3, [r7, #4]
 2754 003c 9A42     		cmp	r2, r3
 2755 003e 0BD1     		bne	.L210
2808:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			( pulStack[ 3 ] != ulCheckValue ) )												\
 2756              		.loc 1 2808 0
 2757 0040 BB68     		ldr	r3, [r7, #8]
 2758 0042 0833     		adds	r3, r3, #8
 2759 0044 1A68     		ldr	r2, [r3]
2807:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			( pulStack[ 2 ] != ulCheckValue ) ||												\
 2760              		.loc 1 2807 0
 2761 0046 7B68     		ldr	r3, [r7, #4]
 2762 0048 9A42     		cmp	r2, r3
 2763 004a 05D1     		bne	.L210
2809:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{																								\
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 104


 2764              		.loc 1 2809 0
 2765 004c BB68     		ldr	r3, [r7, #8]
 2766 004e 0C33     		adds	r3, r3, #12
 2767 0050 1A68     		ldr	r2, [r3]
2808:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			( pulStack[ 3 ] != ulCheckValue ) )												\
 2768              		.loc 1 2808 0
 2769 0052 7B68     		ldr	r3, [r7, #4]
 2770 0054 9A42     		cmp	r2, r3
 2771 0056 08D0     		beq	.L211
 2772              	.L210:
2811:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}																								\
 2773              		.loc 1 2811 0
 2774 0058 234B     		ldr	r3, .L218+8
 2775 005a 1A68     		ldr	r2, [r3]
 2776 005c 224B     		ldr	r3, .L218+8
 2777 005e 1B68     		ldr	r3, [r3]
 2778 0060 3433     		adds	r3, r3, #52
 2779 0062 1946     		mov	r1, r3
 2780 0064 1046     		mov	r0, r2
 2781 0066 FFF7FEFF 		bl	vApplicationStackOverflowHook
 2782              	.L211:
 2783              	.LBE31:
 2784              	.LBB32:
2817:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2785              		.loc 1 2817 0
 2786 006a 204B     		ldr	r3, .L218+12
 2787 006c 1B68     		ldr	r3, [r3]
 2788 006e FB60     		str	r3, [r7, #12]
 2789 0070 07E0     		b	.L212
 2790              	.L215:
2817:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2791              		.loc 1 2817 0 is_stmt 0 discriminator 5
 2792 0072 FB68     		ldr	r3, [r7, #12]
 2793 0074 002B     		cmp	r3, #0
 2794 0076 01D1     		bne	.L213
2817:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2795              		.loc 1 2817 0 discriminator 2
 2796              		.syntax unified
 2797              	@ 2817 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 2798 0078 72B6     		 cpsid i 
 2799              	@ 0 "" 2
 2800              		.thumb
 2801              		.syntax unified
 2802              	.L214:
2817:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2803              		.loc 1 2817 0 discriminator 1
 2804 007a FEE7     		b	.L214
 2805              	.L213:
2817:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2806              		.loc 1 2817 0 discriminator 3
 2807 007c FB68     		ldr	r3, [r7, #12]
 2808 007e 013B     		subs	r3, r3, #1
 2809 0080 FB60     		str	r3, [r7, #12]
 2810              	.L212:
2817:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2811              		.loc 1 2817 0 discriminator 4
 2812 0082 1B49     		ldr	r1, .L218+16
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 105


 2813 0084 FA68     		ldr	r2, [r7, #12]
 2814 0086 1346     		mov	r3, r2
 2815 0088 9B00     		lsls	r3, r3, #2
 2816 008a 1344     		add	r3, r3, r2
 2817 008c 9B00     		lsls	r3, r3, #2
 2818 008e 0B44     		add	r3, r3, r1
 2819 0090 1B68     		ldr	r3, [r3]
 2820 0092 002B     		cmp	r3, #0
 2821 0094 EDD0     		beq	.L215
 2822              	.LBB33:
2817:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2823              		.loc 1 2817 0 discriminator 6
 2824 0096 FA68     		ldr	r2, [r7, #12]
 2825 0098 1346     		mov	r3, r2
 2826 009a 9B00     		lsls	r3, r3, #2
 2827 009c 1344     		add	r3, r3, r2
 2828 009e 9B00     		lsls	r3, r3, #2
 2829 00a0 134A     		ldr	r2, .L218+16
 2830 00a2 1344     		add	r3, r3, r2
 2831 00a4 3B60     		str	r3, [r7]
 2832 00a6 3B68     		ldr	r3, [r7]
 2833 00a8 5B68     		ldr	r3, [r3, #4]
 2834 00aa 5A68     		ldr	r2, [r3, #4]
 2835 00ac 3B68     		ldr	r3, [r7]
 2836 00ae 5A60     		str	r2, [r3, #4]
 2837 00b0 3B68     		ldr	r3, [r7]
 2838 00b2 5A68     		ldr	r2, [r3, #4]
 2839 00b4 3B68     		ldr	r3, [r7]
 2840 00b6 0833     		adds	r3, r3, #8
 2841 00b8 9A42     		cmp	r2, r3
 2842 00ba 04D1     		bne	.L216
2817:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2843              		.loc 1 2817 0 discriminator 7
 2844 00bc 3B68     		ldr	r3, [r7]
 2845 00be 5B68     		ldr	r3, [r3, #4]
 2846 00c0 5A68     		ldr	r2, [r3, #4]
 2847 00c2 3B68     		ldr	r3, [r7]
 2848 00c4 5A60     		str	r2, [r3, #4]
 2849              	.L216:
2817:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2850              		.loc 1 2817 0 discriminator 9
 2851 00c6 3B68     		ldr	r3, [r7]
 2852 00c8 5B68     		ldr	r3, [r3, #4]
 2853 00ca DB68     		ldr	r3, [r3, #12]
 2854 00cc 064A     		ldr	r2, .L218+8
 2855 00ce 1360     		str	r3, [r2]
 2856              	.LBE33:
 2857 00d0 064A     		ldr	r2, .L218+12
 2858 00d2 FB68     		ldr	r3, [r7, #12]
 2859 00d4 1360     		str	r3, [r2]
 2860              	.L217:
 2861              	.LBE32:
 2862              		.loc 1 2828 0 is_stmt 1
 2863 00d6 00BF     		nop
 2864 00d8 1037     		adds	r7, r7, #16
 2865              		.cfi_def_cfa_offset 8
 2866 00da BD46     		mov	sp, r7
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 106


 2867              		.cfi_def_cfa_register 13
 2868              		@ sp needed
 2869 00dc 80BD     		pop	{r7, pc}
 2870              	.L219:
 2871 00de 00BF     		.align	2
 2872              	.L218:
 2873 00e0 28010000 		.word	uxSchedulerSuspended
 2874 00e4 14010000 		.word	xYieldPending
 2875 00e8 00000000 		.word	pxCurrentTCB
 2876 00ec 08010000 		.word	uxTopReadyPriority
 2877 00f0 04000000 		.word	pxReadyTasksLists
 2878              		.cfi_endproc
 2879              	.LFE151:
 2880              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2881              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2882              		.align	2
 2883              		.global	vTaskPlaceOnEventList
 2884              		.thumb
 2885              		.thumb_func
 2886              		.type	vTaskPlaceOnEventList, %function
 2887              	vTaskPlaceOnEventList:
 2888              	.LFB152:
2829:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
2830:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2831:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2832:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** {
 2889              		.loc 1 2832 0
 2890              		.cfi_startproc
 2891              		@ args = 0, pretend = 0, frame = 8
 2892              		@ frame_needed = 1, uses_anonymous_args = 0
 2893 0000 80B5     		push	{r7, lr}
 2894              		.cfi_def_cfa_offset 8
 2895              		.cfi_offset 7, -8
 2896              		.cfi_offset 14, -4
 2897 0002 82B0     		sub	sp, sp, #8
 2898              		.cfi_def_cfa_offset 16
 2899 0004 00AF     		add	r7, sp, #0
 2900              		.cfi_def_cfa_register 7
 2901 0006 7860     		str	r0, [r7, #4]
 2902 0008 3960     		str	r1, [r7]
2833:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	configASSERT( pxEventList );
 2903              		.loc 1 2833 0
 2904 000a 7B68     		ldr	r3, [r7, #4]
 2905 000c 002B     		cmp	r3, #0
 2906 000e 01D1     		bne	.L221
 2907              		.loc 1 2833 0 is_stmt 0 discriminator 1
 2908              		.syntax unified
 2909              	@ 2833 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 2910 0010 72B6     		 cpsid i 
 2911              	@ 0 "" 2
 2912              		.thumb
 2913              		.syntax unified
 2914              	.L222:
 2915 0012 FEE7     		b	.L222
 2916              	.L221:
2834:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2835:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 107


2836:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2837:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2838:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2839:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2840:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2841:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2842:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 2917              		.loc 1 2842 0 is_stmt 1
 2918 0014 074B     		ldr	r3, .L223
 2919 0016 1B68     		ldr	r3, [r3]
 2920 0018 1833     		adds	r3, r3, #24
 2921 001a 1946     		mov	r1, r3
 2922 001c 7868     		ldr	r0, [r7, #4]
 2923 001e FFF7FEFF 		bl	vListInsert
2843:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2844:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 2924              		.loc 1 2844 0
 2925 0022 0121     		movs	r1, #1
 2926 0024 3868     		ldr	r0, [r7]
 2927 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
2845:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** }
 2928              		.loc 1 2845 0
 2929 002a 00BF     		nop
 2930 002c 0837     		adds	r7, r7, #8
 2931              		.cfi_def_cfa_offset 8
 2932 002e BD46     		mov	sp, r7
 2933              		.cfi_def_cfa_register 13
 2934              		@ sp needed
 2935 0030 80BD     		pop	{r7, pc}
 2936              	.L224:
 2937 0032 00BF     		.align	2
 2938              	.L223:
 2939 0034 00000000 		.word	pxCurrentTCB
 2940              		.cfi_endproc
 2941              	.LFE152:
 2942              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 2943              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2944              		.align	2
 2945              		.global	vTaskPlaceOnUnorderedEventList
 2946              		.thumb
 2947              		.thumb_func
 2948              		.type	vTaskPlaceOnUnorderedEventList, %function
 2949              	vTaskPlaceOnUnorderedEventList:
 2950              	.LFB153:
2846:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
2847:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2848:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2849:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** {
 2951              		.loc 1 2849 0
 2952              		.cfi_startproc
 2953              		@ args = 0, pretend = 0, frame = 16
 2954              		@ frame_needed = 1, uses_anonymous_args = 0
 2955 0000 80B5     		push	{r7, lr}
 2956              		.cfi_def_cfa_offset 8
 2957              		.cfi_offset 7, -8
 2958              		.cfi_offset 14, -4
 2959 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 108


 2960              		.cfi_def_cfa_offset 24
 2961 0004 00AF     		add	r7, sp, #0
 2962              		.cfi_def_cfa_register 7
 2963 0006 F860     		str	r0, [r7, #12]
 2964 0008 B960     		str	r1, [r7, #8]
 2965 000a 7A60     		str	r2, [r7, #4]
2850:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	configASSERT( pxEventList );
 2966              		.loc 1 2850 0
 2967 000c FB68     		ldr	r3, [r7, #12]
 2968 000e 002B     		cmp	r3, #0
 2969 0010 01D1     		bne	.L226
 2970              		.loc 1 2850 0 is_stmt 0 discriminator 1
 2971              		.syntax unified
 2972              	@ 2850 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 2973 0012 72B6     		 cpsid i 
 2974              	@ 0 "" 2
 2975              		.thumb
 2976              		.syntax unified
 2977              	.L227:
 2978 0014 FEE7     		b	.L227
 2979              	.L226:
2851:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2852:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2853:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	the event groups implementation. */
2854:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 2980              		.loc 1 2854 0 is_stmt 1
 2981 0016 0D4B     		ldr	r3, .L230
 2982 0018 1B68     		ldr	r3, [r3]
 2983 001a 002B     		cmp	r3, #0
 2984 001c 01D1     		bne	.L228
 2985              		.loc 1 2854 0 is_stmt 0 discriminator 1
 2986              		.syntax unified
 2987              	@ 2854 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 2988 001e 72B6     		 cpsid i 
 2989              	@ 0 "" 2
 2990              		.thumb
 2991              		.syntax unified
 2992              	.L229:
 2993              		.loc 1 2854 0 discriminator 2
 2994 0020 FEE7     		b	.L229
 2995              	.L228:
2855:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2856:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2857:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2858:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	task that is not in the Blocked state. */
2859:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 2996              		.loc 1 2859 0 is_stmt 1
 2997 0022 0B4B     		ldr	r3, .L230+4
 2998 0024 1B68     		ldr	r3, [r3]
 2999 0026 BA68     		ldr	r2, [r7, #8]
 3000 0028 42F00042 		orr	r2, r2, #-2147483648
 3001 002c 9A61     		str	r2, [r3, #24]
2860:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2861:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2862:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2863:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2864:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 109


2865:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	the task level). */
2866:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3002              		.loc 1 2866 0
 3003 002e 084B     		ldr	r3, .L230+4
 3004 0030 1B68     		ldr	r3, [r3]
 3005 0032 1833     		adds	r3, r3, #24
 3006 0034 1946     		mov	r1, r3
 3007 0036 F868     		ldr	r0, [r7, #12]
 3008 0038 FFF7FEFF 		bl	vListInsertEnd
2867:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2868:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3009              		.loc 1 2868 0
 3010 003c 0121     		movs	r1, #1
 3011 003e 7868     		ldr	r0, [r7, #4]
 3012 0040 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
2869:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** }
 3013              		.loc 1 2869 0
 3014 0044 00BF     		nop
 3015 0046 1037     		adds	r7, r7, #16
 3016              		.cfi_def_cfa_offset 8
 3017 0048 BD46     		mov	sp, r7
 3018              		.cfi_def_cfa_register 13
 3019              		@ sp needed
 3020 004a 80BD     		pop	{r7, pc}
 3021              	.L231:
 3022              		.align	2
 3023              	.L230:
 3024 004c 28010000 		.word	uxSchedulerSuspended
 3025 0050 00000000 		.word	pxCurrentTCB
 3026              		.cfi_endproc
 3027              	.LFE153:
 3028              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 3029              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 3030              		.align	2
 3031              		.global	vTaskPlaceOnEventListRestricted
 3032              		.thumb
 3033              		.thumb_func
 3034              		.type	vTaskPlaceOnEventListRestricted, %function
 3035              	vTaskPlaceOnEventListRestricted:
 3036              	.LFB154:
2870:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
2871:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2872:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2873:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2874:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2875:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 3037              		.loc 1 2875 0
 3038              		.cfi_startproc
 3039              		@ args = 0, pretend = 0, frame = 16
 3040              		@ frame_needed = 1, uses_anonymous_args = 0
 3041 0000 80B5     		push	{r7, lr}
 3042              		.cfi_def_cfa_offset 8
 3043              		.cfi_offset 7, -8
 3044              		.cfi_offset 14, -4
 3045 0002 84B0     		sub	sp, sp, #16
 3046              		.cfi_def_cfa_offset 24
 3047 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 110


 3048              		.cfi_def_cfa_register 7
 3049 0006 F860     		str	r0, [r7, #12]
 3050 0008 B960     		str	r1, [r7, #8]
 3051 000a 7A60     		str	r2, [r7, #4]
2876:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		configASSERT( pxEventList );
 3052              		.loc 1 2876 0
 3053 000c FB68     		ldr	r3, [r7, #12]
 3054 000e 002B     		cmp	r3, #0
 3055 0010 01D1     		bne	.L233
 3056              		.loc 1 2876 0 is_stmt 0 discriminator 1
 3057              		.syntax unified
 3058              	@ 2876 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 3059 0012 72B6     		 cpsid i 
 3060              	@ 0 "" 2
 3061              		.thumb
 3062              		.syntax unified
 3063              	.L234:
 3064 0014 FEE7     		b	.L234
 3065              	.L233:
2877:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2878:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* This function should not be called by application code hence the
2879:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2880:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2881:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		it should be called with the scheduler suspended. */
2882:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2883:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2884:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2885:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2886:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2887:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		can be used in place of vListInsert. */
2888:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3066              		.loc 1 2888 0 is_stmt 1
 3067 0016 0A4B     		ldr	r3, .L236
 3068 0018 1B68     		ldr	r3, [r3]
 3069 001a 1833     		adds	r3, r3, #24
 3070 001c 1946     		mov	r1, r3
 3071 001e F868     		ldr	r0, [r7, #12]
 3072 0020 FFF7FEFF 		bl	vListInsertEnd
2889:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2890:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2891:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2892:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2893:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
 3073              		.loc 1 2893 0
 3074 0024 7B68     		ldr	r3, [r7, #4]
 3075 0026 002B     		cmp	r3, #0
 3076 0028 02D0     		beq	.L235
2894:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
2895:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
 3077              		.loc 1 2895 0
 3078 002a 4FF0FF33 		mov	r3, #-1
 3079 002e BB60     		str	r3, [r7, #8]
 3080              	.L235:
2896:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
2897:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2898:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2899:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 111


 3081              		.loc 1 2899 0
 3082 0030 7968     		ldr	r1, [r7, #4]
 3083 0032 B868     		ldr	r0, [r7, #8]
 3084 0034 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
2900:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 3085              		.loc 1 2900 0
 3086 0038 00BF     		nop
 3087 003a 1037     		adds	r7, r7, #16
 3088              		.cfi_def_cfa_offset 8
 3089 003c BD46     		mov	sp, r7
 3090              		.cfi_def_cfa_register 13
 3091              		@ sp needed
 3092 003e 80BD     		pop	{r7, pc}
 3093              	.L237:
 3094              		.align	2
 3095              	.L236:
 3096 0040 00000000 		.word	pxCurrentTCB
 3097              		.cfi_endproc
 3098              	.LFE154:
 3099              		.size	vTaskPlaceOnEventListRestricted, .-vTaskPlaceOnEventListRestricted
 3100              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3101              		.align	2
 3102              		.global	xTaskRemoveFromEventList
 3103              		.thumb
 3104              		.thumb_func
 3105              		.type	xTaskRemoveFromEventList, %function
 3106              	xTaskRemoveFromEventList:
 3107              	.LFB155:
2901:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2902:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* configUSE_TIMERS */
2903:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
2904:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2905:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2906:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** {
 3108              		.loc 1 2906 0
 3109              		.cfi_startproc
 3110              		@ args = 0, pretend = 0, frame = 16
 3111              		@ frame_needed = 1, uses_anonymous_args = 0
 3112 0000 80B5     		push	{r7, lr}
 3113              		.cfi_def_cfa_offset 8
 3114              		.cfi_offset 7, -8
 3115              		.cfi_offset 14, -4
 3116 0002 84B0     		sub	sp, sp, #16
 3117              		.cfi_def_cfa_offset 24
 3118 0004 00AF     		add	r7, sp, #0
 3119              		.cfi_def_cfa_register 7
 3120 0006 7860     		str	r0, [r7, #4]
2907:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** TCB_t *pxUnblockedTCB;
2908:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** BaseType_t xReturn;
2909:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2910:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2911:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	called from a critical section within an ISR. */
2912:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2913:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2914:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2915:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	the delayed list, and add it to the ready list.
2916:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 112


2917:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2918:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2919:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2920:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2921:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2922:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	pxEventList is not empty. */
2923:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 3121              		.loc 1 2923 0
 3122 0008 7B68     		ldr	r3, [r7, #4]
 3123 000a DB68     		ldr	r3, [r3, #12]
 3124 000c DB68     		ldr	r3, [r3, #12]
 3125 000e BB60     		str	r3, [r7, #8]
2924:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3126              		.loc 1 2924 0
 3127 0010 BB68     		ldr	r3, [r7, #8]
 3128 0012 002B     		cmp	r3, #0
 3129 0014 01D1     		bne	.L239
 3130              		.loc 1 2924 0 is_stmt 0 discriminator 1
 3131              		.syntax unified
 3132              	@ 2924 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 3133 0016 72B6     		 cpsid i 
 3134              	@ 0 "" 2
 3135              		.thumb
 3136              		.syntax unified
 3137              	.L240:
 3138 0018 FEE7     		b	.L240
 3139              	.L239:
2925:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3140              		.loc 1 2925 0 is_stmt 1
 3141 001a BB68     		ldr	r3, [r7, #8]
 3142 001c 1833     		adds	r3, r3, #24
 3143 001e 1846     		mov	r0, r3
 3144 0020 FFF7FEFF 		bl	uxListRemove
2926:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2927:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3145              		.loc 1 2927 0
 3146 0024 1D4B     		ldr	r3, .L247
 3147 0026 1B68     		ldr	r3, [r3]
 3148 0028 002B     		cmp	r3, #0
 3149 002a 1DD1     		bne	.L241
2928:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
2929:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3150              		.loc 1 2929 0
 3151 002c BB68     		ldr	r3, [r7, #8]
 3152 002e 0433     		adds	r3, r3, #4
 3153 0030 1846     		mov	r0, r3
 3154 0032 FFF7FEFF 		bl	uxListRemove
2930:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3155              		.loc 1 2930 0
 3156 0036 BB68     		ldr	r3, [r7, #8]
 3157 0038 DA6A     		ldr	r2, [r3, #44]
 3158 003a 194B     		ldr	r3, .L247+4
 3159 003c 1B68     		ldr	r3, [r3]
 3160 003e 9A42     		cmp	r2, r3
 3161 0040 03D9     		bls	.L242
 3162              		.loc 1 2930 0 is_stmt 0 discriminator 1
 3163 0042 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 113


 3164 0044 DB6A     		ldr	r3, [r3, #44]
 3165 0046 164A     		ldr	r2, .L247+4
 3166 0048 1360     		str	r3, [r2]
 3167              	.L242:
 3168              		.loc 1 2930 0 discriminator 3
 3169 004a BB68     		ldr	r3, [r7, #8]
 3170 004c DA6A     		ldr	r2, [r3, #44]
 3171 004e 1346     		mov	r3, r2
 3172 0050 9B00     		lsls	r3, r3, #2
 3173 0052 1344     		add	r3, r3, r2
 3174 0054 9B00     		lsls	r3, r3, #2
 3175 0056 134A     		ldr	r2, .L247+8
 3176 0058 1A44     		add	r2, r2, r3
 3177 005a BB68     		ldr	r3, [r7, #8]
 3178 005c 0433     		adds	r3, r3, #4
 3179 005e 1946     		mov	r1, r3
 3180 0060 1046     		mov	r0, r2
 3181 0062 FFF7FEFF 		bl	vListInsertEnd
 3182 0066 05E0     		b	.L243
 3183              	.L241:
2931:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
2932:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	else
2933:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
2934:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2935:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pending until the scheduler is resumed. */
2936:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 3184              		.loc 1 2936 0 is_stmt 1
 3185 0068 BB68     		ldr	r3, [r7, #8]
 3186 006a 1833     		adds	r3, r3, #24
 3187 006c 1946     		mov	r1, r3
 3188 006e 0E48     		ldr	r0, .L247+12
 3189 0070 FFF7FEFF 		bl	vListInsertEnd
 3190              	.L243:
2937:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
2938:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2939:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3191              		.loc 1 2939 0
 3192 0074 BB68     		ldr	r3, [r7, #8]
 3193 0076 DA6A     		ldr	r2, [r3, #44]
 3194 0078 0C4B     		ldr	r3, .L247+16
 3195 007a 1B68     		ldr	r3, [r3]
 3196 007c DB6A     		ldr	r3, [r3, #44]
 3197 007e 9A42     		cmp	r2, r3
 3198 0080 05D9     		bls	.L244
2940:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
2941:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2942:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2943:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		it should force a context switch now. */
2944:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		xReturn = pdTRUE;
 3199              		.loc 1 2944 0
 3200 0082 0123     		movs	r3, #1
 3201 0084 FB60     		str	r3, [r7, #12]
2945:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2946:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2947:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2948:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		xYieldPending = pdTRUE;
 3202              		.loc 1 2948 0
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 114


 3203 0086 0A4B     		ldr	r3, .L247+20
 3204 0088 0122     		movs	r2, #1
 3205 008a 1A60     		str	r2, [r3]
 3206 008c 01E0     		b	.L245
 3207              	.L244:
2949:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
2950:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	else
2951:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
2952:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		xReturn = pdFALSE;
 3208              		.loc 1 2952 0
 3209 008e 0023     		movs	r3, #0
 3210 0090 FB60     		str	r3, [r7, #12]
 3211              	.L245:
2953:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
2954:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2955:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2956:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
2957:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2958:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2959:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2960:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2961:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2962:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2963:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2964:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
2965:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		prvResetNextTaskUnblockTime();
2966:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
2967:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif
2968:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2969:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	return xReturn;
 3212              		.loc 1 2969 0
 3213 0092 FB68     		ldr	r3, [r7, #12]
2970:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** }
 3214              		.loc 1 2970 0
 3215 0094 1846     		mov	r0, r3
 3216 0096 1037     		adds	r7, r7, #16
 3217              		.cfi_def_cfa_offset 8
 3218 0098 BD46     		mov	sp, r7
 3219              		.cfi_def_cfa_register 13
 3220              		@ sp needed
 3221 009a 80BD     		pop	{r7, pc}
 3222              	.L248:
 3223              		.align	2
 3224              	.L247:
 3225 009c 28010000 		.word	uxSchedulerSuspended
 3226 00a0 08010000 		.word	uxTopReadyPriority
 3227 00a4 04000000 		.word	pxReadyTasksLists
 3228 00a8 C0000000 		.word	xPendingReadyList
 3229 00ac 00000000 		.word	pxCurrentTCB
 3230 00b0 14010000 		.word	xYieldPending
 3231              		.cfi_endproc
 3232              	.LFE155:
 3233              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 3234              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 3235              		.align	2
 3236              		.global	xTaskRemoveFromUnorderedEventList
 3237              		.thumb
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 115


 3238              		.thumb_func
 3239              		.type	xTaskRemoveFromUnorderedEventList, %function
 3240              	xTaskRemoveFromUnorderedEventList:
 3241              	.LFB156:
2971:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
2972:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2973:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2974:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** {
 3242              		.loc 1 2974 0
 3243              		.cfi_startproc
 3244              		@ args = 0, pretend = 0, frame = 16
 3245              		@ frame_needed = 1, uses_anonymous_args = 0
 3246 0000 80B5     		push	{r7, lr}
 3247              		.cfi_def_cfa_offset 8
 3248              		.cfi_offset 7, -8
 3249              		.cfi_offset 14, -4
 3250 0002 84B0     		sub	sp, sp, #16
 3251              		.cfi_def_cfa_offset 24
 3252 0004 00AF     		add	r7, sp, #0
 3253              		.cfi_def_cfa_register 7
 3254 0006 7860     		str	r0, [r7, #4]
 3255 0008 3960     		str	r1, [r7]
2975:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** TCB_t *pxUnblockedTCB;
2976:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** BaseType_t xReturn;
2977:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2978:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2979:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	the event flags implementation. */
2980:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 3256              		.loc 1 2980 0
 3257 000a 234B     		ldr	r3, .L258
 3258 000c 1B68     		ldr	r3, [r3]
 3259 000e 002B     		cmp	r3, #0
 3260 0010 01D1     		bne	.L250
 3261              		.loc 1 2980 0 is_stmt 0 discriminator 1
 3262              		.syntax unified
 3263              	@ 2980 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 3264 0012 72B6     		 cpsid i 
 3265              	@ 0 "" 2
 3266              		.thumb
 3267              		.syntax unified
 3268              	.L251:
 3269 0014 FEE7     		b	.L251
 3270              	.L250:
2981:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2982:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* Store the new item value in the event list. */
2983:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 3271              		.loc 1 2983 0 is_stmt 1
 3272 0016 3B68     		ldr	r3, [r7]
 3273 0018 43F00042 		orr	r2, r3, #-2147483648
 3274 001c 7B68     		ldr	r3, [r7, #4]
 3275 001e 1A60     		str	r2, [r3]
2984:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2985:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2986:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	event flags. */
2987:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 3276              		.loc 1 2987 0
 3277 0020 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 116


 3278 0022 DB68     		ldr	r3, [r3, #12]
 3279 0024 BB60     		str	r3, [r7, #8]
2988:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3280              		.loc 1 2988 0
 3281 0026 BB68     		ldr	r3, [r7, #8]
 3282 0028 002B     		cmp	r3, #0
 3283 002a 01D1     		bne	.L252
 3284              		.loc 1 2988 0 is_stmt 0 discriminator 1
 3285              		.syntax unified
 3286              	@ 2988 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 3287 002c 72B6     		 cpsid i 
 3288              	@ 0 "" 2
 3289              		.thumb
 3290              		.syntax unified
 3291              	.L253:
 3292              		.loc 1 2988 0 discriminator 2
 3293 002e FEE7     		b	.L253
 3294              	.L252:
2989:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3295              		.loc 1 2989 0 is_stmt 1
 3296 0030 7868     		ldr	r0, [r7, #4]
 3297 0032 FFF7FEFF 		bl	uxListRemove
2990:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2991:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2992:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2993:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	lists. */
2994:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3298              		.loc 1 2994 0
 3299 0036 BB68     		ldr	r3, [r7, #8]
 3300 0038 0433     		adds	r3, r3, #4
 3301 003a 1846     		mov	r0, r3
 3302 003c FFF7FEFF 		bl	uxListRemove
2995:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3303              		.loc 1 2995 0
 3304 0040 BB68     		ldr	r3, [r7, #8]
 3305 0042 DA6A     		ldr	r2, [r3, #44]
 3306 0044 154B     		ldr	r3, .L258+4
 3307 0046 1B68     		ldr	r3, [r3]
 3308 0048 9A42     		cmp	r2, r3
 3309 004a 03D9     		bls	.L254
 3310              		.loc 1 2995 0 is_stmt 0 discriminator 1
 3311 004c BB68     		ldr	r3, [r7, #8]
 3312 004e DB6A     		ldr	r3, [r3, #44]
 3313 0050 124A     		ldr	r2, .L258+4
 3314 0052 1360     		str	r3, [r2]
 3315              	.L254:
 3316              		.loc 1 2995 0 discriminator 3
 3317 0054 BB68     		ldr	r3, [r7, #8]
 3318 0056 DA6A     		ldr	r2, [r3, #44]
 3319 0058 1346     		mov	r3, r2
 3320 005a 9B00     		lsls	r3, r3, #2
 3321 005c 1344     		add	r3, r3, r2
 3322 005e 9B00     		lsls	r3, r3, #2
 3323 0060 0F4A     		ldr	r2, .L258+8
 3324 0062 1A44     		add	r2, r2, r3
 3325 0064 BB68     		ldr	r3, [r7, #8]
 3326 0066 0433     		adds	r3, r3, #4
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 117


 3327 0068 1946     		mov	r1, r3
 3328 006a 1046     		mov	r0, r2
 3329 006c FFF7FEFF 		bl	vListInsertEnd
2996:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
2997:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3330              		.loc 1 2997 0 is_stmt 1 discriminator 3
 3331 0070 BB68     		ldr	r3, [r7, #8]
 3332 0072 DA6A     		ldr	r2, [r3, #44]
 3333 0074 0B4B     		ldr	r3, .L258+12
 3334 0076 1B68     		ldr	r3, [r3]
 3335 0078 DB6A     		ldr	r3, [r3, #44]
 3336 007a 9A42     		cmp	r2, r3
 3337 007c 05D9     		bls	.L255
2998:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
2999:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Return true if the task removed from the event list has
3000:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		a higher priority than the calling task.  This allows
3001:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		the calling task to know if it should force a context
3002:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		switch now. */
3003:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		xReturn = pdTRUE;
 3338              		.loc 1 3003 0
 3339 007e 0123     		movs	r3, #1
 3340 0080 FB60     		str	r3, [r7, #12]
3004:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3005:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3006:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3007:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		xYieldPending = pdTRUE;
 3341              		.loc 1 3007 0
 3342 0082 094B     		ldr	r3, .L258+16
 3343 0084 0122     		movs	r2, #1
 3344 0086 1A60     		str	r2, [r3]
 3345 0088 01E0     		b	.L256
 3346              	.L255:
3008:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
3009:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	else
3010:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
3011:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		xReturn = pdFALSE;
 3347              		.loc 1 3011 0
 3348 008a 0023     		movs	r3, #0
 3349 008c FB60     		str	r3, [r7, #12]
 3350              	.L256:
3012:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
3013:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3014:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	return xReturn;
 3351              		.loc 1 3014 0
 3352 008e FB68     		ldr	r3, [r7, #12]
3015:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** }
 3353              		.loc 1 3015 0
 3354 0090 1846     		mov	r0, r3
 3355 0092 1037     		adds	r7, r7, #16
 3356              		.cfi_def_cfa_offset 8
 3357 0094 BD46     		mov	sp, r7
 3358              		.cfi_def_cfa_register 13
 3359              		@ sp needed
 3360 0096 80BD     		pop	{r7, pc}
 3361              	.L259:
 3362              		.align	2
 3363              	.L258:
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 118


 3364 0098 28010000 		.word	uxSchedulerSuspended
 3365 009c 08010000 		.word	uxTopReadyPriority
 3366 00a0 04000000 		.word	pxReadyTasksLists
 3367 00a4 00000000 		.word	pxCurrentTCB
 3368 00a8 14010000 		.word	xYieldPending
 3369              		.cfi_endproc
 3370              	.LFE156:
 3371              		.size	xTaskRemoveFromUnorderedEventList, .-xTaskRemoveFromUnorderedEventList
 3372              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3373              		.align	2
 3374              		.global	vTaskSetTimeOutState
 3375              		.thumb
 3376              		.thumb_func
 3377              		.type	vTaskSetTimeOutState, %function
 3378              	vTaskSetTimeOutState:
 3379              	.LFB157:
3016:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
3017:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3018:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3019:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** {
 3380              		.loc 1 3019 0
 3381              		.cfi_startproc
 3382              		@ args = 0, pretend = 0, frame = 8
 3383              		@ frame_needed = 1, uses_anonymous_args = 0
 3384              		@ link register save eliminated.
 3385 0000 80B4     		push	{r7}
 3386              		.cfi_def_cfa_offset 4
 3387              		.cfi_offset 7, -4
 3388 0002 83B0     		sub	sp, sp, #12
 3389              		.cfi_def_cfa_offset 16
 3390 0004 00AF     		add	r7, sp, #0
 3391              		.cfi_def_cfa_register 7
 3392 0006 7860     		str	r0, [r7, #4]
3020:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	configASSERT( pxTimeOut );
 3393              		.loc 1 3020 0
 3394 0008 7B68     		ldr	r3, [r7, #4]
 3395 000a 002B     		cmp	r3, #0
 3396 000c 01D1     		bne	.L261
 3397              		.loc 1 3020 0 is_stmt 0 discriminator 1
 3398              		.syntax unified
 3399              	@ 3020 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 3400 000e 72B6     		 cpsid i 
 3401              	@ 0 "" 2
 3402              		.thumb
 3403              		.syntax unified
 3404              	.L262:
 3405 0010 FEE7     		b	.L262
 3406              	.L261:
3021:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3407              		.loc 1 3021 0 is_stmt 1
 3408 0012 074B     		ldr	r3, .L263
 3409 0014 1A68     		ldr	r2, [r3]
 3410 0016 7B68     		ldr	r3, [r7, #4]
 3411 0018 1A60     		str	r2, [r3]
3022:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3412              		.loc 1 3022 0
 3413 001a 064B     		ldr	r3, .L263+4
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 119


 3414 001c 1A68     		ldr	r2, [r3]
 3415 001e 7B68     		ldr	r3, [r7, #4]
 3416 0020 5A60     		str	r2, [r3, #4]
3023:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** }
 3417              		.loc 1 3023 0
 3418 0022 00BF     		nop
 3419 0024 0C37     		adds	r7, r7, #12
 3420              		.cfi_def_cfa_offset 4
 3421 0026 BD46     		mov	sp, r7
 3422              		.cfi_def_cfa_register 13
 3423              		@ sp needed
 3424 0028 5DF8047B 		ldr	r7, [sp], #4
 3425              		.cfi_restore 7
 3426              		.cfi_def_cfa_offset 0
 3427 002c 7047     		bx	lr
 3428              	.L264:
 3429 002e 00BF     		.align	2
 3430              	.L263:
 3431 0030 18010000 		.word	xNumOfOverflows
 3432 0034 04010000 		.word	xTickCount
 3433              		.cfi_endproc
 3434              	.LFE157:
 3435              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 3436              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3437              		.align	2
 3438              		.global	xTaskCheckForTimeOut
 3439              		.thumb
 3440              		.thumb_func
 3441              		.type	xTaskCheckForTimeOut, %function
 3442              	xTaskCheckForTimeOut:
 3443              	.LFB158:
3024:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
3025:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3026:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3027:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** {
 3444              		.loc 1 3027 0
 3445              		.cfi_startproc
 3446              		@ args = 0, pretend = 0, frame = 16
 3447              		@ frame_needed = 1, uses_anonymous_args = 0
 3448 0000 80B5     		push	{r7, lr}
 3449              		.cfi_def_cfa_offset 8
 3450              		.cfi_offset 7, -8
 3451              		.cfi_offset 14, -4
 3452 0002 84B0     		sub	sp, sp, #16
 3453              		.cfi_def_cfa_offset 24
 3454 0004 00AF     		add	r7, sp, #0
 3455              		.cfi_def_cfa_register 7
 3456 0006 7860     		str	r0, [r7, #4]
 3457 0008 3960     		str	r1, [r7]
3028:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** BaseType_t xReturn;
3029:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3030:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	configASSERT( pxTimeOut );
 3458              		.loc 1 3030 0
 3459 000a 7B68     		ldr	r3, [r7, #4]
 3460 000c 002B     		cmp	r3, #0
 3461 000e 01D1     		bne	.L266
 3462              		.loc 1 3030 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 120


 3463              		.syntax unified
 3464              	@ 3030 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 3465 0010 72B6     		 cpsid i 
 3466              	@ 0 "" 2
 3467              		.thumb
 3468              		.syntax unified
 3469              	.L267:
 3470 0012 FEE7     		b	.L267
 3471              	.L266:
3031:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3472              		.loc 1 3031 0 is_stmt 1
 3473 0014 3B68     		ldr	r3, [r7]
 3474 0016 002B     		cmp	r3, #0
 3475 0018 01D1     		bne	.L268
 3476              		.loc 1 3031 0 is_stmt 0 discriminator 1
 3477              		.syntax unified
 3478              	@ 3031 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 3479 001a 72B6     		 cpsid i 
 3480              	@ 0 "" 2
 3481              		.thumb
 3482              		.syntax unified
 3483              	.L269:
 3484              		.loc 1 3031 0 discriminator 2
 3485 001c FEE7     		b	.L269
 3486              	.L268:
3032:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3033:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	taskENTER_CRITICAL();
 3487              		.loc 1 3033 0 is_stmt 1
 3488 001e FFF7FEFF 		bl	vPortEnterCritical
 3489              	.LBB34:
3034:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
3035:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3036:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 3490              		.loc 1 3036 0
 3491 0022 1C4B     		ldr	r3, .L275
 3492 0024 1B68     		ldr	r3, [r3]
 3493 0026 BB60     		str	r3, [r7, #8]
3037:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3038:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3039:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3040:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
3041:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3042:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				but has the same result. */
3043:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3044:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				xReturn = pdTRUE;
3045:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
3046:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
3047:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#endif
3048:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3049:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3050:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 3494              		.loc 1 3050 0
 3495 0028 3B68     		ldr	r3, [r7]
 3496 002a 1B68     		ldr	r3, [r3]
 3497 002c B3F1FF3F 		cmp	r3, #-1
 3498 0030 02D1     		bne	.L270
3051:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 121


3052:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3053:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				specified is the maximum block time then the task should block
3054:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				indefinitely, and therefore never time out. */
3055:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				xReturn = pdFALSE;
 3499              		.loc 1 3055 0
 3500 0032 0023     		movs	r3, #0
 3501 0034 FB60     		str	r3, [r7, #12]
 3502 0036 26E0     		b	.L271
 3503              	.L270:
3056:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
3057:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
3058:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#endif
3059:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3060:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 3504              		.loc 1 3060 0
 3505 0038 7B68     		ldr	r3, [r7, #4]
 3506 003a 1A68     		ldr	r2, [r3]
 3507 003c 164B     		ldr	r3, .L275+4
 3508 003e 1B68     		ldr	r3, [r3]
 3509 0040 9A42     		cmp	r2, r3
 3510 0042 07D0     		beq	.L272
 3511              		.loc 1 3060 0 is_stmt 0 discriminator 1
 3512 0044 7B68     		ldr	r3, [r7, #4]
 3513 0046 5A68     		ldr	r2, [r3, #4]
 3514 0048 BB68     		ldr	r3, [r7, #8]
 3515 004a 9A42     		cmp	r2, r3
 3516 004c 02D8     		bhi	.L272
3061:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3062:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* The tick count is greater than the time at which
3063:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3064:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3065:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3066:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			was called. */
3067:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xReturn = pdTRUE;
 3517              		.loc 1 3067 0 is_stmt 1
 3518 004e 0123     		movs	r3, #1
 3519 0050 FB60     		str	r3, [r7, #12]
 3520 0052 18E0     		b	.L271
 3521              	.L272:
3068:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3069:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /
 3522              		.loc 1 3069 0
 3523 0054 7B68     		ldr	r3, [r7, #4]
 3524 0056 5B68     		ldr	r3, [r3, #4]
 3525 0058 BA68     		ldr	r2, [r7, #8]
 3526 005a D21A     		subs	r2, r2, r3
 3527 005c 3B68     		ldr	r3, [r7]
 3528 005e 1B68     		ldr	r3, [r3]
 3529 0060 9A42     		cmp	r2, r3
 3530 0062 0ED2     		bcs	.L273
3070:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3071:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3072:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 3531              		.loc 1 3072 0
 3532 0064 3B68     		ldr	r3, [r7]
 3533 0066 1A68     		ldr	r2, [r3]
 3534 0068 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 122


 3535 006a 5968     		ldr	r1, [r3, #4]
 3536 006c BB68     		ldr	r3, [r7, #8]
 3537 006e CB1A     		subs	r3, r1, r3
 3538 0070 1A44     		add	r2, r2, r3
 3539 0072 3B68     		ldr	r3, [r7]
 3540 0074 1A60     		str	r2, [r3]
3073:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3541              		.loc 1 3073 0
 3542 0076 7868     		ldr	r0, [r7, #4]
 3543 0078 FFF7FEFF 		bl	vTaskSetTimeOutState
3074:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xReturn = pdFALSE;
 3544              		.loc 1 3074 0
 3545 007c 0023     		movs	r3, #0
 3546 007e FB60     		str	r3, [r7, #12]
 3547 0080 01E0     		b	.L271
 3548              	.L273:
3075:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3076:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
3077:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3078:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xReturn = pdTRUE;
 3549              		.loc 1 3078 0
 3550 0082 0123     		movs	r3, #1
 3551 0084 FB60     		str	r3, [r7, #12]
 3552              	.L271:
 3553              	.LBE34:
3079:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3080:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
3081:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	taskEXIT_CRITICAL();
 3554              		.loc 1 3081 0
 3555 0086 FFF7FEFF 		bl	vPortExitCritical
3082:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3083:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	return xReturn;
 3556              		.loc 1 3083 0
 3557 008a FB68     		ldr	r3, [r7, #12]
3084:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** }
 3558              		.loc 1 3084 0
 3559 008c 1846     		mov	r0, r3
 3560 008e 1037     		adds	r7, r7, #16
 3561              		.cfi_def_cfa_offset 8
 3562 0090 BD46     		mov	sp, r7
 3563              		.cfi_def_cfa_register 13
 3564              		@ sp needed
 3565 0092 80BD     		pop	{r7, pc}
 3566              	.L276:
 3567              		.align	2
 3568              	.L275:
 3569 0094 04010000 		.word	xTickCount
 3570 0098 18010000 		.word	xNumOfOverflows
 3571              		.cfi_endproc
 3572              	.LFE158:
 3573              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 3574              		.section	.text.vTaskMissedYield,"ax",%progbits
 3575              		.align	2
 3576              		.global	vTaskMissedYield
 3577              		.thumb
 3578              		.thumb_func
 3579              		.type	vTaskMissedYield, %function
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 123


 3580              	vTaskMissedYield:
 3581              	.LFB159:
3085:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
3086:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3087:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** void vTaskMissedYield( void )
3088:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** {
 3582              		.loc 1 3088 0
 3583              		.cfi_startproc
 3584              		@ args = 0, pretend = 0, frame = 0
 3585              		@ frame_needed = 1, uses_anonymous_args = 0
 3586              		@ link register save eliminated.
 3587 0000 80B4     		push	{r7}
 3588              		.cfi_def_cfa_offset 4
 3589              		.cfi_offset 7, -4
 3590 0002 00AF     		add	r7, sp, #0
 3591              		.cfi_def_cfa_register 7
3089:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	xYieldPending = pdTRUE;
 3592              		.loc 1 3089 0
 3593 0004 034B     		ldr	r3, .L278
 3594 0006 0122     		movs	r2, #1
 3595 0008 1A60     		str	r2, [r3]
3090:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** }
 3596              		.loc 1 3090 0
 3597 000a 00BF     		nop
 3598 000c BD46     		mov	sp, r7
 3599              		.cfi_def_cfa_register 13
 3600              		@ sp needed
 3601 000e 5DF8047B 		ldr	r7, [sp], #4
 3602              		.cfi_restore 7
 3603              		.cfi_def_cfa_offset 0
 3604 0012 7047     		bx	lr
 3605              	.L279:
 3606              		.align	2
 3607              	.L278:
 3608 0014 14010000 		.word	xYieldPending
 3609              		.cfi_endproc
 3610              	.LFE159:
 3611              		.size	vTaskMissedYield, .-vTaskMissedYield
 3612              		.section	.text.prvIdleTask,"ax",%progbits
 3613              		.align	2
 3614              		.thumb
 3615              		.thumb_func
 3616              		.type	prvIdleTask, %function
 3617              	prvIdleTask:
 3618              	.LFB160:
3091:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
3092:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3093:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3094:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3095:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3096:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
3097:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	UBaseType_t uxReturn;
3098:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t *pxTCB;
3099:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3100:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( xTask != NULL )
3101:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3102:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 124


3103:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3104:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3105:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
3106:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3107:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			uxReturn = 0U;
3108:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3109:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3110:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return uxReturn;
3111:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
3112:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3113:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3114:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
3115:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3116:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3117:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3118:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3119:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
3120:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t *pxTCB;
3121:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3122:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( xTask != NULL )
3123:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3124:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3125:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3126:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3127:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
3128:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3129:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3130:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3131:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*
3132:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * -----------------------------------------------------------
3133:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * The Idle task.
3134:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * ----------------------------------------------------------
3135:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  *
3136:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3137:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3138:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  *
3139:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3140:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  *
3141:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c ****  */
3142:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3143:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** {
 3619              		.loc 1 3143 0
 3620              		.cfi_startproc
 3621              		@ args = 0, pretend = 0, frame = 8
 3622              		@ frame_needed = 1, uses_anonymous_args = 0
 3623 0000 80B5     		push	{r7, lr}
 3624              		.cfi_def_cfa_offset 8
 3625              		.cfi_offset 7, -8
 3626              		.cfi_offset 14, -4
 3627 0002 82B0     		sub	sp, sp, #8
 3628              		.cfi_def_cfa_offset 16
 3629 0004 00AF     		add	r7, sp, #0
 3630              		.cfi_def_cfa_register 7
 3631 0006 7860     		str	r0, [r7, #4]
 3632              	.L282:
3144:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* Stop warnings. */
3145:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	( void ) pvParameters;
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 125


3146:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3147:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3148:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3149:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3150:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	for( ;; )
3151:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
3152:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3153:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3154:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 3633              		.loc 1 3154 0
 3634 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3155:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3156:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3157:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3158:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3159:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			see if any other task has become available.  If we are using
3160:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3161:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			will automatically get the processor anyway. */
3162:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			taskYIELD();
3163:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3164:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3165:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3166:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3167:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3168:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3169:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3170:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			to run then the idle task should yield before the end of the
3171:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			timeslice.
3172:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3173:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			A critical region is not required here as we are just reading from
3174:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3175:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3176:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3177:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 3635              		.loc 1 3177 0
 3636 000c 064B     		ldr	r3, .L283
 3637 000e 1B68     		ldr	r3, [r3]
 3638 0010 012B     		cmp	r3, #1
 3639 0012 F9D9     		bls	.L282
3178:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
3179:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				taskYIELD();
 3640              		.loc 1 3179 0
 3641 0014 054B     		ldr	r3, .L283+4
 3642 0016 4FF08052 		mov	r2, #268435456
 3643 001a 1A60     		str	r2, [r3]
 3644              		.syntax unified
 3645              	@ 3179 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 3646 001c BFF34F8F 		dsb
 3647              	@ 0 "" 2
 3648              	@ 3179 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 3649 0020 BFF36F8F 		isb
 3650              	@ 0 "" 2
3180:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
3181:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
3182:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
3183:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3184:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 126


3185:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3186:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3187:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3188:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3189:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3190:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3191:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3192:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3193:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			allows the application designer to add background functionality
3194:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			without the overhead of a separate task.
3195:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3196:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3197:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			vApplicationIdleHook();
3198:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3199:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3200:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3201:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3202:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3203:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		user defined low power mode	implementations require
3204:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3205:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3206:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3207:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3208:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3209:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3210:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3211:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			test of the expected idle time is performed without the
3212:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3213:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			valid. */
3214:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3215:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3216:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3217:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
3218:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				vTaskSuspendAll();
3219:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
3220:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3221:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					time can be sampled again, and this time its value can
3222:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					be used. */
3223:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3224:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3225:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3226:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3227:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
3228:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3229:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3230:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3231:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
3232:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					else
3233:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
3234:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3235:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
3236:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
3237:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				( void ) xTaskResumeAll();
3238:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
3239:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
3240:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
3241:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 127


3242:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
3243:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3244:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3245:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 3651              		.loc 1 3245 0
 3652              		.thumb
 3653              		.syntax unified
 3654 0024 F0E7     		b	.L282
 3655              	.L284:
 3656 0026 00BF     		.align	2
 3657              	.L283:
 3658 0028 04000000 		.word	pxReadyTasksLists
 3659 002c 04ED00E0 		.word	-536810236
 3660              		.cfi_endproc
 3661              	.LFE160:
 3662              		.size	prvIdleTask, .-prvIdleTask
 3663              		.section	.text.vTaskSetThreadLocalStoragePointer,"ax",%progbits
 3664              		.align	2
 3665              		.global	vTaskSetThreadLocalStoragePointer
 3666              		.thumb
 3667              		.thumb_func
 3668              		.type	vTaskSetThreadLocalStoragePointer, %function
 3669              	vTaskSetThreadLocalStoragePointer:
 3670              	.LFB161:
3246:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** }
3247:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
3248:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3249:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3250:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3251:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3252:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
3253:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3254:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3255:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3256:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3257:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3258:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3259:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3260:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			eReturn = eAbortSleep;
3261:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3262:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3263:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3264:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3265:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			eReturn = eAbortSleep;
3266:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3267:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
3268:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3269:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3270:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3271:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3272:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			interrupts. */
3273:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3274:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
3275:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3276:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
3277:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
3278:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 128


3279:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3280:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
3281:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3282:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3283:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return eReturn;
3284:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
3285:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3286:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3287:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
3288:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3289:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3290:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3291:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3292:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 3671              		.loc 1 3292 0
 3672              		.cfi_startproc
 3673              		@ args = 0, pretend = 0, frame = 24
 3674              		@ frame_needed = 1, uses_anonymous_args = 0
 3675              		@ link register save eliminated.
 3676 0000 80B4     		push	{r7}
 3677              		.cfi_def_cfa_offset 4
 3678              		.cfi_offset 7, -4
 3679 0002 87B0     		sub	sp, sp, #28
 3680              		.cfi_def_cfa_offset 32
 3681 0004 00AF     		add	r7, sp, #0
 3682              		.cfi_def_cfa_register 7
 3683 0006 F860     		str	r0, [r7, #12]
 3684 0008 B960     		str	r1, [r7, #8]
 3685 000a 7A60     		str	r2, [r7, #4]
3293:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t *pxTCB;
3294:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3295:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 3686              		.loc 1 3295 0
 3687 000c BB68     		ldr	r3, [r7, #8]
 3688 000e 042B     		cmp	r3, #4
 3689 0010 0EDC     		bgt	.L289
3296:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3297:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
 3690              		.loc 1 3297 0
 3691 0012 FB68     		ldr	r3, [r7, #12]
 3692 0014 002B     		cmp	r3, #0
 3693 0016 02D1     		bne	.L287
 3694              		.loc 1 3297 0 is_stmt 0 discriminator 1
 3695 0018 084B     		ldr	r3, .L290
 3696 001a 1B68     		ldr	r3, [r3]
 3697 001c 00E0     		b	.L288
 3698              	.L287:
 3699              		.loc 1 3297 0 discriminator 2
 3700 001e FB68     		ldr	r3, [r7, #12]
 3701              	.L288:
 3702              		.loc 1 3297 0 discriminator 4
 3703 0020 7B61     		str	r3, [r7, #20]
3298:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 3704              		.loc 1 3298 0 is_stmt 1 discriminator 4
 3705 0022 7A69     		ldr	r2, [r7, #20]
 3706 0024 BB68     		ldr	r3, [r7, #8]
 3707 0026 1033     		adds	r3, r3, #16
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 129


 3708 0028 9B00     		lsls	r3, r3, #2
 3709 002a 1344     		add	r3, r3, r2
 3710 002c 7A68     		ldr	r2, [r7, #4]
 3711 002e 5A60     		str	r2, [r3, #4]
 3712              	.L289:
3299:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3300:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 3713              		.loc 1 3300 0
 3714 0030 00BF     		nop
 3715 0032 1C37     		adds	r7, r7, #28
 3716              		.cfi_def_cfa_offset 4
 3717 0034 BD46     		mov	sp, r7
 3718              		.cfi_def_cfa_register 13
 3719              		@ sp needed
 3720 0036 5DF8047B 		ldr	r7, [sp], #4
 3721              		.cfi_restore 7
 3722              		.cfi_def_cfa_offset 0
 3723 003a 7047     		bx	lr
 3724              	.L291:
 3725              		.align	2
 3726              	.L290:
 3727 003c 00000000 		.word	pxCurrentTCB
 3728              		.cfi_endproc
 3729              	.LFE161:
 3730              		.size	vTaskSetThreadLocalStoragePointer, .-vTaskSetThreadLocalStoragePointer
 3731              		.section	.text.pvTaskGetThreadLocalStoragePointer,"ax",%progbits
 3732              		.align	2
 3733              		.global	pvTaskGetThreadLocalStoragePointer
 3734              		.thumb
 3735              		.thumb_func
 3736              		.type	pvTaskGetThreadLocalStoragePointer, %function
 3737              	pvTaskGetThreadLocalStoragePointer:
 3738              	.LFB162:
3301:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3302:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3303:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
3304:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3305:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3306:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3307:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3308:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 3739              		.loc 1 3308 0
 3740              		.cfi_startproc
 3741              		@ args = 0, pretend = 0, frame = 16
 3742              		@ frame_needed = 1, uses_anonymous_args = 0
 3743              		@ link register save eliminated.
 3744 0000 80B4     		push	{r7}
 3745              		.cfi_def_cfa_offset 4
 3746              		.cfi_offset 7, -4
 3747 0002 85B0     		sub	sp, sp, #20
 3748              		.cfi_def_cfa_offset 24
 3749 0004 00AF     		add	r7, sp, #0
 3750              		.cfi_def_cfa_register 7
 3751 0006 7860     		str	r0, [r7, #4]
 3752 0008 3960     		str	r1, [r7]
3309:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	void *pvReturn = NULL;
 3753              		.loc 1 3309 0
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 130


 3754 000a 0023     		movs	r3, #0
 3755 000c FB60     		str	r3, [r7, #12]
3310:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t *pxTCB;
3311:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3312:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 3756              		.loc 1 3312 0
 3757 000e 3B68     		ldr	r3, [r7]
 3758 0010 042B     		cmp	r3, #4
 3759 0012 0FDC     		bgt	.L293
3313:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3314:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 3760              		.loc 1 3314 0
 3761 0014 7B68     		ldr	r3, [r7, #4]
 3762 0016 002B     		cmp	r3, #0
 3763 0018 02D1     		bne	.L294
 3764              		.loc 1 3314 0 is_stmt 0 discriminator 1
 3765 001a 0B4B     		ldr	r3, .L298
 3766 001c 1B68     		ldr	r3, [r3]
 3767 001e 00E0     		b	.L295
 3768              	.L294:
 3769              		.loc 1 3314 0 discriminator 2
 3770 0020 7B68     		ldr	r3, [r7, #4]
 3771              	.L295:
 3772              		.loc 1 3314 0 discriminator 4
 3773 0022 BB60     		str	r3, [r7, #8]
3315:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 3774              		.loc 1 3315 0 is_stmt 1 discriminator 4
 3775 0024 BA68     		ldr	r2, [r7, #8]
 3776 0026 3B68     		ldr	r3, [r7]
 3777 0028 1033     		adds	r3, r3, #16
 3778 002a 9B00     		lsls	r3, r3, #2
 3779 002c 1344     		add	r3, r3, r2
 3780 002e 5B68     		ldr	r3, [r3, #4]
 3781 0030 FB60     		str	r3, [r7, #12]
 3782 0032 01E0     		b	.L296
 3783              	.L293:
3316:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3317:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
3318:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3319:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pvReturn = NULL;
 3784              		.loc 1 3319 0
 3785 0034 0023     		movs	r3, #0
 3786 0036 FB60     		str	r3, [r7, #12]
 3787              	.L296:
3320:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3321:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3322:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return pvReturn;
 3788              		.loc 1 3322 0
 3789 0038 FB68     		ldr	r3, [r7, #12]
3323:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 3790              		.loc 1 3323 0
 3791 003a 1846     		mov	r0, r3
 3792 003c 1437     		adds	r7, r7, #20
 3793              		.cfi_def_cfa_offset 4
 3794 003e BD46     		mov	sp, r7
 3795              		.cfi_def_cfa_register 13
 3796              		@ sp needed
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 131


 3797 0040 5DF8047B 		ldr	r7, [sp], #4
 3798              		.cfi_restore 7
 3799              		.cfi_def_cfa_offset 0
 3800 0044 7047     		bx	lr
 3801              	.L299:
 3802 0046 00BF     		.align	2
 3803              	.L298:
 3804 0048 00000000 		.word	pxCurrentTCB
 3805              		.cfi_endproc
 3806              	.LFE162:
 3807              		.size	pvTaskGetThreadLocalStoragePointer, .-pvTaskGetThreadLocalStoragePointer
 3808              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 3809              		.align	2
 3810              		.thumb
 3811              		.thumb_func
 3812              		.type	prvInitialiseTaskLists, %function
 3813              	prvInitialiseTaskLists:
 3814              	.LFB163:
3324:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3325:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3326:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
3327:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3328:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3329:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3330:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3331:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
3332:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t *pxTCB;
3333:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3334:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3335:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		the calling task. */
3336:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3337:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3338:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3339:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
3340:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3341:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3342:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
3343:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3344:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** static void prvInitialiseTaskLists( void )
3345:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** {
 3815              		.loc 1 3345 0
 3816              		.cfi_startproc
 3817              		@ args = 0, pretend = 0, frame = 8
 3818              		@ frame_needed = 1, uses_anonymous_args = 0
 3819 0000 80B5     		push	{r7, lr}
 3820              		.cfi_def_cfa_offset 8
 3821              		.cfi_offset 7, -8
 3822              		.cfi_offset 14, -4
 3823 0002 82B0     		sub	sp, sp, #8
 3824              		.cfi_def_cfa_offset 16
 3825 0004 00AF     		add	r7, sp, #0
 3826              		.cfi_def_cfa_register 7
3346:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** UBaseType_t uxPriority;
3347:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3348:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 3827              		.loc 1 3348 0
 3828 0006 0023     		movs	r3, #0
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 132


 3829 0008 7B60     		str	r3, [r7, #4]
 3830 000a 0CE0     		b	.L301
 3831              	.L302:
3349:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
3350:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 3832              		.loc 1 3350 0 discriminator 3
 3833 000c 7A68     		ldr	r2, [r7, #4]
 3834 000e 1346     		mov	r3, r2
 3835 0010 9B00     		lsls	r3, r3, #2
 3836 0012 1344     		add	r3, r3, r2
 3837 0014 9B00     		lsls	r3, r3, #2
 3838 0016 124A     		ldr	r2, .L303
 3839 0018 1344     		add	r3, r3, r2
 3840 001a 1846     		mov	r0, r3
 3841 001c FFF7FEFF 		bl	vListInitialise
3348:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 3842              		.loc 1 3348 0 discriminator 3
 3843 0020 7B68     		ldr	r3, [r7, #4]
 3844 0022 0133     		adds	r3, r3, #1
 3845 0024 7B60     		str	r3, [r7, #4]
 3846              	.L301:
3348:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 3847              		.loc 1 3348 0 is_stmt 0 discriminator 1
 3848 0026 7B68     		ldr	r3, [r7, #4]
 3849 0028 062B     		cmp	r3, #6
 3850 002a EFD9     		bls	.L302
3351:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
3352:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3353:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 3851              		.loc 1 3353 0 is_stmt 1
 3852 002c 0D48     		ldr	r0, .L303+4
 3853 002e FFF7FEFF 		bl	vListInitialise
3354:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 3854              		.loc 1 3354 0
 3855 0032 0D48     		ldr	r0, .L303+8
 3856 0034 FFF7FEFF 		bl	vListInitialise
3355:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 3857              		.loc 1 3355 0
 3858 0038 0C48     		ldr	r0, .L303+12
 3859 003a FFF7FEFF 		bl	vListInitialise
3356:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3357:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3358:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
3359:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 3860              		.loc 1 3359 0
 3861 003e 0C48     		ldr	r0, .L303+16
 3862 0040 FFF7FEFF 		bl	vListInitialise
3360:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
3361:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3362:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3363:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3364:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
3365:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 3863              		.loc 1 3365 0
 3864 0044 0B48     		ldr	r0, .L303+20
 3865 0046 FFF7FEFF 		bl	vListInitialise
3366:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 133


3367:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3368:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3369:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3370:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	using list2. */
3371:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 3866              		.loc 1 3371 0
 3867 004a 0B4B     		ldr	r3, .L303+24
 3868 004c 054A     		ldr	r2, .L303+4
 3869 004e 1A60     		str	r2, [r3]
3372:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 3870              		.loc 1 3372 0
 3871 0050 0A4B     		ldr	r3, .L303+28
 3872 0052 054A     		ldr	r2, .L303+8
 3873 0054 1A60     		str	r2, [r3]
3373:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** }
 3874              		.loc 1 3373 0
 3875 0056 00BF     		nop
 3876 0058 0837     		adds	r7, r7, #8
 3877              		.cfi_def_cfa_offset 8
 3878 005a BD46     		mov	sp, r7
 3879              		.cfi_def_cfa_register 13
 3880              		@ sp needed
 3881 005c 80BD     		pop	{r7, pc}
 3882              	.L304:
 3883 005e 00BF     		.align	2
 3884              	.L303:
 3885 0060 04000000 		.word	pxReadyTasksLists
 3886 0064 90000000 		.word	xDelayedTaskList1
 3887 0068 A4000000 		.word	xDelayedTaskList2
 3888 006c C0000000 		.word	xPendingReadyList
 3889 0070 D4000000 		.word	xTasksWaitingTermination
 3890 0074 EC000000 		.word	xSuspendedTaskList
 3891 0078 B8000000 		.word	pxDelayedTaskList
 3892 007c BC000000 		.word	pxOverflowDelayedTaskList
 3893              		.cfi_endproc
 3894              	.LFE163:
 3895              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 3896              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 3897              		.align	2
 3898              		.thumb
 3899              		.thumb_func
 3900              		.type	prvCheckTasksWaitingTermination, %function
 3901              	prvCheckTasksWaitingTermination:
 3902              	.LFB164:
3374:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
3375:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3376:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3377:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** {
 3903              		.loc 1 3377 0
 3904              		.cfi_startproc
 3905              		@ args = 0, pretend = 0, frame = 8
 3906              		@ frame_needed = 1, uses_anonymous_args = 0
 3907 0000 80B5     		push	{r7, lr}
 3908              		.cfi_def_cfa_offset 8
 3909              		.cfi_offset 7, -8
 3910              		.cfi_offset 14, -4
 3911 0002 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 134


 3912              		.cfi_def_cfa_offset 16
 3913 0004 00AF     		add	r7, sp, #0
 3914              		.cfi_def_cfa_register 7
 3915              	.LBB35:
3378:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3379:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3380:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3381:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3382:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
3383:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		BaseType_t xListIsEmpty;
3384:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3385:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3386:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		too often in the idle task. */
3387:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 3916              		.loc 1 3387 0
 3917 0006 28E0     		b	.L306
 3918              	.L307:
3388:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3389:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			vTaskSuspendAll();
 3919              		.loc 1 3389 0
 3920 0008 FFF7FEFF 		bl	vTaskSuspendAll
3390:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
3391:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 3921              		.loc 1 3391 0
 3922 000c 174B     		ldr	r3, .L308
 3923 000e 1B68     		ldr	r3, [r3]
 3924 0010 002B     		cmp	r3, #0
 3925 0012 0CBF     		ite	eq
 3926 0014 0123     		moveq	r3, #1
 3927 0016 0023     		movne	r3, #0
 3928 0018 DBB2     		uxtb	r3, r3
 3929 001a 7B60     		str	r3, [r7, #4]
3392:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
3393:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			( void ) xTaskResumeAll();
 3930              		.loc 1 3393 0
 3931 001c FFF7FEFF 		bl	xTaskResumeAll
3394:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3395:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
 3932              		.loc 1 3395 0
 3933 0020 7B68     		ldr	r3, [r7, #4]
 3934 0022 002B     		cmp	r3, #0
 3935 0024 19D1     		bne	.L306
 3936              	.LBB36:
3396:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
3397:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				TCB_t *pxTCB;
3398:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3399:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				taskENTER_CRITICAL();
 3937              		.loc 1 3399 0
 3938 0026 FFF7FEFF 		bl	vPortEnterCritical
3400:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
3401:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 3939              		.loc 1 3401 0
 3940 002a 104B     		ldr	r3, .L308
 3941 002c DB68     		ldr	r3, [r3, #12]
 3942 002e DB68     		ldr	r3, [r3, #12]
 3943 0030 3B60     		str	r3, [r7]
3402:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 135


 3944              		.loc 1 3402 0
 3945 0032 3B68     		ldr	r3, [r7]
 3946 0034 0433     		adds	r3, r3, #4
 3947 0036 1846     		mov	r0, r3
 3948 0038 FFF7FEFF 		bl	uxListRemove
3403:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 3949              		.loc 1 3403 0
 3950 003c 0C4B     		ldr	r3, .L308+4
 3951 003e 1B68     		ldr	r3, [r3]
 3952 0040 013B     		subs	r3, r3, #1
 3953 0042 0B4A     		ldr	r2, .L308+4
 3954 0044 1360     		str	r3, [r2]
3404:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
 3955              		.loc 1 3404 0
 3956 0046 0B4B     		ldr	r3, .L308+8
 3957 0048 1B68     		ldr	r3, [r3]
 3958 004a 013B     		subs	r3, r3, #1
 3959 004c 094A     		ldr	r2, .L308+8
 3960 004e 1360     		str	r3, [r2]
3405:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
3406:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				taskEXIT_CRITICAL();
 3961              		.loc 1 3406 0
 3962 0050 FFF7FEFF 		bl	vPortExitCritical
3407:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3408:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 3963              		.loc 1 3408 0
 3964 0054 3868     		ldr	r0, [r7]
 3965 0056 FFF7FEFF 		bl	prvDeleteTCB
 3966              	.L306:
 3967              	.LBE36:
3387:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
 3968              		.loc 1 3387 0
 3969 005a 064B     		ldr	r3, .L308+8
 3970 005c 1B68     		ldr	r3, [r3]
 3971 005e 002B     		cmp	r3, #0
 3972 0060 D2D1     		bne	.L307
 3973              	.LBE35:
3409:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
3410:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
3411:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
3412:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3413:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
3414:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3415:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
3416:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3417:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** }
 3974              		.loc 1 3417 0
 3975 0062 00BF     		nop
 3976 0064 0837     		adds	r7, r7, #8
 3977              		.cfi_def_cfa_offset 8
 3978 0066 BD46     		mov	sp, r7
 3979              		.cfi_def_cfa_register 13
 3980              		@ sp needed
 3981 0068 80BD     		pop	{r7, pc}
 3982              	.L309:
 3983 006a 00BF     		.align	2
 3984              	.L308:
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 136


 3985 006c D4000000 		.word	xTasksWaitingTermination
 3986 0070 00010000 		.word	uxCurrentNumberOfTasks
 3987 0074 E8000000 		.word	uxDeletedTasksWaitingCleanUp
 3988              		.cfi_endproc
 3989              	.LFE164:
 3990              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 3991              		.section	.text.prvDeleteTCB,"ax",%progbits
 3992              		.align	2
 3993              		.thumb
 3994              		.thumb_func
 3995              		.type	prvDeleteTCB, %function
 3996              	prvDeleteTCB:
 3997              	.LFB165:
3418:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
3419:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3420:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3421:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3422:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3423:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
3424:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t *pxTCB;
3425:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3426:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3427:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3428:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3429:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3430:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3431:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3432:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3433:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3434:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3435:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3436:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3437:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* If the task is in the suspended list then there is a chance it is
3438:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			actually just blocked indefinitely - so really it should be reported as
3439:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			being in the Blocked state. */
3440:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( pxTaskStatus->eCurrentState == eSuspended )
3441:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
3442:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				vTaskSuspendAll();
3443:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
3444:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3445:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
3446:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						pxTaskStatus->eCurrentState = eBlocked;
3447:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
3448:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
3449:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				xTaskResumeAll();
3450:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
3451:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3452:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#endif /* INCLUDE_vTaskSuspend */
3453:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3454:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3455:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3456:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3457:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3458:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#else
3459:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3460:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3461:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 137


3462:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#endif
3463:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3464:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3465:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3466:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3467:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3468:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#else
3469:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3470:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3471:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3472:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#endif
3473:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3474:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the value
3475:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		of eState passed into this function is eInvalid - otherwise the state is
3476:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		just set to whatever is passed in. */
3477:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( eState != eInvalid )
3478:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3479:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxTaskStatus->eCurrentState = eState;
3480:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3481:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
3482:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3483:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
3484:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3485:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3486:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3487:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3488:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3489:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3490:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3491:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
3492:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3493:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
3494:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			#else
3495:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
3496:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3497:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
3498:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			#endif
3499:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3500:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
3501:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3502:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3503:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3504:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
3505:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3506:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3507:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
3508:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3509:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3510:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3511:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3512:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
3513:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3514:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	UBaseType_t uxTask = 0;
3515:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3516:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3517:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3518:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 138


3519:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3520:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3521:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3522:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3523:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3524:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			do
3525:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
3526:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3527:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3528:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				uxTask++;
3529:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3530:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3531:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
3532:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3533:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3534:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3535:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3536:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return uxTask;
3537:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
3538:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3539:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3540:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
3541:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3542:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3543:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3544:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3545:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
3546:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	uint32_t ulCount = 0U;
3547:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3548:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3549:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3550:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3551:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			ulCount++;
3552:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3553:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3554:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3555:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3556:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return ( uint16_t ) ulCount;
3557:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
3558:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3559:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3560:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
3561:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3562:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3563:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3564:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3565:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
3566:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t *pxTCB;
3567:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	uint8_t *pucEndOfStack;
3568:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	UBaseType_t uxReturn;
3569:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3570:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3571:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3572:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3573:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3574:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3575:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 139


3576:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#else
3577:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3578:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3579:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3580:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#endif
3581:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3582:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3583:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3584:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return uxReturn;
3585:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
3586:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3587:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3588:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
3589:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3590:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3591:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3592:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3593:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 3998              		.loc 1 3593 0
 3999              		.cfi_startproc
 4000              		@ args = 0, pretend = 0, frame = 8
 4001              		@ frame_needed = 1, uses_anonymous_args = 0
 4002 0000 80B5     		push	{r7, lr}
 4003              		.cfi_def_cfa_offset 8
 4004              		.cfi_offset 7, -8
 4005              		.cfi_offset 14, -4
 4006 0002 82B0     		sub	sp, sp, #8
 4007              		.cfi_def_cfa_offset 16
 4008 0004 00AF     		add	r7, sp, #0
 4009              		.cfi_def_cfa_register 7
 4010 0006 7860     		str	r0, [r7, #4]
3594:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3595:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3596:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		want to allocate and clean RAM statically. */
3597:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3598:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3599:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3600:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3601:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3602:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3603:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3604:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3605:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3606:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3607:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3608:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3609:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3610:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			the stack and TCB. */
3611:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
 4011              		.loc 1 3611 0
 4012 0008 7B68     		ldr	r3, [r7, #4]
 4013 000a 1B6B     		ldr	r3, [r3, #48]
 4014 000c 1846     		mov	r0, r3
 4015 000e FFF7FEFF 		bl	vPortFree
3612:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			vPortFree( pxTCB );
 4016              		.loc 1 3612 0
 4017 0012 7868     		ldr	r0, [r7, #4]
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 140


 4018 0014 FFF7FEFF 		bl	vPortFree
3613:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3614:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
3615:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3616:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3617:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			check what was statically allocated before trying to free the
3618:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			memory. */
3619:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3620:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
3621:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3622:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				must be freed. */
3623:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3624:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				vPortFree( pxTCB );
3625:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
3626:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3627:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
3628:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3629:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				only memory that must be freed. */
3630:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				vPortFree( pxTCB );
3631:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
3632:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
3633:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
3634:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3635:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				nothing needs to be freed. */
3636:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
3637:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3638:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
3639:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3640:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3641:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 4019              		.loc 1 3641 0
 4020 0018 00BF     		nop
 4021 001a 0837     		adds	r7, r7, #8
 4022              		.cfi_def_cfa_offset 8
 4023 001c BD46     		mov	sp, r7
 4024              		.cfi_def_cfa_register 13
 4025              		@ sp needed
 4026 001e 80BD     		pop	{r7, pc}
 4027              		.cfi_endproc
 4028              	.LFE165:
 4029              		.size	prvDeleteTCB, .-prvDeleteTCB
 4030              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 4031              		.align	2
 4032              		.thumb
 4033              		.thumb_func
 4034              		.type	prvResetNextTaskUnblockTime, %function
 4035              	prvResetNextTaskUnblockTime:
 4036              	.LFB166:
3642:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3643:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3644:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
3645:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3646:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3647:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** {
 4037              		.loc 1 3647 0
 4038              		.cfi_startproc
 4039              		@ args = 0, pretend = 0, frame = 8
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 141


 4040              		@ frame_needed = 1, uses_anonymous_args = 0
 4041              		@ link register save eliminated.
 4042 0000 80B4     		push	{r7}
 4043              		.cfi_def_cfa_offset 4
 4044              		.cfi_offset 7, -4
 4045 0002 83B0     		sub	sp, sp, #12
 4046              		.cfi_def_cfa_offset 16
 4047 0004 00AF     		add	r7, sp, #0
 4048              		.cfi_def_cfa_register 7
3648:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** TCB_t *pxTCB;
3649:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3650:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 4049              		.loc 1 3650 0
 4050 0006 0F4B     		ldr	r3, .L317
 4051 0008 1B68     		ldr	r3, [r3]
 4052 000a 1B68     		ldr	r3, [r3]
 4053 000c 002B     		cmp	r3, #0
 4054 000e 01D1     		bne	.L312
 4055              		.loc 1 3650 0 is_stmt 0 discriminator 1
 4056 0010 0123     		movs	r3, #1
 4057 0012 00E0     		b	.L313
 4058              	.L312:
 4059              		.loc 1 3650 0 discriminator 2
 4060 0014 0023     		movs	r3, #0
 4061              	.L313:
 4062              		.loc 1 3650 0 discriminator 4
 4063 0016 002B     		cmp	r3, #0
 4064 0018 04D0     		beq	.L314
3651:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
3652:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3653:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3654:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3655:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		there is an item in the delayed list. */
3656:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 4065              		.loc 1 3656 0 is_stmt 1
 4066 001a 0B4B     		ldr	r3, .L317+4
 4067 001c 4FF0FF32 		mov	r2, #-1
 4068 0020 1A60     		str	r2, [r3]
3657:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
3658:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	else
3659:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
3660:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3661:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3662:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3663:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		from the Blocked state. */
3664:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
3665:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3666:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
3667:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** }
 4069              		.loc 1 3667 0
 4070 0022 08E0     		b	.L316
 4071              	.L314:
3664:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 4072              		.loc 1 3664 0
 4073 0024 074B     		ldr	r3, .L317
 4074 0026 1B68     		ldr	r3, [r3]
 4075 0028 DB68     		ldr	r3, [r3, #12]
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 142


 4076 002a DB68     		ldr	r3, [r3, #12]
 4077 002c 7B60     		str	r3, [r7, #4]
3665:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 4078              		.loc 1 3665 0
 4079 002e 7B68     		ldr	r3, [r7, #4]
 4080 0030 5B68     		ldr	r3, [r3, #4]
 4081 0032 054A     		ldr	r2, .L317+4
 4082 0034 1360     		str	r3, [r2]
 4083              	.L316:
 4084              		.loc 1 3667 0
 4085 0036 00BF     		nop
 4086 0038 0C37     		adds	r7, r7, #12
 4087              		.cfi_def_cfa_offset 4
 4088 003a BD46     		mov	sp, r7
 4089              		.cfi_def_cfa_register 13
 4090              		@ sp needed
 4091 003c 5DF8047B 		ldr	r7, [sp], #4
 4092              		.cfi_restore 7
 4093              		.cfi_def_cfa_offset 0
 4094 0040 7047     		bx	lr
 4095              	.L318:
 4096 0042 00BF     		.align	2
 4097              	.L317:
 4098 0044 B8000000 		.word	pxDelayedTaskList
 4099 0048 20010000 		.word	xNextTaskUnblockTime
 4100              		.cfi_endproc
 4101              	.LFE166:
 4102              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 4103              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4104              		.align	2
 4105              		.global	xTaskGetCurrentTaskHandle
 4106              		.thumb
 4107              		.thumb_func
 4108              		.type	xTaskGetCurrentTaskHandle, %function
 4109              	xTaskGetCurrentTaskHandle:
 4110              	.LFB167:
3668:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
3669:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3670:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3671:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3672:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3673:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 4111              		.loc 1 3673 0
 4112              		.cfi_startproc
 4113              		@ args = 0, pretend = 0, frame = 8
 4114              		@ frame_needed = 1, uses_anonymous_args = 0
 4115              		@ link register save eliminated.
 4116 0000 80B4     		push	{r7}
 4117              		.cfi_def_cfa_offset 4
 4118              		.cfi_offset 7, -4
 4119 0002 83B0     		sub	sp, sp, #12
 4120              		.cfi_def_cfa_offset 16
 4121 0004 00AF     		add	r7, sp, #0
 4122              		.cfi_def_cfa_register 7
3674:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TaskHandle_t xReturn;
3675:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3676:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* A critical section is not required as this is not called from
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 143


3677:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3678:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		individual execution thread. */
3679:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		xReturn = pxCurrentTCB;
 4123              		.loc 1 3679 0
 4124 0006 054B     		ldr	r3, .L321
 4125 0008 1B68     		ldr	r3, [r3]
 4126 000a 7B60     		str	r3, [r7, #4]
3680:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3681:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return xReturn;
 4127              		.loc 1 3681 0
 4128 000c 7B68     		ldr	r3, [r7, #4]
3682:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 4129              		.loc 1 3682 0
 4130 000e 1846     		mov	r0, r3
 4131 0010 0C37     		adds	r7, r7, #12
 4132              		.cfi_def_cfa_offset 4
 4133 0012 BD46     		mov	sp, r7
 4134              		.cfi_def_cfa_register 13
 4135              		@ sp needed
 4136 0014 5DF8047B 		ldr	r7, [sp], #4
 4137              		.cfi_restore 7
 4138              		.cfi_def_cfa_offset 0
 4139 0018 7047     		bx	lr
 4140              	.L322:
 4141 001a 00BF     		.align	2
 4142              	.L321:
 4143 001c 00000000 		.word	pxCurrentTCB
 4144              		.cfi_endproc
 4145              	.LFE167:
 4146              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 4147              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4148              		.align	2
 4149              		.global	xTaskGetSchedulerState
 4150              		.thumb
 4151              		.thumb_func
 4152              		.type	xTaskGetSchedulerState, %function
 4153              	xTaskGetSchedulerState:
 4154              	.LFB168:
3683:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3684:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3685:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
3686:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3687:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3688:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3689:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3690:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 4155              		.loc 1 3690 0
 4156              		.cfi_startproc
 4157              		@ args = 0, pretend = 0, frame = 8
 4158              		@ frame_needed = 1, uses_anonymous_args = 0
 4159              		@ link register save eliminated.
 4160 0000 80B4     		push	{r7}
 4161              		.cfi_def_cfa_offset 4
 4162              		.cfi_offset 7, -4
 4163 0002 83B0     		sub	sp, sp, #12
 4164              		.cfi_def_cfa_offset 16
 4165 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 144


 4166              		.cfi_def_cfa_register 7
3691:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	BaseType_t xReturn;
3692:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3693:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 4167              		.loc 1 3693 0
 4168 0006 0B4B     		ldr	r3, .L328
 4169 0008 1B68     		ldr	r3, [r3]
 4170 000a 002B     		cmp	r3, #0
 4171 000c 02D1     		bne	.L324
3694:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3695:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 4172              		.loc 1 3695 0
 4173 000e 0123     		movs	r3, #1
 4174 0010 7B60     		str	r3, [r7, #4]
 4175 0012 08E0     		b	.L325
 4176              	.L324:
3696:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3697:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
3698:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3699:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4177              		.loc 1 3699 0
 4178 0014 084B     		ldr	r3, .L328+4
 4179 0016 1B68     		ldr	r3, [r3]
 4180 0018 002B     		cmp	r3, #0
 4181 001a 02D1     		bne	.L326
3700:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
3701:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 4182              		.loc 1 3701 0
 4183 001c 0223     		movs	r3, #2
 4184 001e 7B60     		str	r3, [r7, #4]
 4185 0020 01E0     		b	.L325
 4186              	.L326:
3702:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
3703:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
3704:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
3705:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 4187              		.loc 1 3705 0
 4188 0022 0023     		movs	r3, #0
 4189 0024 7B60     		str	r3, [r7, #4]
 4190              	.L325:
3706:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
3707:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3708:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3709:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return xReturn;
 4191              		.loc 1 3709 0
 4192 0026 7B68     		ldr	r3, [r7, #4]
3710:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 4193              		.loc 1 3710 0
 4194 0028 1846     		mov	r0, r3
 4195 002a 0C37     		adds	r7, r7, #12
 4196              		.cfi_def_cfa_offset 4
 4197 002c BD46     		mov	sp, r7
 4198              		.cfi_def_cfa_register 13
 4199              		@ sp needed
 4200 002e 5DF8047B 		ldr	r7, [sp], #4
 4201              		.cfi_restore 7
 4202              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 145


 4203 0032 7047     		bx	lr
 4204              	.L329:
 4205              		.align	2
 4206              	.L328:
 4207 0034 0C010000 		.word	xSchedulerRunning
 4208 0038 28010000 		.word	uxSchedulerSuspended
 4209              		.cfi_endproc
 4210              	.LFE168:
 4211              		.size	xTaskGetSchedulerState, .-xTaskGetSchedulerState
 4212              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4213              		.align	2
 4214              		.global	uxTaskResetEventItemValue
 4215              		.thumb
 4216              		.thumb_func
 4217              		.type	uxTaskResetEventItemValue, %function
 4218              	uxTaskResetEventItemValue:
 4219              	.LFB169:
3711:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3712:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3713:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
3714:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3715:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3716:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3717:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3718:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
3719:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3720:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3721:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3722:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		locked then the mutex holder might now be NULL. */
3723:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( pxMutexHolder != NULL )
3724:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3725:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3726:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3727:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3728:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
3729:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
3730:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3731:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3732:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				not	being used for anything else. */
3733:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
3734:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
3735:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3736:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
3737:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else
3738:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
3739:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3740:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
3741:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3742:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3743:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				to be moved into a new list. */
3744:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListI
3745:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
3746:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3747:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
3748:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3749:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
3750:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					else
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 146


3751:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
3752:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3753:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
3754:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3755:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3756:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3757:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3758:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
3759:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else
3760:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
3761:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* Just inherit the priority. */
3762:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3763:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
3764:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3765:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3766:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
3767:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
3768:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
3769:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3770:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
3771:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3772:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
3773:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3774:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3775:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3776:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
3777:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3778:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* configUSE_MUTEXES */
3779:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
3780:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3781:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3782:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3783:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3784:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
3785:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3786:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3787:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3788:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( pxMutexHolder != NULL )
3789:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3790:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3791:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3792:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3793:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			be the running state task. */
3794:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3795:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3796:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3797:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3798:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3799:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3800:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			task? */
3801:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3802:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
3803:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3804:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3805:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
3806:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3807:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 147


3808:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3809:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					holding	task then it must be the running state task.  Remove
3810:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					the	holding task from the ready	list. */
3811:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3812:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
3813:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3814:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
3815:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					else
3816:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
3817:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3818:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
3819:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3820:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3821:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					new	ready list. */
3822:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3823:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3824:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3825:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3826:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					any other purpose if this task is running, and it must be
3827:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					running to give back the mutex. */
3828:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3829:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3830:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3831:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3832:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					This is only actually required in the corner case whereby
3833:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3834:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					in an order different to that in which they were taken.
3835:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3836:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3837:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3838:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					a task is waiting on it or not. */
3839:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					xReturn = pdTRUE;
3840:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
3841:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else
3842:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
3843:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3844:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
3845:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
3846:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
3847:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
3848:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3849:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
3850:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3851:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
3852:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3853:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3854:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3855:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3856:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return xReturn;
3857:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
3858:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3859:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* configUSE_MUTEXES */
3860:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
3861:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3862:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3863:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3864:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	void vTaskEnterCritical( void )
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 148


3865:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
3866:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		portDISABLE_INTERRUPTS();
3867:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3868:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3869:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3870:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3871:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3872:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3873:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
3874:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3875:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3876:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
3877:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			critical section. */
3878:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3879:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
3880:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				portASSERT_IF_IN_ISR();
3881:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
3882:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3883:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
3884:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3885:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3886:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3887:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
3888:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3889:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3890:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
3891:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3892:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3893:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3894:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	void vTaskExitCritical( void )
3895:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
3896:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3897:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3898:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3899:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
3900:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3901:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3902:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3903:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
3904:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					portENABLE_INTERRUPTS();
3905:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
3906:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else
3907:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
3908:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3909:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
3910:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
3911:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
3912:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
3913:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3914:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
3915:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3916:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
3917:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3918:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3919:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3920:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
3921:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 149


3922:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3923:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
3924:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3925:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3926:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3927:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3928:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
3929:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	size_t x;
3930:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3931:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Start by copying the entire string. */
3932:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3933:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3934:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3935:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		printed out. */
3936:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3937:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3938:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pcBuffer[ x ] = ' ';
3939:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
3940:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3941:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Terminate. */
3942:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
3943:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3944:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Return the new end of string. */
3945:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return &( pcBuffer[ x ] );
3946:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
3947:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3948:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3949:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
3950:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3951:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3952:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3953:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3954:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
3955:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3956:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3957:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	char cStatus;
3958:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3959:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/*
3960:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * PLEASE NOTE:
3961:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 *
3962:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3963:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3964:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * scheduler.
3965:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 *
3966:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3967:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3968:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * displays task names, states and stack usage.
3969:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 *
3970:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3971:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3972:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3973:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3974:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3975:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3976:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * snprintf() implementation!).
3977:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 *
3978:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 150


3979:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3980:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * through a call to vTaskList().
3981:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 */
3982:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3983:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3984:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3985:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		*pcWriteBuffer = 0x00;
3986:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3987:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3988:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		function is executing. */
3989:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3990:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3991:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
3992:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
3993:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		equate to NULL. */
3994:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3995:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
3996:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
3997:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
3998:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Generate the (binary) data. */
3999:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4000:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4001:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4002:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4003:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
4004:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4005:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
4006:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4007:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 										break;
4008:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4009:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4010:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 										break;
4011:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4012:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4013:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 										break;
4014:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4015:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4016:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 										break;
4017:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4018:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					default:			/* Should not get here, but it is included
4019:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 										to prevent static checking errors. */
4020:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 										cStatus = 0x00;
4021:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 										break;
4022:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
4023:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4024:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4025:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				can be printed in tabular form more easily. */
4026:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4027:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4028:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Write the rest of the string. */
4029:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4030:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4031:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
4032:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4033:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4034:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4035:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 151


4036:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
4037:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
4038:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
4039:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4040:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
4041:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
4042:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4043:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4044:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*----------------------------------------------------------*/
4045:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4046:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4047:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4048:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4049:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
4050:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4051:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4052:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4053:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4054:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4055:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
4056:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4057:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
4058:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		#endif
4059:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4060:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/*
4061:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * PLEASE NOTE:
4062:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 *
4063:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4064:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4065:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * scheduler.
4066:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 *
4067:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4068:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4069:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4070:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * in both absolute and percentage terms.
4071:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 *
4072:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4073:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4074:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4075:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4076:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4077:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4078:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * a full snprintf() implementation!).
4079:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 *
4080:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4081:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4082:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4083:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		 */
4084:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4085:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4086:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4087:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4088:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4089:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		function is executing. */
4090:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4091:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4092:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 152


4093:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4094:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		equate to NULL. */
4095:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4096:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4097:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4098:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
4099:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Generate the (binary) data. */
4100:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4101:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4102:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* For percentage calculations. */
4103:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			ulTotalTime /= 100UL;
4104:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4105:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Avoid divide by zero errors. */
4106:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( ulTotalTime > 0 )
4107:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
4108:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4109:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4110:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
4111:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4112:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4113:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4114:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4115:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4116:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* Write the task name to the string, padding with
4117:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					spaces so it can be printed in tabular form more
4118:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					easily. */
4119:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4120:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4121:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4122:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
4123:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4124:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						{
4125:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4126:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						}
4127:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						#else
4128:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						{
4129:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4130:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 							printf() library can be used. */
4131:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4132:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						}
4133:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						#endif
4134:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
4135:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					else
4136:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
4137:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						/* If the percentage is zero here then the task has
4138:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						consumed less than 1% of the total run time. */
4139:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4140:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						{
4141:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4142:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						}
4143:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						#else
4144:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						{
4145:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4146:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 							printf() library can be used. */
4147:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4148:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						}
4149:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						#endif
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 153


4150:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
4151:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4152:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4153:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
4154:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
4155:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
4156:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
4157:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4158:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
4159:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4160:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4161:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4162:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4163:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
4164:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
4165:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
4166:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4167:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
4168:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
4169:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4170:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4171:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
4172:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4173:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4174:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** {
 4220              		.loc 1 4174 0
 4221              		.cfi_startproc
 4222              		@ args = 0, pretend = 0, frame = 8
 4223              		@ frame_needed = 1, uses_anonymous_args = 0
 4224              		@ link register save eliminated.
 4225 0000 80B4     		push	{r7}
 4226              		.cfi_def_cfa_offset 4
 4227              		.cfi_offset 7, -4
 4228 0002 83B0     		sub	sp, sp, #12
 4229              		.cfi_def_cfa_offset 16
 4230 0004 00AF     		add	r7, sp, #0
 4231              		.cfi_def_cfa_register 7
4175:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** TickType_t uxReturn;
4176:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4177:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 4232              		.loc 1 4177 0
 4233 0006 094B     		ldr	r3, .L332
 4234 0008 1B68     		ldr	r3, [r3]
 4235 000a 9B69     		ldr	r3, [r3, #24]
 4236 000c 7B60     		str	r3, [r7, #4]
4178:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4179:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4180:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	queues and semaphores. */
4181:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 4237              		.loc 1 4181 0
 4238 000e 074B     		ldr	r3, .L332
 4239 0010 1B68     		ldr	r3, [r3]
 4240 0012 064A     		ldr	r2, .L332
 4241 0014 1268     		ldr	r2, [r2]
 4242 0016 D26A     		ldr	r2, [r2, #44]
 4243 0018 C2F10702 		rsb	r2, r2, #7
 4244 001c 9A61     		str	r2, [r3, #24]
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 154


4182:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4183:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	return uxReturn;
 4245              		.loc 1 4183 0
 4246 001e 7B68     		ldr	r3, [r7, #4]
4184:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** }
 4247              		.loc 1 4184 0
 4248 0020 1846     		mov	r0, r3
 4249 0022 0C37     		adds	r7, r7, #12
 4250              		.cfi_def_cfa_offset 4
 4251 0024 BD46     		mov	sp, r7
 4252              		.cfi_def_cfa_register 13
 4253              		@ sp needed
 4254 0026 5DF8047B 		ldr	r7, [sp], #4
 4255              		.cfi_restore 7
 4256              		.cfi_def_cfa_offset 0
 4257 002a 7047     		bx	lr
 4258              	.L333:
 4259              		.align	2
 4260              	.L332:
 4261 002c 00000000 		.word	pxCurrentTCB
 4262              		.cfi_endproc
 4263              	.LFE169:
 4264              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 4265              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4266              		.align	2
 4267              		.global	ulTaskNotifyTake
 4268              		.thumb
 4269              		.thumb_func
 4270              		.type	ulTaskNotifyTake, %function
 4271              	ulTaskNotifyTake:
 4272              	.LFB170:
4185:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
4186:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4187:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4188:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4189:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4190:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
4191:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4192:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4193:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4194:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
4195:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4196:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
4197:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4198:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return pxCurrentTCB;
4199:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
4200:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4201:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* configUSE_MUTEXES */
4202:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
4203:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4204:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4205:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4206:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4207:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 4273              		.loc 1 4207 0
 4274              		.cfi_startproc
 4275              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 155


 4276              		@ frame_needed = 1, uses_anonymous_args = 0
 4277 0000 80B5     		push	{r7, lr}
 4278              		.cfi_def_cfa_offset 8
 4279              		.cfi_offset 7, -8
 4280              		.cfi_offset 14, -4
 4281 0002 84B0     		sub	sp, sp, #16
 4282              		.cfi_def_cfa_offset 24
 4283 0004 00AF     		add	r7, sp, #0
 4284              		.cfi_def_cfa_register 7
 4285 0006 7860     		str	r0, [r7, #4]
 4286 0008 3960     		str	r1, [r7]
4208:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	uint32_t ulReturn;
4209:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4210:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		taskENTER_CRITICAL();
 4287              		.loc 1 4210 0
 4288 000a FFF7FEFF 		bl	vPortEnterCritical
4211:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
4212:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4213:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 4289              		.loc 1 4213 0
 4290 000e 1E4B     		ldr	r3, .L340
 4291 0010 1B68     		ldr	r3, [r3]
 4292 0012 9B6D     		ldr	r3, [r3, #88]
 4293 0014 002B     		cmp	r3, #0
 4294 0016 13D1     		bne	.L335
4214:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
4215:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4216:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 4295              		.loc 1 4216 0
 4296 0018 1B4B     		ldr	r3, .L340
 4297 001a 1B68     		ldr	r3, [r3]
 4298 001c 0122     		movs	r2, #1
 4299 001e 83F85C20 		strb	r2, [r3, #92]
4217:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4218:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 4300              		.loc 1 4218 0
 4301 0022 3B68     		ldr	r3, [r7]
 4302 0024 002B     		cmp	r3, #0
 4303 0026 0BD0     		beq	.L335
4219:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
4220:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4304              		.loc 1 4220 0
 4305 0028 0121     		movs	r1, #1
 4306 002a 3868     		ldr	r0, [r7]
 4307 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4221:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4222:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4223:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4224:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					section (some will yield immediately, others wait until the
4225:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					critical section exits) - but it is not something that
4226:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					application code should ever do. */
4227:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					portYIELD_WITHIN_API();
 4308              		.loc 1 4227 0
 4309 0030 164B     		ldr	r3, .L340+4
 4310 0032 4FF08052 		mov	r2, #268435456
 4311 0036 1A60     		str	r2, [r3]
 4312              		.syntax unified
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 156


 4313              	@ 4227 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 4314 0038 BFF34F8F 		dsb
 4315              	@ 0 "" 2
 4316              	@ 4227 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 4317 003c BFF36F8F 		isb
 4318              	@ 0 "" 2
 4319              		.thumb
 4320              		.syntax unified
 4321              	.L335:
4228:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
4229:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else
4230:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
4231:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4232:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
4233:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
4234:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
4235:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
4236:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4237:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
4238:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
4239:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		taskEXIT_CRITICAL();
 4322              		.loc 1 4239 0
 4323 0040 FFF7FEFF 		bl	vPortExitCritical
4240:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4241:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		taskENTER_CRITICAL();
 4324              		.loc 1 4241 0
 4325 0044 FFF7FEFF 		bl	vPortEnterCritical
4242:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
4243:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4244:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 4326              		.loc 1 4244 0
 4327 0048 0F4B     		ldr	r3, .L340
 4328 004a 1B68     		ldr	r3, [r3]
 4329 004c 9B6D     		ldr	r3, [r3, #88]
 4330 004e FB60     		str	r3, [r7, #12]
4245:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4246:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( ulReturn != 0UL )
 4331              		.loc 1 4246 0
 4332 0050 FB68     		ldr	r3, [r7, #12]
 4333 0052 002B     		cmp	r3, #0
 4334 0054 0CD0     		beq	.L336
4247:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
4248:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 4335              		.loc 1 4248 0
 4336 0056 7B68     		ldr	r3, [r7, #4]
 4337 0058 002B     		cmp	r3, #0
 4338 005a 04D0     		beq	.L337
4249:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
4250:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 4339              		.loc 1 4250 0
 4340 005c 0A4B     		ldr	r3, .L340
 4341 005e 1B68     		ldr	r3, [r3]
 4342 0060 0022     		movs	r2, #0
 4343 0062 9A65     		str	r2, [r3, #88]
 4344 0064 04E0     		b	.L336
 4345              	.L337:
4251:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 157


4252:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else
4253:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
4254:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
 4346              		.loc 1 4254 0
 4347 0066 084B     		ldr	r3, .L340
 4348 0068 1B68     		ldr	r3, [r3]
 4349 006a FA68     		ldr	r2, [r7, #12]
 4350 006c 013A     		subs	r2, r2, #1
 4351 006e 9A65     		str	r2, [r3, #88]
 4352              	.L336:
4255:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
4256:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
4257:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
4258:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
4259:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4260:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
4261:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4262:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 4353              		.loc 1 4262 0
 4354 0070 054B     		ldr	r3, .L340
 4355 0072 1B68     		ldr	r3, [r3]
 4356 0074 0022     		movs	r2, #0
 4357 0076 83F85C20 		strb	r2, [r3, #92]
4263:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
4264:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		taskEXIT_CRITICAL();
 4358              		.loc 1 4264 0
 4359 007a FFF7FEFF 		bl	vPortExitCritical
4265:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4266:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return ulReturn;
 4360              		.loc 1 4266 0
 4361 007e FB68     		ldr	r3, [r7, #12]
4267:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 4362              		.loc 1 4267 0
 4363 0080 1846     		mov	r0, r3
 4364 0082 1037     		adds	r7, r7, #16
 4365              		.cfi_def_cfa_offset 8
 4366 0084 BD46     		mov	sp, r7
 4367              		.cfi_def_cfa_register 13
 4368              		@ sp needed
 4369 0086 80BD     		pop	{r7, pc}
 4370              	.L341:
 4371              		.align	2
 4372              	.L340:
 4373 0088 00000000 		.word	pxCurrentTCB
 4374 008c 04ED00E0 		.word	-536810236
 4375              		.cfi_endproc
 4376              	.LFE170:
 4377              		.size	ulTaskNotifyTake, .-ulTaskNotifyTake
 4378              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4379              		.align	2
 4380              		.global	xTaskNotifyWait
 4381              		.thumb
 4382              		.thumb_func
 4383              		.type	xTaskNotifyWait, %function
 4384              	xTaskNotifyWait:
 4385              	.LFB171:
4268:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 158


4269:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4270:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
4271:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4272:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4273:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4274:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4275:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 4386              		.loc 1 4275 0
 4387              		.cfi_startproc
 4388              		@ args = 0, pretend = 0, frame = 24
 4389              		@ frame_needed = 1, uses_anonymous_args = 0
 4390 0000 80B5     		push	{r7, lr}
 4391              		.cfi_def_cfa_offset 8
 4392              		.cfi_offset 7, -8
 4393              		.cfi_offset 14, -4
 4394 0002 86B0     		sub	sp, sp, #24
 4395              		.cfi_def_cfa_offset 32
 4396 0004 00AF     		add	r7, sp, #0
 4397              		.cfi_def_cfa_register 7
 4398 0006 F860     		str	r0, [r7, #12]
 4399 0008 B960     		str	r1, [r7, #8]
 4400 000a 7A60     		str	r2, [r7, #4]
 4401 000c 3B60     		str	r3, [r7]
4276:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	BaseType_t xReturn;
4277:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4278:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		taskENTER_CRITICAL();
 4402              		.loc 1 4278 0
 4403 000e FFF7FEFF 		bl	vPortEnterCritical
4279:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
4280:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4281:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 4404              		.loc 1 4281 0
 4405 0012 264B     		ldr	r3, .L348
 4406 0014 1B68     		ldr	r3, [r3]
 4407 0016 93F85C30 		ldrb	r3, [r3, #92]
 4408 001a DBB2     		uxtb	r3, r3
 4409 001c 022B     		cmp	r3, #2
 4410 001e 1AD0     		beq	.L343
4282:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
4283:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4284:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4285:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				clear the value to zero. */
4286:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 4411              		.loc 1 4286 0
 4412 0020 224B     		ldr	r3, .L348
 4413 0022 1B68     		ldr	r3, [r3]
 4414 0024 996D     		ldr	r1, [r3, #88]
 4415 0026 FA68     		ldr	r2, [r7, #12]
 4416 0028 D243     		mvns	r2, r2
 4417 002a 0A40     		ands	r2, r2, r1
 4418 002c 9A65     		str	r2, [r3, #88]
4287:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4288:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4289:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 4419              		.loc 1 4289 0
 4420 002e 1F4B     		ldr	r3, .L348
 4421 0030 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 159


 4422 0032 0122     		movs	r2, #1
 4423 0034 83F85C20 		strb	r2, [r3, #92]
4290:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4291:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 4424              		.loc 1 4291 0
 4425 0038 3B68     		ldr	r3, [r7]
 4426 003a 002B     		cmp	r3, #0
 4427 003c 0BD0     		beq	.L343
4292:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
4293:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4428              		.loc 1 4293 0
 4429 003e 0121     		movs	r1, #1
 4430 0040 3868     		ldr	r0, [r7]
 4431 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4294:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4295:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4296:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4297:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					section (some will yield immediately, others wait until the
4298:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					critical section exits) - but it is not something that
4299:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					application code should ever do. */
4300:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					portYIELD_WITHIN_API();
 4432              		.loc 1 4300 0
 4433 0046 1A4B     		ldr	r3, .L348+4
 4434 0048 4FF08052 		mov	r2, #268435456
 4435 004c 1A60     		str	r2, [r3]
 4436              		.syntax unified
 4437              	@ 4300 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 4438 004e BFF34F8F 		dsb
 4439              	@ 0 "" 2
 4440              	@ 4300 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 4441 0052 BFF36F8F 		isb
 4442              	@ 0 "" 2
 4443              		.thumb
 4444              		.syntax unified
 4445              	.L343:
4301:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
4302:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else
4303:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
4304:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4305:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
4306:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
4307:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
4308:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
4309:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4310:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
4311:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
4312:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		taskEXIT_CRITICAL();
 4446              		.loc 1 4312 0
 4447 0056 FFF7FEFF 		bl	vPortExitCritical
4313:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4314:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		taskENTER_CRITICAL();
 4448              		.loc 1 4314 0
 4449 005a FFF7FEFF 		bl	vPortEnterCritical
4315:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
4316:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4317:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4318:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( pulNotificationValue != NULL )
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 160


 4450              		.loc 1 4318 0
 4451 005e 7B68     		ldr	r3, [r7, #4]
 4452 0060 002B     		cmp	r3, #0
 4453 0062 04D0     		beq	.L344
4319:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
4320:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Output the current notification value, which may or may not
4321:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				have changed. */
4322:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 4454              		.loc 1 4322 0
 4455 0064 114B     		ldr	r3, .L348
 4456 0066 1B68     		ldr	r3, [r3]
 4457 0068 9A6D     		ldr	r2, [r3, #88]
 4458 006a 7B68     		ldr	r3, [r7, #4]
 4459 006c 1A60     		str	r2, [r3]
 4460              	.L344:
4323:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
4324:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4325:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4326:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4327:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4328:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			unblocked because of a timeout. */
4329:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 4461              		.loc 1 4329 0
 4462 006e 0F4B     		ldr	r3, .L348
 4463 0070 1B68     		ldr	r3, [r3]
 4464 0072 93F85C30 		ldrb	r3, [r3, #92]
 4465 0076 DBB2     		uxtb	r3, r3
 4466 0078 012B     		cmp	r3, #1
 4467 007a 02D1     		bne	.L345
4330:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
4331:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* A notification was not received. */
4332:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				xReturn = pdFALSE;
 4468              		.loc 1 4332 0
 4469 007c 0023     		movs	r3, #0
 4470 007e 7B61     		str	r3, [r7, #20]
 4471 0080 08E0     		b	.L346
 4472              	.L345:
4333:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
4334:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
4335:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
4336:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* A notification was already pending or a notification was
4337:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				received while the task was waiting. */
4338:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 4473              		.loc 1 4338 0
 4474 0082 0A4B     		ldr	r3, .L348
 4475 0084 1B68     		ldr	r3, [r3]
 4476 0086 996D     		ldr	r1, [r3, #88]
 4477 0088 BA68     		ldr	r2, [r7, #8]
 4478 008a D243     		mvns	r2, r2
 4479 008c 0A40     		ands	r2, r2, r1
 4480 008e 9A65     		str	r2, [r3, #88]
4339:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				xReturn = pdTRUE;
 4481              		.loc 1 4339 0
 4482 0090 0123     		movs	r3, #1
 4483 0092 7B61     		str	r3, [r7, #20]
 4484              	.L346:
4340:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 161


4341:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4342:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 4485              		.loc 1 4342 0
 4486 0094 054B     		ldr	r3, .L348
 4487 0096 1B68     		ldr	r3, [r3]
 4488 0098 0022     		movs	r2, #0
 4489 009a 83F85C20 		strb	r2, [r3, #92]
4343:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
4344:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		taskEXIT_CRITICAL();
 4490              		.loc 1 4344 0
 4491 009e FFF7FEFF 		bl	vPortExitCritical
4345:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4346:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return xReturn;
 4492              		.loc 1 4346 0
 4493 00a2 7B69     		ldr	r3, [r7, #20]
4347:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 4494              		.loc 1 4347 0
 4495 00a4 1846     		mov	r0, r3
 4496 00a6 1837     		adds	r7, r7, #24
 4497              		.cfi_def_cfa_offset 8
 4498 00a8 BD46     		mov	sp, r7
 4499              		.cfi_def_cfa_register 13
 4500              		@ sp needed
 4501 00aa 80BD     		pop	{r7, pc}
 4502              	.L349:
 4503              		.align	2
 4504              	.L348:
 4505 00ac 00000000 		.word	pxCurrentTCB
 4506 00b0 04ED00E0 		.word	-536810236
 4507              		.cfi_endproc
 4508              	.LFE171:
 4509              		.size	xTaskNotifyWait, .-xTaskNotifyWait
 4510              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4511              		.align	2
 4512              		.global	xTaskGenericNotify
 4513              		.thumb
 4514              		.thumb_func
 4515              		.type	xTaskGenericNotify, %function
 4516              	xTaskGenericNotify:
 4517              	.LFB172:
4348:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4349:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4350:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
4351:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4352:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4353:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4354:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4355:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 4518              		.loc 1 4355 0
 4519              		.cfi_startproc
 4520              		@ args = 0, pretend = 0, frame = 32
 4521              		@ frame_needed = 1, uses_anonymous_args = 0
 4522 0000 80B5     		push	{r7, lr}
 4523              		.cfi_def_cfa_offset 8
 4524              		.cfi_offset 7, -8
 4525              		.cfi_offset 14, -4
 4526 0002 88B0     		sub	sp, sp, #32
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 162


 4527              		.cfi_def_cfa_offset 40
 4528 0004 00AF     		add	r7, sp, #0
 4529              		.cfi_def_cfa_register 7
 4530 0006 F860     		str	r0, [r7, #12]
 4531 0008 B960     		str	r1, [r7, #8]
 4532 000a 3B60     		str	r3, [r7]
 4533 000c 1346     		mov	r3, r2
 4534 000e FB71     		strb	r3, [r7, #7]
4356:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t * pxTCB;
4357:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 4535              		.loc 1 4357 0
 4536 0010 0123     		movs	r3, #1
 4537 0012 FB61     		str	r3, [r7, #28]
4358:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4359:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4360:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		configASSERT( xTaskToNotify );
 4538              		.loc 1 4360 0
 4539 0014 FB68     		ldr	r3, [r7, #12]
 4540 0016 002B     		cmp	r3, #0
 4541 0018 01D1     		bne	.L351
 4542              		.loc 1 4360 0 is_stmt 0 discriminator 1
 4543              		.syntax unified
 4544              	@ 4360 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 4545 001a 72B6     		 cpsid i 
 4546              	@ 0 "" 2
 4547              		.thumb
 4548              		.syntax unified
 4549              	.L352:
 4550 001c FEE7     		b	.L352
 4551              	.L351:
4361:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4552              		.loc 1 4361 0 is_stmt 1
 4553 001e FB68     		ldr	r3, [r7, #12]
 4554 0020 BB61     		str	r3, [r7, #24]
4362:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4363:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		taskENTER_CRITICAL();
 4555              		.loc 1 4363 0
 4556 0022 FFF7FEFF 		bl	vPortEnterCritical
4364:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
4365:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 4557              		.loc 1 4365 0
 4558 0026 3B68     		ldr	r3, [r7]
 4559 0028 002B     		cmp	r3, #0
 4560 002a 03D0     		beq	.L353
4366:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
4367:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 4561              		.loc 1 4367 0
 4562 002c BB69     		ldr	r3, [r7, #24]
 4563 002e 9A6D     		ldr	r2, [r3, #88]
 4564 0030 3B68     		ldr	r3, [r7]
 4565 0032 1A60     		str	r2, [r3]
 4566              	.L353:
4368:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
4369:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4370:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 4567              		.loc 1 4370 0
 4568 0034 BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 163


 4569 0036 93F85C30 		ldrb	r3, [r3, #92]
 4570 003a FB75     		strb	r3, [r7, #23]
4371:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4372:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4571              		.loc 1 4372 0
 4572 003c BB69     		ldr	r3, [r7, #24]
 4573 003e 0222     		movs	r2, #2
 4574 0040 83F85C20 		strb	r2, [r3, #92]
4373:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4374:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			switch( eAction )
 4575              		.loc 1 4374 0
 4576 0044 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4577 0046 042B     		cmp	r3, #4
 4578 0048 27D8     		bhi	.L354
 4579 004a 01A2     		adr	r2, .L356
 4580 004c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4581              		.p2align 2
 4582              	.L356:
 4583 0050 9B000000 		.word	.L354+1
 4584 0054 65000000 		.word	.L357+1
 4585 0058 73000000 		.word	.L358+1
 4586 005c 7F000000 		.word	.L359+1
 4587 0060 87000000 		.word	.L360+1
 4588              		.p2align 1
 4589              	.L357:
4375:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
4376:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				case eSetBits	:
4377:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 4590              		.loc 1 4377 0
 4591 0064 BB69     		ldr	r3, [r7, #24]
 4592 0066 9A6D     		ldr	r2, [r3, #88]
 4593 0068 BB68     		ldr	r3, [r7, #8]
 4594 006a 1A43     		orrs	r2, r2, r3
 4595 006c BB69     		ldr	r3, [r7, #24]
 4596 006e 9A65     		str	r2, [r3, #88]
4378:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					break;
 4597              		.loc 1 4378 0
 4598 0070 13E0     		b	.L354
 4599              	.L358:
4379:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4380:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				case eIncrement	:
4381:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 4600              		.loc 1 4381 0
 4601 0072 BB69     		ldr	r3, [r7, #24]
 4602 0074 9B6D     		ldr	r3, [r3, #88]
 4603 0076 5A1C     		adds	r2, r3, #1
 4604 0078 BB69     		ldr	r3, [r7, #24]
 4605 007a 9A65     		str	r2, [r3, #88]
4382:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					break;
 4606              		.loc 1 4382 0
 4607 007c 0DE0     		b	.L354
 4608              	.L359:
4383:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4384:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				case eSetValueWithOverwrite	:
4385:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 4609              		.loc 1 4385 0
 4610 007e BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 164


 4611 0080 BA68     		ldr	r2, [r7, #8]
 4612 0082 9A65     		str	r2, [r3, #88]
4386:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					break;
 4613              		.loc 1 4386 0
 4614 0084 09E0     		b	.L354
 4615              	.L360:
4387:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4388:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4389:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 4616              		.loc 1 4389 0
 4617 0086 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4618 0088 022B     		cmp	r3, #2
 4619 008a 03D0     		beq	.L361
4390:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
4391:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 4620              		.loc 1 4391 0
 4621 008c BB69     		ldr	r3, [r7, #24]
 4622 008e BA68     		ldr	r2, [r7, #8]
 4623 0090 9A65     		str	r2, [r3, #88]
4392:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
4393:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					else
4394:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
4395:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						/* The value could not be written to the task. */
4396:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						xReturn = pdFAIL;
4397:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
4398:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					break;
 4624              		.loc 1 4398 0
 4625 0092 01E0     		b	.L368
 4626              	.L361:
4396:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
 4627              		.loc 1 4396 0
 4628 0094 0023     		movs	r3, #0
 4629 0096 FB61     		str	r3, [r7, #28]
 4630              	.L368:
 4631              		.loc 1 4398 0
 4632 0098 00BF     		nop
 4633              	.L354:
4399:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4400:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				case eNoAction:
4401:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* The task is being notified without its notify value being
4402:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					updated. */
4403:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					break;
4404:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
4405:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4406:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			traceTASK_NOTIFY();
4407:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4408:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4409:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			notification then unblock it now. */
4410:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 4634              		.loc 1 4410 0
 4635 009a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4636 009c 012B     		cmp	r3, #1
 4637 009e 31D1     		bne	.L363
4411:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
4412:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 4638              		.loc 1 4412 0
 4639 00a0 BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 165


 4640 00a2 0433     		adds	r3, r3, #4
 4641 00a4 1846     		mov	r0, r3
 4642 00a6 FFF7FEFF 		bl	uxListRemove
4413:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4643              		.loc 1 4413 0
 4644 00aa BB69     		ldr	r3, [r7, #24]
 4645 00ac DA6A     		ldr	r2, [r3, #44]
 4646 00ae 194B     		ldr	r3, .L369
 4647 00b0 1B68     		ldr	r3, [r3]
 4648 00b2 9A42     		cmp	r2, r3
 4649 00b4 03D9     		bls	.L364
 4650              		.loc 1 4413 0 is_stmt 0 discriminator 1
 4651 00b6 BB69     		ldr	r3, [r7, #24]
 4652 00b8 DB6A     		ldr	r3, [r3, #44]
 4653 00ba 164A     		ldr	r2, .L369
 4654 00bc 1360     		str	r3, [r2]
 4655              	.L364:
 4656              		.loc 1 4413 0 discriminator 3
 4657 00be BB69     		ldr	r3, [r7, #24]
 4658 00c0 DA6A     		ldr	r2, [r3, #44]
 4659 00c2 1346     		mov	r3, r2
 4660 00c4 9B00     		lsls	r3, r3, #2
 4661 00c6 1344     		add	r3, r3, r2
 4662 00c8 9B00     		lsls	r3, r3, #2
 4663 00ca 134A     		ldr	r2, .L369+4
 4664 00cc 1A44     		add	r2, r2, r3
 4665 00ce BB69     		ldr	r3, [r7, #24]
 4666 00d0 0433     		adds	r3, r3, #4
 4667 00d2 1946     		mov	r1, r3
 4668 00d4 1046     		mov	r0, r2
 4669 00d6 FFF7FEFF 		bl	vListInsertEnd
4414:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4415:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* The task should not have been on an event list. */
4416:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 4670              		.loc 1 4416 0 is_stmt 1 discriminator 3
 4671 00da BB69     		ldr	r3, [r7, #24]
 4672 00dc 9B6A     		ldr	r3, [r3, #40]
 4673 00de 002B     		cmp	r3, #0
 4674 00e0 01D0     		beq	.L365
 4675              		.loc 1 4416 0 is_stmt 0 discriminator 1
 4676              		.syntax unified
 4677              	@ 4416 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 4678 00e2 72B6     		 cpsid i 
 4679              	@ 0 "" 2
 4680              		.thumb
 4681              		.syntax unified
 4682              	.L366:
 4683              		.loc 1 4416 0 discriminator 2
 4684 00e4 FEE7     		b	.L366
 4685              	.L365:
4417:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4418:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4419:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
4420:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4421:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4422:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4423:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 166


4424:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					because it will automatically get reset to a new value when
4425:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4426:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					tickless idling is used it might be more important to enter
4427:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4428:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4429:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					earliest possible time. */
4430:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4431:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
4432:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				#endif
4433:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4434:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 4686              		.loc 1 4434 0 is_stmt 1
 4687 00e6 BB69     		ldr	r3, [r7, #24]
 4688 00e8 DA6A     		ldr	r2, [r3, #44]
 4689 00ea 0C4B     		ldr	r3, .L369+8
 4690 00ec 1B68     		ldr	r3, [r3]
 4691 00ee DB6A     		ldr	r3, [r3, #44]
 4692 00f0 9A42     		cmp	r2, r3
 4693 00f2 07D9     		bls	.L363
4435:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
4436:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* The notified task has a priority above the currently
4437:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					executing task so a yield is required. */
4438:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 4694              		.loc 1 4438 0
 4695 00f4 0A4B     		ldr	r3, .L369+12
 4696 00f6 4FF08052 		mov	r2, #268435456
 4697 00fa 1A60     		str	r2, [r3]
 4698              		.syntax unified
 4699              	@ 4438 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 4700 00fc BFF34F8F 		dsb
 4701              	@ 0 "" 2
 4702              	@ 4438 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 4703 0100 BFF36F8F 		isb
 4704              	@ 0 "" 2
 4705              		.thumb
 4706              		.syntax unified
 4707              	.L363:
4439:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
4440:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else
4441:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
4442:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4443:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
4444:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
4445:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
4446:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
4447:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4448:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
4449:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
4450:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		taskEXIT_CRITICAL();
 4708              		.loc 1 4450 0
 4709 0104 FFF7FEFF 		bl	vPortExitCritical
4451:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4452:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return xReturn;
 4710              		.loc 1 4452 0
 4711 0108 FB69     		ldr	r3, [r7, #28]
4453:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 4712              		.loc 1 4453 0
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 167


 4713 010a 1846     		mov	r0, r3
 4714 010c 2037     		adds	r7, r7, #32
 4715              		.cfi_def_cfa_offset 8
 4716 010e BD46     		mov	sp, r7
 4717              		.cfi_def_cfa_register 13
 4718              		@ sp needed
 4719 0110 80BD     		pop	{r7, pc}
 4720              	.L370:
 4721 0112 00BF     		.align	2
 4722              	.L369:
 4723 0114 08010000 		.word	uxTopReadyPriority
 4724 0118 04000000 		.word	pxReadyTasksLists
 4725 011c 00000000 		.word	pxCurrentTCB
 4726 0120 04ED00E0 		.word	-536810236
 4727              		.cfi_endproc
 4728              	.LFE172:
 4729              		.size	xTaskGenericNotify, .-xTaskGenericNotify
 4730              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4731              		.align	2
 4732              		.global	xTaskGenericNotifyFromISR
 4733              		.thumb
 4734              		.thumb_func
 4735              		.type	xTaskGenericNotifyFromISR, %function
 4736              	xTaskGenericNotifyFromISR:
 4737              	.LFB173:
4454:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4455:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4456:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
4457:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4458:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4459:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4460:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4461:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 4738              		.loc 1 4461 0
 4739              		.cfi_startproc
 4740              		@ args = 4, pretend = 0, frame = 48
 4741              		@ frame_needed = 1, uses_anonymous_args = 0
 4742 0000 80B5     		push	{r7, lr}
 4743              		.cfi_def_cfa_offset 8
 4744              		.cfi_offset 7, -8
 4745              		.cfi_offset 14, -4
 4746 0002 8CB0     		sub	sp, sp, #48
 4747              		.cfi_def_cfa_offset 56
 4748 0004 00AF     		add	r7, sp, #0
 4749              		.cfi_def_cfa_register 7
 4750 0006 F860     		str	r0, [r7, #12]
 4751 0008 B960     		str	r1, [r7, #8]
 4752 000a 3B60     		str	r3, [r7]
 4753 000c 1346     		mov	r3, r2
 4754 000e FB71     		strb	r3, [r7, #7]
4462:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t * pxTCB;
4463:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4464:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 4755              		.loc 1 4464 0
 4756 0010 0123     		movs	r3, #1
 4757 0012 FB62     		str	r3, [r7, #44]
4465:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 168


4466:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4467:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		configASSERT( xTaskToNotify );
 4758              		.loc 1 4467 0
 4759 0014 FB68     		ldr	r3, [r7, #12]
 4760 0016 002B     		cmp	r3, #0
 4761 0018 01D1     		bne	.L372
 4762              		.loc 1 4467 0 is_stmt 0 discriminator 1
 4763              		.syntax unified
 4764              	@ 4467 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 4765 001a 72B6     		 cpsid i 
 4766              	@ 0 "" 2
 4767              		.thumb
 4768              		.syntax unified
 4769              	.L373:
 4770 001c FEE7     		b	.L373
 4771              	.L372:
4468:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4469:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4470:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4471:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4472:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4473:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4474:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4475:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4476:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4477:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4478:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4479:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4480:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4481:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4482:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4483:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		provided on the following link:
4484:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4485:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 4772              		.loc 1 4485 0 is_stmt 1
 4773 001e FFF7FEFF 		bl	vPortValidateInterruptPriority
4486:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4487:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4774              		.loc 1 4487 0
 4775 0022 FB68     		ldr	r3, [r7, #12]
 4776 0024 BB62     		str	r3, [r7, #40]
 4777              	.LBB37:
 4778              	.LBB38:
 215:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     (
 4779              		.loc 2 215 0
 4780              		.syntax unified
 4781              	@ 215 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h" 1
 4782 0026 EFF31182 		    mrs r2, basepri                                            
 4783 002a 4FF0BF03 	    mov r3, #191                                                 
 4784 002e 83F31188 	    msr basepri, r3                                            
 4785 0032 BFF36F8F 	    isb                                                        
 4786 0036 BFF34F8F 	    dsb                                                        
 4787              	
 4788              	@ 0 "" 2
 4789              		.thumb
 4790              		.syntax unified
 4791 003a BA61     		str	r2, [r7, #24]
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 169


 4792 003c 7B61     		str	r3, [r7, #20]
 227:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** }
 4793              		.loc 2 227 0
 4794 003e BB69     		ldr	r3, [r7, #24]
 4795              	.LBE38:
 4796              	.LBE37:
4488:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4489:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 4797              		.loc 1 4489 0
 4798 0040 3B62     		str	r3, [r7, #32]
4490:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
4491:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 4799              		.loc 1 4491 0
 4800 0042 3B68     		ldr	r3, [r7]
 4801 0044 002B     		cmp	r3, #0
 4802 0046 03D0     		beq	.L375
4492:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
4493:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 4803              		.loc 1 4493 0
 4804 0048 BB6A     		ldr	r3, [r7, #40]
 4805 004a 9A6D     		ldr	r2, [r3, #88]
 4806 004c 3B68     		ldr	r3, [r7]
 4807 004e 1A60     		str	r2, [r3]
 4808              	.L375:
4494:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
4495:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4496:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 4809              		.loc 1 4496 0
 4810 0050 BB6A     		ldr	r3, [r7, #40]
 4811 0052 93F85C30 		ldrb	r3, [r3, #92]
 4812 0056 FB77     		strb	r3, [r7, #31]
4497:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4813              		.loc 1 4497 0
 4814 0058 BB6A     		ldr	r3, [r7, #40]
 4815 005a 0222     		movs	r2, #2
 4816 005c 83F85C20 		strb	r2, [r3, #92]
4498:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4499:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			switch( eAction )
 4817              		.loc 1 4499 0
 4818 0060 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4819 0062 042B     		cmp	r3, #4
 4820 0064 27D8     		bhi	.L376
 4821 0066 01A2     		adr	r2, .L378
 4822 0068 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4823              		.p2align 2
 4824              	.L378:
 4825 006c B7000000 		.word	.L376+1
 4826 0070 81000000 		.word	.L379+1
 4827 0074 8F000000 		.word	.L380+1
 4828 0078 9B000000 		.word	.L381+1
 4829 007c A3000000 		.word	.L382+1
 4830              		.p2align 1
 4831              	.L379:
4500:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
4501:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				case eSetBits	:
4502:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 4832              		.loc 1 4502 0
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 170


 4833 0080 BB6A     		ldr	r3, [r7, #40]
 4834 0082 9A6D     		ldr	r2, [r3, #88]
 4835 0084 BB68     		ldr	r3, [r7, #8]
 4836 0086 1A43     		orrs	r2, r2, r3
 4837 0088 BB6A     		ldr	r3, [r7, #40]
 4838 008a 9A65     		str	r2, [r3, #88]
4503:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					break;
 4839              		.loc 1 4503 0
 4840 008c 13E0     		b	.L376
 4841              	.L380:
4504:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4505:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				case eIncrement	:
4506:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 4842              		.loc 1 4506 0
 4843 008e BB6A     		ldr	r3, [r7, #40]
 4844 0090 9B6D     		ldr	r3, [r3, #88]
 4845 0092 5A1C     		adds	r2, r3, #1
 4846 0094 BB6A     		ldr	r3, [r7, #40]
 4847 0096 9A65     		str	r2, [r3, #88]
4507:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					break;
 4848              		.loc 1 4507 0
 4849 0098 0DE0     		b	.L376
 4850              	.L381:
4508:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4509:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				case eSetValueWithOverwrite	:
4510:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 4851              		.loc 1 4510 0
 4852 009a BB6A     		ldr	r3, [r7, #40]
 4853 009c BA68     		ldr	r2, [r7, #8]
 4854 009e 9A65     		str	r2, [r3, #88]
4511:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					break;
 4855              		.loc 1 4511 0
 4856 00a0 09E0     		b	.L376
 4857              	.L382:
4512:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4513:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4514:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 4858              		.loc 1 4514 0
 4859 00a2 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4860 00a4 022B     		cmp	r3, #2
 4861 00a6 03D0     		beq	.L383
4515:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
4516:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 4862              		.loc 1 4516 0
 4863 00a8 BB6A     		ldr	r3, [r7, #40]
 4864 00aa BA68     		ldr	r2, [r7, #8]
 4865 00ac 9A65     		str	r2, [r3, #88]
4517:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
4518:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					else
4519:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
4520:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						/* The value could not be written to the task. */
4521:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						xReturn = pdFAIL;
4522:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
4523:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					break;
 4866              		.loc 1 4523 0
 4867 00ae 01E0     		b	.L394
 4868              	.L383:
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 171


4521:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
 4869              		.loc 1 4521 0
 4870 00b0 0023     		movs	r3, #0
 4871 00b2 FB62     		str	r3, [r7, #44]
 4872              	.L394:
 4873              		.loc 1 4523 0
 4874 00b4 00BF     		nop
 4875              	.L376:
4524:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4525:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				case eNoAction :
4526:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* The task is being notified without its notify value being
4527:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					updated. */
4528:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					break;
4529:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
4530:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4531:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4532:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4533:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4534:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			notification then unblock it now. */
4535:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 4876              		.loc 1 4535 0
 4877 00b6 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4878 00b8 012B     		cmp	r3, #1
 4879 00ba 3ED1     		bne	.L385
4536:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
4537:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* The task should not have been on an event list. */
4538:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 4880              		.loc 1 4538 0
 4881 00bc BB6A     		ldr	r3, [r7, #40]
 4882 00be 9B6A     		ldr	r3, [r3, #40]
 4883 00c0 002B     		cmp	r3, #0
 4884 00c2 01D0     		beq	.L386
 4885              		.loc 1 4538 0 is_stmt 0 discriminator 1
 4886              		.syntax unified
 4887              	@ 4538 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 4888 00c4 72B6     		 cpsid i 
 4889              	@ 0 "" 2
 4890              		.thumb
 4891              		.syntax unified
 4892              	.L387:
 4893              		.loc 1 4538 0 discriminator 2
 4894 00c6 FEE7     		b	.L387
 4895              	.L386:
4539:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4540:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4896              		.loc 1 4540 0 is_stmt 1
 4897 00c8 214B     		ldr	r3, .L395
 4898 00ca 1B68     		ldr	r3, [r3]
 4899 00cc 002B     		cmp	r3, #0
 4900 00ce 1DD1     		bne	.L388
4541:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
4542:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 4901              		.loc 1 4542 0
 4902 00d0 BB6A     		ldr	r3, [r7, #40]
 4903 00d2 0433     		adds	r3, r3, #4
 4904 00d4 1846     		mov	r0, r3
 4905 00d6 FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 172


4543:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4906              		.loc 1 4543 0
 4907 00da BB6A     		ldr	r3, [r7, #40]
 4908 00dc DA6A     		ldr	r2, [r3, #44]
 4909 00de 1D4B     		ldr	r3, .L395+4
 4910 00e0 1B68     		ldr	r3, [r3]
 4911 00e2 9A42     		cmp	r2, r3
 4912 00e4 03D9     		bls	.L389
 4913              		.loc 1 4543 0 is_stmt 0 discriminator 1
 4914 00e6 BB6A     		ldr	r3, [r7, #40]
 4915 00e8 DB6A     		ldr	r3, [r3, #44]
 4916 00ea 1A4A     		ldr	r2, .L395+4
 4917 00ec 1360     		str	r3, [r2]
 4918              	.L389:
 4919              		.loc 1 4543 0 discriminator 3
 4920 00ee BB6A     		ldr	r3, [r7, #40]
 4921 00f0 DA6A     		ldr	r2, [r3, #44]
 4922 00f2 1346     		mov	r3, r2
 4923 00f4 9B00     		lsls	r3, r3, #2
 4924 00f6 1344     		add	r3, r3, r2
 4925 00f8 9B00     		lsls	r3, r3, #2
 4926 00fa 174A     		ldr	r2, .L395+8
 4927 00fc 1A44     		add	r2, r2, r3
 4928 00fe BB6A     		ldr	r3, [r7, #40]
 4929 0100 0433     		adds	r3, r3, #4
 4930 0102 1946     		mov	r1, r3
 4931 0104 1046     		mov	r0, r2
 4932 0106 FFF7FEFF 		bl	vListInsertEnd
 4933 010a 05E0     		b	.L390
 4934              	.L388:
4544:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
4545:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else
4546:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
4547:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4548:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4549:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 4935              		.loc 1 4549 0 is_stmt 1
 4936 010c BB6A     		ldr	r3, [r7, #40]
 4937 010e 1833     		adds	r3, r3, #24
 4938 0110 1946     		mov	r1, r3
 4939 0112 1248     		ldr	r0, .L395+12
 4940 0114 FFF7FEFF 		bl	vListInsertEnd
 4941              	.L390:
4550:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
4551:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4552:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 4942              		.loc 1 4552 0
 4943 0118 BB6A     		ldr	r3, [r7, #40]
 4944 011a DA6A     		ldr	r2, [r3, #44]
 4945 011c 104B     		ldr	r3, .L395+16
 4946 011e 1B68     		ldr	r3, [r3]
 4947 0120 DB6A     		ldr	r3, [r3, #44]
 4948 0122 9A42     		cmp	r2, r3
 4949 0124 09D9     		bls	.L385
4553:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
4554:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* The notified task has a priority above the currently
4555:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					executing task so a yield is required. */
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 173


4556:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 4950              		.loc 1 4556 0
 4951 0126 BB6B     		ldr	r3, [r7, #56]
 4952 0128 002B     		cmp	r3, #0
 4953 012a 03D0     		beq	.L391
4557:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
4558:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 4954              		.loc 1 4558 0
 4955 012c BB6B     		ldr	r3, [r7, #56]
 4956 012e 0122     		movs	r2, #1
 4957 0130 1A60     		str	r2, [r3]
 4958 0132 02E0     		b	.L385
 4959              	.L391:
4559:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
4560:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					else
4561:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
4562:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4563:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4564:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						safe FreeRTOS function. */
4565:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						xYieldPending = pdTRUE;
 4960              		.loc 1 4565 0
 4961 0134 0B4B     		ldr	r3, .L395+20
 4962 0136 0122     		movs	r2, #1
 4963 0138 1A60     		str	r2, [r3]
 4964              	.L385:
 4965 013a 3B6A     		ldr	r3, [r7, #32]
 4966 013c 7B62     		str	r3, [r7, #36]
 4967              	.LBB39:
 4968              	.LBB40:
 4969              		.loc 2 233 0
 4970 013e 7B6A     		ldr	r3, [r7, #36]
 4971              		.syntax unified
 4972              	@ 233 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h" 1
 4973 0140 83F31188 		    msr basepri, r3  
 4974              	@ 0 "" 2
 4975              		.thumb
 4976              		.syntax unified
 4977              	.LBE40:
 4978              	.LBE39:
4566:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
4567:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
4568:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else
4569:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
4570:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4571:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
4572:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
4573:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
4574:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4575:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4576:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return xReturn;
 4979              		.loc 1 4576 0
 4980 0144 FB6A     		ldr	r3, [r7, #44]
4577:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 4981              		.loc 1 4577 0
 4982 0146 1846     		mov	r0, r3
 4983 0148 3037     		adds	r7, r7, #48
 4984              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 174


 4985 014a BD46     		mov	sp, r7
 4986              		.cfi_def_cfa_register 13
 4987              		@ sp needed
 4988 014c 80BD     		pop	{r7, pc}
 4989              	.L396:
 4990 014e 00BF     		.align	2
 4991              	.L395:
 4992 0150 28010000 		.word	uxSchedulerSuspended
 4993 0154 08010000 		.word	uxTopReadyPriority
 4994 0158 04000000 		.word	pxReadyTasksLists
 4995 015c C0000000 		.word	xPendingReadyList
 4996 0160 00000000 		.word	pxCurrentTCB
 4997 0164 14010000 		.word	xYieldPending
 4998              		.cfi_endproc
 4999              	.LFE173:
 5000              		.size	xTaskGenericNotifyFromISR, .-xTaskGenericNotifyFromISR
 5001              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5002              		.align	2
 5003              		.global	vTaskNotifyGiveFromISR
 5004              		.thumb
 5005              		.thumb_func
 5006              		.type	vTaskNotifyGiveFromISR, %function
 5007              	vTaskNotifyGiveFromISR:
 5008              	.LFB174:
4578:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4579:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4580:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
4581:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4582:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4583:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4584:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4585:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 5009              		.loc 1 4585 0
 5010              		.cfi_startproc
 5011              		@ args = 0, pretend = 0, frame = 32
 5012              		@ frame_needed = 1, uses_anonymous_args = 0
 5013 0000 80B5     		push	{r7, lr}
 5014              		.cfi_def_cfa_offset 8
 5015              		.cfi_offset 7, -8
 5016              		.cfi_offset 14, -4
 5017 0002 88B0     		sub	sp, sp, #32
 5018              		.cfi_def_cfa_offset 40
 5019 0004 00AF     		add	r7, sp, #0
 5020              		.cfi_def_cfa_register 7
 5021 0006 7860     		str	r0, [r7, #4]
 5022 0008 3960     		str	r1, [r7]
4586:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t * pxTCB;
4587:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4588:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4589:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4590:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		configASSERT( xTaskToNotify );
 5023              		.loc 1 4590 0
 5024 000a 7B68     		ldr	r3, [r7, #4]
 5025 000c 002B     		cmp	r3, #0
 5026 000e 01D1     		bne	.L398
 5027              		.loc 1 4590 0 is_stmt 0 discriminator 1
 5028              		.syntax unified
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 175


 5029              	@ 4590 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 5030 0010 72B6     		 cpsid i 
 5031              	@ 0 "" 2
 5032              		.thumb
 5033              		.syntax unified
 5034              	.L399:
 5035 0012 FEE7     		b	.L399
 5036              	.L398:
4591:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4592:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4593:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4594:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4595:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4596:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4597:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4598:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4599:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4600:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4601:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4602:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4603:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4604:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4605:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4606:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		provided on the following link:
4607:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4608:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 5037              		.loc 1 4608 0 is_stmt 1
 5038 0014 FFF7FEFF 		bl	vPortValidateInterruptPriority
4609:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4610:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5039              		.loc 1 4610 0
 5040 0018 7B68     		ldr	r3, [r7, #4]
 5041 001a FB61     		str	r3, [r7, #28]
 5042              	.LBB41:
 5043              	.LBB42:
 215:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h ****     (
 5044              		.loc 2 215 0
 5045              		.syntax unified
 5046              	@ 215 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h" 1
 5047 001c EFF31182 		    mrs r2, basepri                                            
 5048 0020 4FF0BF03 	    mov r3, #191                                                 
 5049 0024 83F31188 	    msr basepri, r3                                            
 5050 0028 BFF36F8F 	    isb                                                        
 5051 002c BFF34F8F 	    dsb                                                        
 5052              	
 5053              	@ 0 "" 2
 5054              		.thumb
 5055              		.syntax unified
 5056 0030 FA60     		str	r2, [r7, #12]
 5057 0032 BB60     		str	r3, [r7, #8]
 227:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h **** }
 5058              		.loc 2 227 0
 5059 0034 FB68     		ldr	r3, [r7, #12]
 5060              	.LBE42:
 5061              	.LBE41:
4611:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4612:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 176


 5062              		.loc 1 4612 0
 5063 0036 7B61     		str	r3, [r7, #20]
4613:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
4614:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 5064              		.loc 1 4614 0
 5065 0038 FB69     		ldr	r3, [r7, #28]
 5066 003a 93F85C30 		ldrb	r3, [r3, #92]
 5067 003e FB74     		strb	r3, [r7, #19]
4615:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5068              		.loc 1 4615 0
 5069 0040 FB69     		ldr	r3, [r7, #28]
 5070 0042 0222     		movs	r2, #2
 5071 0044 83F85C20 		strb	r2, [r3, #92]
4616:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4617:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4618:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			semaphore. */
4619:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 5072              		.loc 1 4619 0
 5073 0048 FB69     		ldr	r3, [r7, #28]
 5074 004a 9B6D     		ldr	r3, [r3, #88]
 5075 004c 5A1C     		adds	r2, r3, #1
 5076 004e FB69     		ldr	r3, [r7, #28]
 5077 0050 9A65     		str	r2, [r3, #88]
4620:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4621:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4622:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4623:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4624:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			notification then unblock it now. */
4625:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5078              		.loc 1 4625 0
 5079 0052 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 5080 0054 012B     		cmp	r3, #1
 5081 0056 3ED1     		bne	.L401
4626:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
4627:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* The task should not have been on an event list. */
4628:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 5082              		.loc 1 4628 0
 5083 0058 FB69     		ldr	r3, [r7, #28]
 5084 005a 9B6A     		ldr	r3, [r3, #40]
 5085 005c 002B     		cmp	r3, #0
 5086 005e 01D0     		beq	.L402
 5087              		.loc 1 4628 0 is_stmt 0 discriminator 1
 5088              		.syntax unified
 5089              	@ 4628 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source\tasks.c" 1
 5090 0060 72B6     		 cpsid i 
 5091              	@ 0 "" 2
 5092              		.thumb
 5093              		.syntax unified
 5094              	.L403:
 5095              		.loc 1 4628 0 discriminator 2
 5096 0062 FEE7     		b	.L403
 5097              	.L402:
4629:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4630:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5098              		.loc 1 4630 0 is_stmt 1
 5099 0064 204B     		ldr	r3, .L409
 5100 0066 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 177


 5101 0068 002B     		cmp	r3, #0
 5102 006a 1DD1     		bne	.L404
4631:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
4632:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5103              		.loc 1 4632 0
 5104 006c FB69     		ldr	r3, [r7, #28]
 5105 006e 0433     		adds	r3, r3, #4
 5106 0070 1846     		mov	r0, r3
 5107 0072 FFF7FEFF 		bl	uxListRemove
4633:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5108              		.loc 1 4633 0
 5109 0076 FB69     		ldr	r3, [r7, #28]
 5110 0078 DA6A     		ldr	r2, [r3, #44]
 5111 007a 1C4B     		ldr	r3, .L409+4
 5112 007c 1B68     		ldr	r3, [r3]
 5113 007e 9A42     		cmp	r2, r3
 5114 0080 03D9     		bls	.L405
 5115              		.loc 1 4633 0 is_stmt 0 discriminator 1
 5116 0082 FB69     		ldr	r3, [r7, #28]
 5117 0084 DB6A     		ldr	r3, [r3, #44]
 5118 0086 194A     		ldr	r2, .L409+4
 5119 0088 1360     		str	r3, [r2]
 5120              	.L405:
 5121              		.loc 1 4633 0 discriminator 3
 5122 008a FB69     		ldr	r3, [r7, #28]
 5123 008c DA6A     		ldr	r2, [r3, #44]
 5124 008e 1346     		mov	r3, r2
 5125 0090 9B00     		lsls	r3, r3, #2
 5126 0092 1344     		add	r3, r3, r2
 5127 0094 9B00     		lsls	r3, r3, #2
 5128 0096 164A     		ldr	r2, .L409+8
 5129 0098 1A44     		add	r2, r2, r3
 5130 009a FB69     		ldr	r3, [r7, #28]
 5131 009c 0433     		adds	r3, r3, #4
 5132 009e 1946     		mov	r1, r3
 5133 00a0 1046     		mov	r0, r2
 5134 00a2 FFF7FEFF 		bl	vListInsertEnd
 5135 00a6 05E0     		b	.L406
 5136              	.L404:
4634:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
4635:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else
4636:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
4637:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4638:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4639:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 5137              		.loc 1 4639 0 is_stmt 1
 5138 00a8 FB69     		ldr	r3, [r7, #28]
 5139 00aa 1833     		adds	r3, r3, #24
 5140 00ac 1946     		mov	r1, r3
 5141 00ae 1148     		ldr	r0, .L409+12
 5142 00b0 FFF7FEFF 		bl	vListInsertEnd
 5143              	.L406:
4640:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
4641:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4642:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5144              		.loc 1 4642 0
 5145 00b4 FB69     		ldr	r3, [r7, #28]
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 178


 5146 00b6 DA6A     		ldr	r2, [r3, #44]
 5147 00b8 0F4B     		ldr	r3, .L409+16
 5148 00ba 1B68     		ldr	r3, [r3]
 5149 00bc DB6A     		ldr	r3, [r3, #44]
 5150 00be 9A42     		cmp	r2, r3
 5151 00c0 09D9     		bls	.L401
4643:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
4644:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					/* The notified task has a priority above the currently
4645:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					executing task so a yield is required. */
4646:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 5152              		.loc 1 4646 0
 5153 00c2 3B68     		ldr	r3, [r7]
 5154 00c4 002B     		cmp	r3, #0
 5155 00c6 03D0     		beq	.L407
4647:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
4648:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 5156              		.loc 1 4648 0
 5157 00c8 3B68     		ldr	r3, [r7]
 5158 00ca 0122     		movs	r2, #1
 5159 00cc 1A60     		str	r2, [r3]
 5160 00ce 02E0     		b	.L401
 5161              	.L407:
4649:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
4650:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					else
4651:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					{
4652:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4653:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4654:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						safe FreeRTOS function. */
4655:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 						xYieldPending = pdTRUE;
 5162              		.loc 1 4655 0
 5163 00d0 0A4B     		ldr	r3, .L409+20
 5164 00d2 0122     		movs	r2, #1
 5165 00d4 1A60     		str	r2, [r3]
 5166              	.L401:
 5167 00d6 7B69     		ldr	r3, [r7, #20]
 5168 00d8 BB61     		str	r3, [r7, #24]
 5169              	.LBB43:
 5170              	.LBB44:
 5171              		.loc 2 233 0
 5172 00da BB69     		ldr	r3, [r7, #24]
 5173              		.syntax unified
 5174              	@ 233 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/9.0.0/Source/portable/GCC/CM4F/portmacro.h" 1
 5175 00dc 83F31188 		    msr basepri, r3  
 5176              	@ 0 "" 2
 5177              		.thumb
 5178              		.syntax unified
 5179              	.LBE44:
 5180              	.LBE43:
4656:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					}
4657:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
4658:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else
4659:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
4660:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4661:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
4662:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
4663:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
4664:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 179


4665:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 5181              		.loc 1 4665 0
 5182 00e0 00BF     		nop
 5183 00e2 2037     		adds	r7, r7, #32
 5184              		.cfi_def_cfa_offset 8
 5185 00e4 BD46     		mov	sp, r7
 5186              		.cfi_def_cfa_register 13
 5187              		@ sp needed
 5188 00e6 80BD     		pop	{r7, pc}
 5189              	.L410:
 5190              		.align	2
 5191              	.L409:
 5192 00e8 28010000 		.word	uxSchedulerSuspended
 5193 00ec 08010000 		.word	uxTopReadyPriority
 5194 00f0 04000000 		.word	pxReadyTasksLists
 5195 00f4 C0000000 		.word	xPendingReadyList
 5196 00f8 00000000 		.word	pxCurrentTCB
 5197 00fc 14010000 		.word	xYieldPending
 5198              		.cfi_endproc
 5199              	.LFE174:
 5200              		.size	vTaskNotifyGiveFromISR, .-vTaskNotifyGiveFromISR
 5201              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5202              		.align	2
 5203              		.global	xTaskNotifyStateClear
 5204              		.thumb
 5205              		.thumb_func
 5206              		.type	xTaskNotifyStateClear, %function
 5207              	xTaskNotifyStateClear:
 5208              	.LFB175:
4666:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4667:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4668:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4669:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
4670:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4671:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4672:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4673:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4674:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
 5209              		.loc 1 4674 0
 5210              		.cfi_startproc
 5211              		@ args = 0, pretend = 0, frame = 16
 5212              		@ frame_needed = 1, uses_anonymous_args = 0
 5213 0000 80B5     		push	{r7, lr}
 5214              		.cfi_def_cfa_offset 8
 5215              		.cfi_offset 7, -8
 5216              		.cfi_offset 14, -4
 5217 0002 84B0     		sub	sp, sp, #16
 5218              		.cfi_def_cfa_offset 24
 5219 0004 00AF     		add	r7, sp, #0
 5220              		.cfi_def_cfa_register 7
 5221 0006 7860     		str	r0, [r7, #4]
4675:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	TCB_t *pxTCB;
4676:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	BaseType_t xReturn;
4677:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4678:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4679:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		its notification state cleared. */
4680:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 180


 5222              		.loc 1 4680 0
 5223 0008 7B68     		ldr	r3, [r7, #4]
 5224 000a 002B     		cmp	r3, #0
 5225 000c 02D1     		bne	.L412
 5226              		.loc 1 4680 0 is_stmt 0 discriminator 1
 5227 000e 0E4B     		ldr	r3, .L417
 5228 0010 1B68     		ldr	r3, [r3]
 5229 0012 00E0     		b	.L413
 5230              	.L412:
 5231              		.loc 1 4680 0 discriminator 2
 5232 0014 7B68     		ldr	r3, [r7, #4]
 5233              	.L413:
 5234              		.loc 1 4680 0 discriminator 4
 5235 0016 BB60     		str	r3, [r7, #8]
4681:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4682:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		taskENTER_CRITICAL();
 5236              		.loc 1 4682 0 is_stmt 1 discriminator 4
 5237 0018 FFF7FEFF 		bl	vPortEnterCritical
4683:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
4684:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 5238              		.loc 1 4684 0 discriminator 4
 5239 001c BB68     		ldr	r3, [r7, #8]
 5240 001e 93F85C30 		ldrb	r3, [r3, #92]
 5241 0022 DBB2     		uxtb	r3, r3
 5242 0024 022B     		cmp	r3, #2
 5243 0026 06D1     		bne	.L414
4685:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
4686:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 5244              		.loc 1 4686 0
 5245 0028 BB68     		ldr	r3, [r7, #8]
 5246 002a 0022     		movs	r2, #0
 5247 002c 83F85C20 		strb	r2, [r3, #92]
4687:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				xReturn = pdPASS;
 5248              		.loc 1 4687 0
 5249 0030 0123     		movs	r3, #1
 5250 0032 FB60     		str	r3, [r7, #12]
 5251 0034 01E0     		b	.L415
 5252              	.L414:
4688:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
4689:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
4690:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
4691:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				xReturn = pdFAIL;
 5253              		.loc 1 4691 0
 5254 0036 0023     		movs	r3, #0
 5255 0038 FB60     		str	r3, [r7, #12]
 5256              	.L415:
4692:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
4693:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
4694:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		taskEXIT_CRITICAL();
 5257              		.loc 1 4694 0
 5258 003a FFF7FEFF 		bl	vPortExitCritical
4695:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4696:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		return xReturn;
 5259              		.loc 1 4696 0
 5260 003e FB68     		ldr	r3, [r7, #12]
4697:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
 5261              		.loc 1 4697 0
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 181


 5262 0040 1846     		mov	r0, r3
 5263 0042 1037     		adds	r7, r7, #16
 5264              		.cfi_def_cfa_offset 8
 5265 0044 BD46     		mov	sp, r7
 5266              		.cfi_def_cfa_register 13
 5267              		@ sp needed
 5268 0046 80BD     		pop	{r7, pc}
 5269              	.L418:
 5270              		.align	2
 5271              	.L417:
 5272 0048 00000000 		.word	pxCurrentTCB
 5273              		.cfi_endproc
 5274              	.LFE175:
 5275              		.size	xTaskNotifyStateClear, .-xTaskNotifyStateClear
 5276              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 5277              		.align	2
 5278              		.thumb
 5279              		.thumb_func
 5280              		.type	prvAddCurrentTaskToDelayedList, %function
 5281              	prvAddCurrentTaskToDelayedList:
 5282              	.LFB176:
4698:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4699:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4700:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** /*-----------------------------------------------------------*/
4701:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4702:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4703:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4704:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** {
 5283              		.loc 1 4704 0
 5284              		.cfi_startproc
 5285              		@ args = 0, pretend = 0, frame = 16
 5286              		@ frame_needed = 1, uses_anonymous_args = 0
 5287 0000 80B5     		push	{r7, lr}
 5288              		.cfi_def_cfa_offset 8
 5289              		.cfi_offset 7, -8
 5290              		.cfi_offset 14, -4
 5291 0002 84B0     		sub	sp, sp, #16
 5292              		.cfi_def_cfa_offset 24
 5293 0004 00AF     		add	r7, sp, #0
 5294              		.cfi_def_cfa_register 7
 5295 0006 7860     		str	r0, [r7, #4]
 5296 0008 3960     		str	r1, [r7]
4705:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** TickType_t xTimeToWake;
4706:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 5297              		.loc 1 4706 0
 5298 000a 214B     		ldr	r3, .L424
 5299 000c 1B68     		ldr	r3, [r3]
 5300 000e FB60     		str	r3, [r7, #12]
4707:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4708:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4709:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
4710:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4711:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4712:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		when the task leaves the Blocked state. */
4713:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4714:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
4715:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 182


4716:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4717:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4718:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	as the same list item is used for both lists. */
4719:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 5301              		.loc 1 4719 0
 5302 0010 204B     		ldr	r3, .L424+4
 5303 0012 1B68     		ldr	r3, [r3]
 5304 0014 0433     		adds	r3, r3, #4
 5305 0016 1846     		mov	r0, r3
 5306 0018 FFF7FEFF 		bl	uxListRemove
4720:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
4721:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4722:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4723:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
4724:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
4725:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	else
4726:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
4727:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4728:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
4729:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4730:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4731:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
4732:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 5307              		.loc 1 4732 0
 5308 001c 7B68     		ldr	r3, [r7, #4]
 5309 001e B3F1FF3F 		cmp	r3, #-1
 5310 0022 0AD1     		bne	.L420
 5311              		.loc 1 4732 0 is_stmt 0 discriminator 1
 5312 0024 3B68     		ldr	r3, [r7]
 5313 0026 002B     		cmp	r3, #0
 5314 0028 07D0     		beq	.L420
4733:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
4734:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4735:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4736:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			indefinitely. */
4737:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 5315              		.loc 1 4737 0 is_stmt 1
 5316 002a 1A4B     		ldr	r3, .L424+4
 5317 002c 1B68     		ldr	r3, [r3]
 5318 002e 0433     		adds	r3, r3, #4
 5319 0030 1946     		mov	r1, r3
 5320 0032 1948     		ldr	r0, .L424+8
 5321 0034 FFF7FEFF 		bl	vListInsertEnd
4738:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
4739:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
4740:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
4741:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4742:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4743:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			kernel will manage it correctly. */
4744:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
4745:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4746:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4747:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4748:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4749:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
4750:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
4751:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 183


4752:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				list. */
4753:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4754:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
4755:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
4756:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
4757:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4758:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				is used. */
4759:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4760:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4761:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4762:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4763:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				needs to be updated too. */
4764:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
4765:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
4766:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
4767:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
4768:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				else
4769:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
4770:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4771:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
4772:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
4773:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
4774:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
4775:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4776:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	{
4777:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4778:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4779:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		will manage it correctly. */
4780:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4781:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4782:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
4783:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4784:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4785:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4786:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
4787:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4788:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4789:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
4790:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		else
4791:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		{
4792:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
4793:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4794:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4795:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
4796:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
4797:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			too. */
4798:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
4799:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
4800:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
4801:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
4802:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			else
4803:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
4804:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4805:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
4806:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		}
4807:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
4808:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 184


4809:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
4810:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	}
4811:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
4812:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** }
 5322              		.loc 1 4812 0
 5323 0038 26E0     		b	.L423
 5324              	.L420:
4744:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 5325              		.loc 1 4744 0
 5326 003a FA68     		ldr	r2, [r7, #12]
 5327 003c 7B68     		ldr	r3, [r7, #4]
 5328 003e 1344     		add	r3, r3, r2
 5329 0040 BB60     		str	r3, [r7, #8]
4747:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 5330              		.loc 1 4747 0
 5331 0042 144B     		ldr	r3, .L424+4
 5332 0044 1B68     		ldr	r3, [r3]
 5333 0046 BA68     		ldr	r2, [r7, #8]
 5334 0048 5A60     		str	r2, [r3, #4]
4749:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			{
 5335              		.loc 1 4749 0
 5336 004a BA68     		ldr	r2, [r7, #8]
 5337 004c FB68     		ldr	r3, [r7, #12]
 5338 004e 9A42     		cmp	r2, r3
 5339 0050 09D2     		bcs	.L422
4753:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 			}
 5340              		.loc 1 4753 0
 5341 0052 124B     		ldr	r3, .L424+12
 5342 0054 1A68     		ldr	r2, [r3]
 5343 0056 0F4B     		ldr	r3, .L424+4
 5344 0058 1B68     		ldr	r3, [r3]
 5345 005a 0433     		adds	r3, r3, #4
 5346 005c 1946     		mov	r1, r3
 5347 005e 1046     		mov	r0, r2
 5348 0060 FFF7FEFF 		bl	vListInsert
 5349              		.loc 1 4812 0
 5350 0064 10E0     		b	.L423
 5351              	.L422:
4759:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 
 5352              		.loc 1 4759 0
 5353 0066 0E4B     		ldr	r3, .L424+16
 5354 0068 1A68     		ldr	r2, [r3]
 5355 006a 0A4B     		ldr	r3, .L424+4
 5356 006c 1B68     		ldr	r3, [r3]
 5357 006e 0433     		adds	r3, r3, #4
 5358 0070 1946     		mov	r1, r3
 5359 0072 1046     		mov	r0, r2
 5360 0074 FFF7FEFF 		bl	vListInsert
4764:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				{
 5361              		.loc 1 4764 0
 5362 0078 0A4B     		ldr	r3, .L424+20
 5363 007a 1B68     		ldr	r3, [r3]
 5364 007c BA68     		ldr	r2, [r7, #8]
 5365 007e 9A42     		cmp	r2, r3
 5366 0080 02D2     		bcs	.L423
4766:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\9.0.0\Source/tasks.c **** 				}
 5367              		.loc 1 4766 0
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 185


 5368 0082 084A     		ldr	r2, .L424+20
 5369 0084 BB68     		ldr	r3, [r7, #8]
 5370 0086 1360     		str	r3, [r2]
 5371              	.L423:
 5372              		.loc 1 4812 0
 5373 0088 00BF     		nop
 5374 008a 1037     		adds	r7, r7, #16
 5375              		.cfi_def_cfa_offset 8
 5376 008c BD46     		mov	sp, r7
 5377              		.cfi_def_cfa_register 13
 5378              		@ sp needed
 5379 008e 80BD     		pop	{r7, pc}
 5380              	.L425:
 5381              		.align	2
 5382              	.L424:
 5383 0090 04010000 		.word	xTickCount
 5384 0094 00000000 		.word	pxCurrentTCB
 5385 0098 EC000000 		.word	xSuspendedTaskList
 5386 009c BC000000 		.word	pxOverflowDelayedTaskList
 5387 00a0 B8000000 		.word	pxDelayedTaskList
 5388 00a4 20010000 		.word	xNextTaskUnblockTime
 5389              		.cfi_endproc
 5390              	.LFE176:
 5391              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 5392              		.text
 5393              	.Letext0:
 5394              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 5395              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 5396              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 5397              		.file 6 "Generated_Source\\PSoC6\\pdl\\rtos/FreeRTOS/9.0.0/Source/include/projdefs.h"
 5398              		.file 7 "Generated_Source\\PSoC6\\pdl\\rtos/FreeRTOS/9.0.0/Source/include/list.h"
 5399              		.file 8 "Generated_Source\\PSoC6\\pdl\\rtos/FreeRTOS/9.0.0/Source/include/task.h"
 5400              		.file 9 "Generated_Source\\PSoC6\\pdl\\cmsis/include/core_cm4.h"
 5401              		.section	.debug_info,"",%progbits
 5402              	.Ldebug_info0:
 5403 0000 DF140000 		.4byte	0x14df
 5404 0004 0400     		.2byte	0x4
 5405 0006 00000000 		.4byte	.Ldebug_abbrev0
 5406 000a 04       		.byte	0x4
 5407 000b 01       		.uleb128 0x1
 5408 000c 650C0000 		.4byte	.LASF201
 5409 0010 0C       		.byte	0xc
 5410 0011 5B070000 		.4byte	.LASF202
 5411 0015 FE000000 		.4byte	.LASF203
 5412 0019 00000000 		.4byte	.Ldebug_ranges0+0
 5413 001d 00000000 		.4byte	0
 5414 0021 00000000 		.4byte	.Ldebug_line0
 5415 0025 02       		.uleb128 0x2
 5416 0026 4D000000 		.4byte	.LASF4
 5417 002a 03       		.byte	0x3
 5418 002b D8       		.byte	0xd8
 5419 002c 30000000 		.4byte	0x30
 5420 0030 03       		.uleb128 0x3
 5421 0031 04       		.byte	0x4
 5422 0032 07       		.byte	0x7
 5423 0033 570A0000 		.4byte	.LASF0
 5424 0037 04       		.uleb128 0x4
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 186


 5425 0038 04       		.byte	0x4
 5426 0039 05       		.byte	0x5
 5427 003a 696E7400 		.ascii	"int\000"
 5428 003e 03       		.uleb128 0x3
 5429 003f 08       		.byte	0x8
 5430 0040 05       		.byte	0x5
 5431 0041 37020000 		.4byte	.LASF1
 5432 0045 03       		.uleb128 0x3
 5433 0046 08       		.byte	0x8
 5434 0047 04       		.byte	0x4
 5435 0048 F5090000 		.4byte	.LASF2
 5436 004c 03       		.uleb128 0x3
 5437 004d 01       		.byte	0x1
 5438 004e 06       		.byte	0x6
 5439 004f CE000000 		.4byte	.LASF3
 5440 0053 02       		.uleb128 0x2
 5441 0054 DA000000 		.4byte	.LASF5
 5442 0058 04       		.byte	0x4
 5443 0059 1D       		.byte	0x1d
 5444 005a 5E000000 		.4byte	0x5e
 5445 005e 03       		.uleb128 0x3
 5446 005f 01       		.byte	0x1
 5447 0060 08       		.byte	0x8
 5448 0061 5C080000 		.4byte	.LASF6
 5449 0065 03       		.uleb128 0x3
 5450 0066 02       		.byte	0x2
 5451 0067 05       		.byte	0x5
 5452 0068 96080000 		.4byte	.LASF7
 5453 006c 02       		.uleb128 0x2
 5454 006d 640A0000 		.4byte	.LASF8
 5455 0071 04       		.byte	0x4
 5456 0072 2B       		.byte	0x2b
 5457 0073 77000000 		.4byte	0x77
 5458 0077 03       		.uleb128 0x3
 5459 0078 02       		.byte	0x2
 5460 0079 07       		.byte	0x7
 5461 007a 6E050000 		.4byte	.LASF9
 5462 007e 02       		.uleb128 0x2
 5463 007f B70A0000 		.4byte	.LASF10
 5464 0083 04       		.byte	0x4
 5465 0084 3F       		.byte	0x3f
 5466 0085 89000000 		.4byte	0x89
 5467 0089 03       		.uleb128 0x3
 5468 008a 04       		.byte	0x4
 5469 008b 05       		.byte	0x5
 5470 008c 7C010000 		.4byte	.LASF11
 5471 0090 02       		.uleb128 0x2
 5472 0091 68040000 		.4byte	.LASF12
 5473 0095 04       		.byte	0x4
 5474 0096 41       		.byte	0x41
 5475 0097 9B000000 		.4byte	0x9b
 5476 009b 03       		.uleb128 0x3
 5477 009c 04       		.byte	0x4
 5478 009d 07       		.byte	0x7
 5479 009e 19050000 		.4byte	.LASF13
 5480 00a2 03       		.uleb128 0x3
 5481 00a3 08       		.byte	0x8
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 187


 5482 00a4 07       		.byte	0x7
 5483 00a5 A8010000 		.4byte	.LASF14
 5484 00a9 03       		.uleb128 0x3
 5485 00aa 04       		.byte	0x4
 5486 00ab 07       		.byte	0x7
 5487 00ac 110C0000 		.4byte	.LASF15
 5488 00b0 05       		.uleb128 0x5
 5489 00b1 04       		.byte	0x4
 5490 00b2 06       		.uleb128 0x6
 5491 00b3 04       		.byte	0x4
 5492 00b4 B8000000 		.4byte	0xb8
 5493 00b8 03       		.uleb128 0x3
 5494 00b9 01       		.byte	0x1
 5495 00ba 08       		.byte	0x8
 5496 00bb 200A0000 		.4byte	.LASF16
 5497 00bf 06       		.uleb128 0x6
 5498 00c0 04       		.byte	0x4
 5499 00c1 C5000000 		.4byte	0xc5
 5500 00c5 07       		.uleb128 0x7
 5501 00c6 B8000000 		.4byte	0xb8
 5502 00ca 02       		.uleb128 0x2
 5503 00cb E10B0000 		.4byte	.LASF17
 5504 00cf 05       		.byte	0x5
 5505 00d0 18       		.byte	0x18
 5506 00d1 53000000 		.4byte	0x53
 5507 00d5 02       		.uleb128 0x2
 5508 00d6 9D030000 		.4byte	.LASF18
 5509 00da 05       		.byte	0x5
 5510 00db 24       		.byte	0x24
 5511 00dc 6C000000 		.4byte	0x6c
 5512 00e0 02       		.uleb128 0x2
 5513 00e1 39050000 		.4byte	.LASF19
 5514 00e5 05       		.byte	0x5
 5515 00e6 2C       		.byte	0x2c
 5516 00e7 7E000000 		.4byte	0x7e
 5517 00eb 02       		.uleb128 0x2
 5518 00ec CA090000 		.4byte	.LASF20
 5519 00f0 05       		.byte	0x5
 5520 00f1 30       		.byte	0x30
 5521 00f2 90000000 		.4byte	0x90
 5522 00f6 08       		.uleb128 0x8
 5523 00f7 EB000000 		.4byte	0xeb
 5524 00fb 08       		.uleb128 0x8
 5525 00fc CA000000 		.4byte	0xca
 5526 0100 03       		.uleb128 0x3
 5527 0101 04       		.byte	0x4
 5528 0102 04       		.byte	0x4
 5529 0103 08080000 		.4byte	.LASF21
 5530 0107 03       		.uleb128 0x3
 5531 0108 08       		.byte	0x8
 5532 0109 04       		.byte	0x4
 5533 010a A6030000 		.4byte	.LASF22
 5534 010e 02       		.uleb128 0x2
 5535 010f FD080000 		.4byte	.LASF23
 5536 0113 06       		.byte	0x6
 5537 0114 4D       		.byte	0x4d
 5538 0115 19010000 		.4byte	0x119
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 188


 5539 0119 06       		.uleb128 0x6
 5540 011a 04       		.byte	0x4
 5541 011b 1F010000 		.4byte	0x11f
 5542 011f 09       		.uleb128 0x9
 5543 0120 2A010000 		.4byte	0x12a
 5544 0124 0A       		.uleb128 0xa
 5545 0125 B0000000 		.4byte	0xb0
 5546 0129 00       		.byte	0
 5547 012a 02       		.uleb128 0x2
 5548 012b 81050000 		.4byte	.LASF24
 5549 012f 02       		.byte	0x2
 5550 0130 61       		.byte	0x61
 5551 0131 EB000000 		.4byte	0xeb
 5552 0135 02       		.uleb128 0x2
 5553 0136 AD030000 		.4byte	.LASF25
 5554 013a 02       		.byte	0x2
 5555 013b 62       		.byte	0x62
 5556 013c 89000000 		.4byte	0x89
 5557 0140 02       		.uleb128 0x2
 5558 0141 9A0D0000 		.4byte	.LASF26
 5559 0145 02       		.byte	0x2
 5560 0146 63       		.byte	0x63
 5561 0147 9B000000 		.4byte	0x9b
 5562 014b 02       		.uleb128 0x2
 5563 014c 83030000 		.4byte	.LASF27
 5564 0150 02       		.byte	0x2
 5565 0151 69       		.byte	0x69
 5566 0152 EB000000 		.4byte	0xeb
 5567 0156 0B       		.uleb128 0xb
 5568 0157 B0000000 		.4byte	0xb0
 5569 015b 66010000 		.4byte	0x166
 5570 015f 0C       		.uleb128 0xc
 5571 0160 A9000000 		.4byte	0xa9
 5572 0164 04       		.byte	0x4
 5573 0165 00       		.byte	0
 5574 0166 0D       		.uleb128 0xd
 5575 0167 5A0C0000 		.4byte	.LASF34
 5576 016b 14       		.byte	0x14
 5577 016c 07       		.byte	0x7
 5578 016d B5       		.byte	0xb5
 5579 016e AF010000 		.4byte	0x1af
 5580 0172 0E       		.uleb128 0xe
 5581 0173 4C0A0000 		.4byte	.LASF28
 5582 0177 07       		.byte	0x7
 5583 0178 B8       		.byte	0xb8
 5584 0179 4B010000 		.4byte	0x14b
 5585 017d 00       		.byte	0
 5586 017e 0E       		.uleb128 0xe
 5587 017f 1A0C0000 		.4byte	.LASF29
 5588 0183 07       		.byte	0x7
 5589 0184 B9       		.byte	0xb9
 5590 0185 AF010000 		.4byte	0x1af
 5591 0189 04       		.byte	0x4
 5592 018a 0E       		.uleb128 0xe
 5593 018b E7070000 		.4byte	.LASF30
 5594 018f 07       		.byte	0x7
 5595 0190 BA       		.byte	0xba
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 189


 5596 0191 AF010000 		.4byte	0x1af
 5597 0195 08       		.byte	0x8
 5598 0196 0E       		.uleb128 0xe
 5599 0197 AA040000 		.4byte	.LASF31
 5600 019b 07       		.byte	0x7
 5601 019c BB       		.byte	0xbb
 5602 019d B0000000 		.4byte	0xb0
 5603 01a1 0C       		.byte	0xc
 5604 01a2 0E       		.uleb128 0xe
 5605 01a3 27080000 		.4byte	.LASF32
 5606 01a7 07       		.byte	0x7
 5607 01a8 BC       		.byte	0xbc
 5608 01a9 B0000000 		.4byte	0xb0
 5609 01ad 10       		.byte	0x10
 5610 01ae 00       		.byte	0
 5611 01af 06       		.uleb128 0x6
 5612 01b0 04       		.byte	0x4
 5613 01b1 66010000 		.4byte	0x166
 5614 01b5 02       		.uleb128 0x2
 5615 01b6 B9070000 		.4byte	.LASF33
 5616 01ba 07       		.byte	0x7
 5617 01bb BF       		.byte	0xbf
 5618 01bc 66010000 		.4byte	0x166
 5619 01c0 0D       		.uleb128 0xd
 5620 01c1 08020000 		.4byte	.LASF35
 5621 01c5 0C       		.byte	0xc
 5622 01c6 07       		.byte	0x7
 5623 01c7 C1       		.byte	0xc1
 5624 01c8 F1010000 		.4byte	0x1f1
 5625 01cc 0E       		.uleb128 0xe
 5626 01cd 4C0A0000 		.4byte	.LASF28
 5627 01d1 07       		.byte	0x7
 5628 01d2 C4       		.byte	0xc4
 5629 01d3 4B010000 		.4byte	0x14b
 5630 01d7 00       		.byte	0
 5631 01d8 0E       		.uleb128 0xe
 5632 01d9 1A0C0000 		.4byte	.LASF29
 5633 01dd 07       		.byte	0x7
 5634 01de C5       		.byte	0xc5
 5635 01df AF010000 		.4byte	0x1af
 5636 01e3 04       		.byte	0x4
 5637 01e4 0E       		.uleb128 0xe
 5638 01e5 E7070000 		.4byte	.LASF30
 5639 01e9 07       		.byte	0x7
 5640 01ea C6       		.byte	0xc6
 5641 01eb AF010000 		.4byte	0x1af
 5642 01ef 08       		.byte	0x8
 5643 01f0 00       		.byte	0
 5644 01f1 02       		.uleb128 0x2
 5645 01f2 54000000 		.4byte	.LASF36
 5646 01f6 07       		.byte	0x7
 5647 01f7 C8       		.byte	0xc8
 5648 01f8 C0010000 		.4byte	0x1c0
 5649 01fc 0D       		.uleb128 0xd
 5650 01fd 0C090000 		.4byte	.LASF37
 5651 0201 14       		.byte	0x14
 5652 0202 07       		.byte	0x7
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 190


 5653 0203 CD       		.byte	0xcd
 5654 0204 2D020000 		.4byte	0x22d
 5655 0208 0E       		.uleb128 0xe
 5656 0209 09050000 		.4byte	.LASF38
 5657 020d 07       		.byte	0x7
 5658 020e D0       		.byte	0xd0
 5659 020f 40010000 		.4byte	0x140
 5660 0213 00       		.byte	0
 5661 0214 0E       		.uleb128 0xe
 5662 0215 970B0000 		.4byte	.LASF39
 5663 0219 07       		.byte	0x7
 5664 021a D1       		.byte	0xd1
 5665 021b 2D020000 		.4byte	0x22d
 5666 021f 04       		.byte	0x4
 5667 0220 0E       		.uleb128 0xe
 5668 0221 E8010000 		.4byte	.LASF40
 5669 0225 07       		.byte	0x7
 5670 0226 D2       		.byte	0xd2
 5671 0227 F1010000 		.4byte	0x1f1
 5672 022b 08       		.byte	0x8
 5673 022c 00       		.byte	0
 5674 022d 06       		.uleb128 0x6
 5675 022e 04       		.byte	0x4
 5676 022f B5010000 		.4byte	0x1b5
 5677 0233 02       		.uleb128 0x2
 5678 0234 53090000 		.4byte	.LASF41
 5679 0238 07       		.byte	0x7
 5680 0239 D4       		.byte	0xd4
 5681 023a FC010000 		.4byte	0x1fc
 5682 023e 02       		.uleb128 0x2
 5683 023f 6E030000 		.4byte	.LASF42
 5684 0243 08       		.byte	0x8
 5685 0244 67       		.byte	0x67
 5686 0245 B0000000 		.4byte	0xb0
 5687 0249 0F       		.uleb128 0xf
 5688 024a 01       		.byte	0x1
 5689 024b 5E000000 		.4byte	0x5e
 5690 024f 08       		.byte	0x8
 5691 0250 7C       		.byte	0x7c
 5692 0251 74020000 		.4byte	0x274
 5693 0255 10       		.uleb128 0x10
 5694 0256 070C0000 		.4byte	.LASF43
 5695 025a 00       		.byte	0
 5696 025b 10       		.uleb128 0x10
 5697 025c 7B0A0000 		.4byte	.LASF44
 5698 0260 01       		.byte	0x1
 5699 0261 10       		.uleb128 0x10
 5700 0262 69060000 		.4byte	.LASF45
 5701 0266 02       		.byte	0x2
 5702 0267 10       		.uleb128 0x10
 5703 0268 31070000 		.4byte	.LASF46
 5704 026c 03       		.byte	0x3
 5705 026d 10       		.uleb128 0x10
 5706 026e BC0B0000 		.4byte	.LASF47
 5707 0272 04       		.byte	0x4
 5708 0273 00       		.byte	0
 5709 0274 02       		.uleb128 0x2
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 191


 5710 0275 45020000 		.4byte	.LASF48
 5711 0279 08       		.byte	0x8
 5712 027a 82       		.byte	0x82
 5713 027b 49020000 		.4byte	0x249
 5714 027f 0D       		.uleb128 0xd
 5715 0280 FE010000 		.4byte	.LASF49
 5716 0284 08       		.byte	0x8
 5717 0285 08       		.byte	0x8
 5718 0286 87       		.byte	0x87
 5719 0287 A4020000 		.4byte	0x2a4
 5720 028b 0E       		.uleb128 0xe
 5721 028c 1C040000 		.4byte	.LASF50
 5722 0290 08       		.byte	0x8
 5723 0291 89       		.byte	0x89
 5724 0292 35010000 		.4byte	0x135
 5725 0296 00       		.byte	0
 5726 0297 0E       		.uleb128 0xe
 5727 0298 CC040000 		.4byte	.LASF51
 5728 029c 08       		.byte	0x8
 5729 029d 8A       		.byte	0x8a
 5730 029e 4B010000 		.4byte	0x14b
 5731 02a2 04       		.byte	0x4
 5732 02a3 00       		.byte	0
 5733 02a4 02       		.uleb128 0x2
 5734 02a5 63000000 		.4byte	.LASF52
 5735 02a9 08       		.byte	0x8
 5736 02aa 8B       		.byte	0x8b
 5737 02ab 7F020000 		.4byte	0x27f
 5738 02af 0D       		.uleb128 0xd
 5739 02b0 13060000 		.4byte	.LASF53
 5740 02b4 0C       		.byte	0xc
 5741 02b5 08       		.byte	0x8
 5742 02b6 90       		.byte	0x90
 5743 02b7 E0020000 		.4byte	0x2e0
 5744 02bb 0E       		.uleb128 0xe
 5745 02bc CA020000 		.4byte	.LASF54
 5746 02c0 08       		.byte	0x8
 5747 02c1 92       		.byte	0x92
 5748 02c2 B0000000 		.4byte	0xb0
 5749 02c6 00       		.byte	0
 5750 02c7 0E       		.uleb128 0xe
 5751 02c8 99070000 		.4byte	.LASF55
 5752 02cc 08       		.byte	0x8
 5753 02cd 93       		.byte	0x93
 5754 02ce EB000000 		.4byte	0xeb
 5755 02d2 04       		.byte	0x4
 5756 02d3 0E       		.uleb128 0xe
 5757 02d4 9D060000 		.4byte	.LASF56
 5758 02d8 08       		.byte	0x8
 5759 02d9 94       		.byte	0x94
 5760 02da EB000000 		.4byte	0xeb
 5761 02de 08       		.byte	0x8
 5762 02df 00       		.byte	0
 5763 02e0 02       		.uleb128 0x2
 5764 02e1 8E030000 		.4byte	.LASF57
 5765 02e5 08       		.byte	0x8
 5766 02e6 95       		.byte	0x95
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 192


 5767 02e7 AF020000 		.4byte	0x2af
 5768 02eb 07       		.uleb128 0x7
 5769 02ec BF000000 		.4byte	0xbf
 5770 02f0 06       		.uleb128 0x6
 5771 02f1 04       		.byte	0x4
 5772 02f2 2A010000 		.4byte	0x12a
 5773 02f6 11       		.uleb128 0x11
 5774 02f7 08030000 		.4byte	.LASF58
 5775 02fb 60       		.byte	0x60
 5776 02fc 01       		.byte	0x1
 5777 02fd 2501     		.2byte	0x125
 5778 02ff 79030000 		.4byte	0x379
 5779 0303 12       		.uleb128 0x12
 5780 0304 41050000 		.4byte	.LASF59
 5781 0308 01       		.byte	0x1
 5782 0309 2701     		.2byte	0x127
 5783 030b 79030000 		.4byte	0x379
 5784 030f 00       		.byte	0
 5785 0310 12       		.uleb128 0x12
 5786 0311 A3020000 		.4byte	.LASF60
 5787 0315 01       		.byte	0x1
 5788 0316 2D01     		.2byte	0x12d
 5789 0318 B5010000 		.4byte	0x1b5
 5790 031c 04       		.byte	0x4
 5791 031d 12       		.uleb128 0x12
 5792 031e BF010000 		.4byte	.LASF61
 5793 0322 01       		.byte	0x1
 5794 0323 2E01     		.2byte	0x12e
 5795 0325 B5010000 		.4byte	0x1b5
 5796 0329 18       		.byte	0x18
 5797 032a 12       		.uleb128 0x12
 5798 032b 180D0000 		.4byte	.LASF62
 5799 032f 01       		.byte	0x1
 5800 0330 2F01     		.2byte	0x12f
 5801 0332 40010000 		.4byte	0x140
 5802 0336 2C       		.byte	0x2c
 5803 0337 12       		.uleb128 0x12
 5804 0338 7B030000 		.4byte	.LASF63
 5805 033c 01       		.byte	0x1
 5806 033d 3001     		.2byte	0x130
 5807 033f F0020000 		.4byte	0x2f0
 5808 0343 30       		.byte	0x30
 5809 0344 12       		.uleb128 0x12
 5810 0345 D60B0000 		.4byte	.LASF64
 5811 0349 01       		.byte	0x1
 5812 034a 3101     		.2byte	0x131
 5813 034c 84030000 		.4byte	0x384
 5814 0350 34       		.byte	0x34
 5815 0351 12       		.uleb128 0x12
 5816 0352 D8020000 		.4byte	.LASF65
 5817 0356 01       		.byte	0x1
 5818 0357 4A01     		.2byte	0x14a
 5819 0359 56010000 		.4byte	0x156
 5820 035d 44       		.byte	0x44
 5821 035e 12       		.uleb128 0x12
 5822 035f 6A080000 		.4byte	.LASF66
 5823 0363 01       		.byte	0x1
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 193


 5824 0364 5D01     		.2byte	0x15d
 5825 0366 F6000000 		.4byte	0xf6
 5826 036a 58       		.byte	0x58
 5827 036b 12       		.uleb128 0x12
 5828 036c 42080000 		.4byte	.LASF67
 5829 0370 01       		.byte	0x1
 5830 0371 5E01     		.2byte	0x15e
 5831 0373 FB000000 		.4byte	0xfb
 5832 0377 5C       		.byte	0x5c
 5833 0378 00       		.byte	0
 5834 0379 06       		.uleb128 0x6
 5835 037a 04       		.byte	0x4
 5836 037b 7F030000 		.4byte	0x37f
 5837 037f 08       		.uleb128 0x8
 5838 0380 2A010000 		.4byte	0x12a
 5839 0384 0B       		.uleb128 0xb
 5840 0385 B8000000 		.4byte	0xb8
 5841 0389 94030000 		.4byte	0x394
 5842 038d 0C       		.uleb128 0xc
 5843 038e A9000000 		.4byte	0xa9
 5844 0392 0F       		.byte	0xf
 5845 0393 00       		.byte	0
 5846 0394 13       		.uleb128 0x13
 5847 0395 5B050000 		.4byte	.LASF68
 5848 0399 01       		.byte	0x1
 5849 039a 6B01     		.2byte	0x16b
 5850 039c F6020000 		.4byte	0x2f6
 5851 03a0 13       		.uleb128 0x13
 5852 03a1 90080000 		.4byte	.LASF69
 5853 03a5 01       		.byte	0x1
 5854 03a6 6F01     		.2byte	0x16f
 5855 03a8 94030000 		.4byte	0x394
 5856 03ac 14       		.uleb128 0x14
 5857 03ad F5020000 		.4byte	.LASF204
 5858 03b1 02       		.byte	0x2
 5859 03b2 D3       		.byte	0xd3
 5860 03b3 EB000000 		.4byte	0xeb
 5861 03b7 03       		.byte	0x3
 5862 03b8 D3030000 		.4byte	0x3d3
 5863 03bc 15       		.uleb128 0x15
 5864 03bd 16000000 		.4byte	.LASF70
 5865 03c1 02       		.byte	0x2
 5866 03c2 D5       		.byte	0xd5
 5867 03c3 EB000000 		.4byte	0xeb
 5868 03c7 15       		.uleb128 0x15
 5869 03c8 9B010000 		.4byte	.LASF71
 5870 03cc 02       		.byte	0x2
 5871 03cd D5       		.byte	0xd5
 5872 03ce EB000000 		.4byte	0xeb
 5873 03d2 00       		.byte	0
 5874 03d3 16       		.uleb128 0x16
 5875 03d4 A9070000 		.4byte	.LASF205
 5876 03d8 02       		.byte	0x2
 5877 03d9 E7       		.byte	0xe7
 5878 03da 03       		.byte	0x3
 5879 03db EB030000 		.4byte	0x3eb
 5880 03df 17       		.uleb128 0x17
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 194


 5881 03e0 88040000 		.4byte	.LASF206
 5882 03e4 02       		.byte	0x2
 5883 03e5 E7       		.byte	0xe7
 5884 03e6 EB000000 		.4byte	0xeb
 5885 03ea 00       		.byte	0
 5886 03eb 18       		.uleb128 0x18
 5887 03ec 41000000 		.4byte	.LASF95
 5888 03f0 01       		.byte	0x1
 5889 03f1 A402     		.2byte	0x2a4
 5890 03f3 35010000 		.4byte	0x135
 5891 03f7 00000000 		.4byte	.LFB129
 5892 03fb 82000000 		.4byte	.LFE129-.LFB129
 5893 03ff 01       		.uleb128 0x1
 5894 0400 9C       		.byte	0x9c
 5895 0401 97040000 		.4byte	0x497
 5896 0405 19       		.uleb128 0x19
 5897 0406 F1060000 		.4byte	.LASF72
 5898 040a 01       		.byte	0x1
 5899 040b A402     		.2byte	0x2a4
 5900 040d 0E010000 		.4byte	0x10e
 5901 0411 02       		.uleb128 0x2
 5902 0412 91       		.byte	0x91
 5903 0413 64       		.sleb128 -28
 5904 0414 19       		.uleb128 0x19
 5905 0415 580D0000 		.4byte	.LASF73
 5906 0419 01       		.byte	0x1
 5907 041a A502     		.2byte	0x2a5
 5908 041c EB020000 		.4byte	0x2eb
 5909 0420 02       		.uleb128 0x2
 5910 0421 91       		.byte	0x91
 5911 0422 60       		.sleb128 -32
 5912 0423 19       		.uleb128 0x19
 5913 0424 F1030000 		.4byte	.LASF74
 5914 0428 01       		.byte	0x1
 5915 0429 A602     		.2byte	0x2a6
 5916 042b 97040000 		.4byte	0x497
 5917 042f 02       		.uleb128 0x2
 5918 0430 91       		.byte	0x91
 5919 0431 5E       		.sleb128 -34
 5920 0432 19       		.uleb128 0x19
 5921 0433 4E050000 		.4byte	.LASF75
 5922 0437 01       		.byte	0x1
 5923 0438 A702     		.2byte	0x2a7
 5924 043a 9C040000 		.4byte	0x49c
 5925 043e 02       		.uleb128 0x2
 5926 043f 91       		.byte	0x91
 5927 0440 58       		.sleb128 -40
 5928 0441 19       		.uleb128 0x19
 5929 0442 180D0000 		.4byte	.LASF62
 5930 0446 01       		.byte	0x1
 5931 0447 A802     		.2byte	0x2a8
 5932 0449 40010000 		.4byte	0x140
 5933 044d 02       		.uleb128 0x2
 5934 044e 91       		.byte	0x91
 5935 044f 00       		.sleb128 0
 5936 0450 19       		.uleb128 0x19
 5937 0451 FB040000 		.4byte	.LASF76
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 195


 5938 0455 01       		.byte	0x1
 5939 0456 A902     		.2byte	0x2a9
 5940 0458 A7040000 		.4byte	0x4a7
 5941 045c 02       		.uleb128 0x2
 5942 045d 91       		.byte	0x91
 5943 045e 04       		.sleb128 4
 5944 045f 1A       		.uleb128 0x1a
 5945 0460 1C030000 		.4byte	.LASF77
 5946 0464 01       		.byte	0x1
 5947 0465 AB02     		.2byte	0x2ab
 5948 0467 AC040000 		.4byte	0x4ac
 5949 046b 02       		.uleb128 0x2
 5950 046c 91       		.byte	0x91
 5951 046d 74       		.sleb128 -12
 5952 046e 1A       		.uleb128 0x1a
 5953 046f B2040000 		.4byte	.LASF78
 5954 0473 01       		.byte	0x1
 5955 0474 AC02     		.2byte	0x2ac
 5956 0476 35010000 		.4byte	0x135
 5957 047a 02       		.uleb128 0x2
 5958 047b 91       		.byte	0x91
 5959 047c 70       		.sleb128 -16
 5960 047d 1B       		.uleb128 0x1b
 5961 047e 10000000 		.4byte	.LBB18
 5962 0482 34000000 		.4byte	.LBE18-.LBB18
 5963 0486 1A       		.uleb128 0x1a
 5964 0487 7B030000 		.4byte	.LASF63
 5965 048b 01       		.byte	0x1
 5966 048c C902     		.2byte	0x2c9
 5967 048e F0020000 		.4byte	0x2f0
 5968 0492 02       		.uleb128 0x2
 5969 0493 91       		.byte	0x91
 5970 0494 6C       		.sleb128 -20
 5971 0495 00       		.byte	0
 5972 0496 00       		.byte	0
 5973 0497 07       		.uleb128 0x7
 5974 0498 D5000000 		.4byte	0xd5
 5975 049c 07       		.uleb128 0x7
 5976 049d B0000000 		.4byte	0xb0
 5977 04a1 06       		.uleb128 0x6
 5978 04a2 04       		.byte	0x4
 5979 04a3 3E020000 		.4byte	0x23e
 5980 04a7 07       		.uleb128 0x7
 5981 04a8 A1040000 		.4byte	0x4a1
 5982 04ac 06       		.uleb128 0x6
 5983 04ad 04       		.byte	0x4
 5984 04ae A0030000 		.4byte	0x3a0
 5985 04b2 1C       		.uleb128 0x1c
 5986 04b3 5A090000 		.4byte	.LASF81
 5987 04b7 01       		.byte	0x1
 5988 04b8 FF02     		.2byte	0x2ff
 5989 04ba 00000000 		.4byte	.LFB130
 5990 04be 10010000 		.4byte	.LFE130-.LFB130
 5991 04c2 01       		.uleb128 0x1
 5992 04c3 9C       		.byte	0x9c
 5993 04c4 5D050000 		.4byte	0x55d
 5994 04c8 19       		.uleb128 0x19
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 196


 5995 04c9 F1060000 		.4byte	.LASF72
 5996 04cd 01       		.byte	0x1
 5997 04ce FF02     		.2byte	0x2ff
 5998 04d0 0E010000 		.4byte	0x10e
 5999 04d4 02       		.uleb128 0x2
 6000 04d5 91       		.byte	0x91
 6001 04d6 6C       		.sleb128 -20
 6002 04d7 19       		.uleb128 0x19
 6003 04d8 580D0000 		.4byte	.LASF73
 6004 04dc 01       		.byte	0x1
 6005 04dd 0003     		.2byte	0x300
 6006 04df EB020000 		.4byte	0x2eb
 6007 04e3 02       		.uleb128 0x2
 6008 04e4 91       		.byte	0x91
 6009 04e5 68       		.sleb128 -24
 6010 04e6 19       		.uleb128 0x19
 6011 04e7 FC060000 		.4byte	.LASF79
 6012 04eb 01       		.byte	0x1
 6013 04ec 0103     		.2byte	0x301
 6014 04ee 5D050000 		.4byte	0x55d
 6015 04f2 02       		.uleb128 0x2
 6016 04f3 91       		.byte	0x91
 6017 04f4 64       		.sleb128 -28
 6018 04f5 19       		.uleb128 0x19
 6019 04f6 4E050000 		.4byte	.LASF75
 6020 04fa 01       		.byte	0x1
 6021 04fb 0203     		.2byte	0x302
 6022 04fd 9C040000 		.4byte	0x49c
 6023 0501 02       		.uleb128 0x2
 6024 0502 91       		.byte	0x91
 6025 0503 60       		.sleb128 -32
 6026 0504 19       		.uleb128 0x19
 6027 0505 180D0000 		.4byte	.LASF62
 6028 0509 01       		.byte	0x1
 6029 050a 0303     		.2byte	0x303
 6030 050c 40010000 		.4byte	0x140
 6031 0510 02       		.uleb128 0x2
 6032 0511 91       		.byte	0x91
 6033 0512 00       		.sleb128 0
 6034 0513 19       		.uleb128 0x19
 6035 0514 FB040000 		.4byte	.LASF76
 6036 0518 01       		.byte	0x1
 6037 0519 0403     		.2byte	0x304
 6038 051b A7040000 		.4byte	0x4a7
 6039 051f 02       		.uleb128 0x2
 6040 0520 91       		.byte	0x91
 6041 0521 04       		.sleb128 4
 6042 0522 19       		.uleb128 0x19
 6043 0523 1C030000 		.4byte	.LASF77
 6044 0527 01       		.byte	0x1
 6045 0528 0503     		.2byte	0x305
 6046 052a AC040000 		.4byte	0x4ac
 6047 052e 02       		.uleb128 0x2
 6048 052f 91       		.byte	0x91
 6049 0530 08       		.sleb128 8
 6050 0531 19       		.uleb128 0x19
 6051 0532 AA060000 		.4byte	.LASF80
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 197


 6052 0536 01       		.byte	0x1
 6053 0537 0603     		.2byte	0x306
 6054 0539 6D050000 		.4byte	0x56d
 6055 053d 02       		.uleb128 0x2
 6056 053e 91       		.byte	0x91
 6057 053f 0C       		.sleb128 12
 6058 0540 1A       		.uleb128 0x1a
 6059 0541 41050000 		.4byte	.LASF59
 6060 0545 01       		.byte	0x1
 6061 0546 0803     		.2byte	0x308
 6062 0548 F0020000 		.4byte	0x2f0
 6063 054c 02       		.uleb128 0x2
 6064 054d 91       		.byte	0x91
 6065 054e 70       		.sleb128 -16
 6066 054f 1D       		.uleb128 0x1d
 6067 0550 7800     		.ascii	"x\000"
 6068 0552 01       		.byte	0x1
 6069 0553 0903     		.2byte	0x309
 6070 0555 40010000 		.4byte	0x140
 6071 0559 02       		.uleb128 0x2
 6072 055a 91       		.byte	0x91
 6073 055b 74       		.sleb128 -12
 6074 055c 00       		.byte	0
 6075 055d 07       		.uleb128 0x7
 6076 055e EB000000 		.4byte	0xeb
 6077 0562 06       		.uleb128 0x6
 6078 0563 04       		.byte	0x4
 6079 0564 68050000 		.4byte	0x568
 6080 0568 07       		.uleb128 0x7
 6081 0569 E0020000 		.4byte	0x2e0
 6082 056d 07       		.uleb128 0x7
 6083 056e 62050000 		.4byte	0x562
 6084 0572 1C       		.uleb128 0x1c
 6085 0573 B7050000 		.4byte	.LASF82
 6086 0577 01       		.byte	0x1
 6087 0578 C303     		.2byte	0x3c3
 6088 057a 00000000 		.4byte	.LFB131
 6089 057e D8000000 		.4byte	.LFE131-.LFB131
 6090 0582 01       		.uleb128 0x1
 6091 0583 9C       		.byte	0x9c
 6092 0584 98050000 		.4byte	0x598
 6093 0588 19       		.uleb128 0x19
 6094 0589 1C030000 		.4byte	.LASF77
 6095 058d 01       		.byte	0x1
 6096 058e C303     		.2byte	0x3c3
 6097 0590 AC040000 		.4byte	0x4ac
 6098 0594 02       		.uleb128 0x2
 6099 0595 91       		.byte	0x91
 6100 0596 74       		.sleb128 -12
 6101 0597 00       		.byte	0
 6102 0598 1E       		.uleb128 0x1e
 6103 0599 6F0A0000 		.4byte	.LASF85
 6104 059d 01       		.byte	0x1
 6105 059e 1804     		.2byte	0x418
 6106 05a0 00000000 		.4byte	.LFB132
 6107 05a4 D4000000 		.4byte	.LFE132-.LFB132
 6108 05a8 01       		.uleb128 0x1
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 198


 6109 05a9 9C       		.byte	0x9c
 6110 05aa CD050000 		.4byte	0x5cd
 6111 05ae 19       		.uleb128 0x19
 6112 05af F2070000 		.4byte	.LASF83
 6113 05b3 01       		.byte	0x1
 6114 05b4 1804     		.2byte	0x418
 6115 05b6 3E020000 		.4byte	0x23e
 6116 05ba 02       		.uleb128 0x2
 6117 05bb 91       		.byte	0x91
 6118 05bc 6C       		.sleb128 -20
 6119 05bd 1A       		.uleb128 0x1a
 6120 05be 8D050000 		.4byte	.LASF84
 6121 05c2 01       		.byte	0x1
 6122 05c3 1A04     		.2byte	0x41a
 6123 05c5 AC040000 		.4byte	0x4ac
 6124 05c9 02       		.uleb128 0x2
 6125 05ca 91       		.byte	0x91
 6126 05cb 74       		.sleb128 -12
 6127 05cc 00       		.byte	0
 6128 05cd 1E       		.uleb128 0x1e
 6129 05ce B2020000 		.4byte	.LASF86
 6130 05d2 01       		.byte	0x1
 6131 05d3 7404     		.2byte	0x474
 6132 05d5 00000000 		.4byte	.LFB133
 6133 05d9 C4000000 		.4byte	.LFE133-.LFB133
 6134 05dd 01       		.uleb128 0x1
 6135 05de 9C       		.byte	0x9c
 6136 05df 48060000 		.4byte	0x648
 6137 05e3 19       		.uleb128 0x19
 6138 05e4 09070000 		.4byte	.LASF87
 6139 05e8 01       		.byte	0x1
 6140 05e9 7404     		.2byte	0x474
 6141 05eb 4E060000 		.4byte	0x64e
 6142 05ef 02       		.uleb128 0x2
 6143 05f0 91       		.byte	0x91
 6144 05f1 64       		.sleb128 -28
 6145 05f2 19       		.uleb128 0x19
 6146 05f3 AD0B0000 		.4byte	.LASF88
 6147 05f7 01       		.byte	0x1
 6148 05f8 7404     		.2byte	0x474
 6149 05fa 53060000 		.4byte	0x653
 6150 05fe 02       		.uleb128 0x2
 6151 05ff 91       		.byte	0x91
 6152 0600 60       		.sleb128 -32
 6153 0601 1A       		.uleb128 0x1a
 6154 0602 50080000 		.4byte	.LASF89
 6155 0606 01       		.byte	0x1
 6156 0607 7604     		.2byte	0x476
 6157 0609 4B010000 		.4byte	0x14b
 6158 060d 02       		.uleb128 0x2
 6159 060e 91       		.byte	0x91
 6160 060f 6C       		.sleb128 -20
 6161 0610 1A       		.uleb128 0x1a
 6162 0611 CE010000 		.4byte	.LASF90
 6163 0615 01       		.byte	0x1
 6164 0616 7704     		.2byte	0x477
 6165 0618 35010000 		.4byte	0x135
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 199


 6166 061c 02       		.uleb128 0x2
 6167 061d 91       		.byte	0x91
 6168 061e 68       		.sleb128 -24
 6169 061f 1A       		.uleb128 0x1a
 6170 0620 9D090000 		.4byte	.LASF91
 6171 0624 01       		.byte	0x1
 6172 0625 7704     		.2byte	0x477
 6173 0627 35010000 		.4byte	0x135
 6174 062b 02       		.uleb128 0x2
 6175 062c 91       		.byte	0x91
 6176 062d 74       		.sleb128 -12
 6177 062e 1B       		.uleb128 0x1b
 6178 062f 32000000 		.4byte	.LBB19
 6179 0633 62000000 		.4byte	.LBE19-.LBB19
 6180 0637 1A       		.uleb128 0x1a
 6181 0638 17080000 		.4byte	.LASF92
 6182 063c 01       		.byte	0x1
 6183 063d 8104     		.2byte	0x481
 6184 063f 53060000 		.4byte	0x653
 6185 0643 02       		.uleb128 0x2
 6186 0644 91       		.byte	0x91
 6187 0645 70       		.sleb128 -16
 6188 0646 00       		.byte	0
 6189 0647 00       		.byte	0
 6190 0648 06       		.uleb128 0x6
 6191 0649 04       		.byte	0x4
 6192 064a 4B010000 		.4byte	0x14b
 6193 064e 07       		.uleb128 0x7
 6194 064f 48060000 		.4byte	0x648
 6195 0653 07       		.uleb128 0x7
 6196 0654 4B010000 		.4byte	0x14b
 6197 0658 1E       		.uleb128 0x1e
 6198 0659 71010000 		.4byte	.LASF93
 6199 065d 01       		.byte	0x1
 6200 065e C804     		.2byte	0x4c8
 6201 0660 00000000 		.4byte	.LFB134
 6202 0664 58000000 		.4byte	.LFE134-.LFB134
 6203 0668 01       		.uleb128 0x1
 6204 0669 9C       		.byte	0x9c
 6205 066a 8D060000 		.4byte	0x68d
 6206 066e 19       		.uleb128 0x19
 6207 066f 9F0B0000 		.4byte	.LASF94
 6208 0673 01       		.byte	0x1
 6209 0674 C804     		.2byte	0x4c8
 6210 0676 53060000 		.4byte	0x653
 6211 067a 02       		.uleb128 0x2
 6212 067b 91       		.byte	0x91
 6213 067c 6C       		.sleb128 -20
 6214 067d 1A       		.uleb128 0x1a
 6215 067e CE010000 		.4byte	.LASF90
 6216 0682 01       		.byte	0x1
 6217 0683 CA04     		.2byte	0x4ca
 6218 0685 35010000 		.4byte	0x135
 6219 0689 02       		.uleb128 0x2
 6220 068a 91       		.byte	0x91
 6221 068b 74       		.sleb128 -12
 6222 068c 00       		.byte	0
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 200


 6223 068d 18       		.uleb128 0x18
 6224 068e 5F0D0000 		.4byte	.LASF96
 6225 0692 01       		.byte	0x1
 6226 0693 3C05     		.2byte	0x53c
 6227 0695 40010000 		.4byte	0x140
 6228 0699 00000000 		.4byte	.LFB135
 6229 069d 34000000 		.4byte	.LFE135-.LFB135
 6230 06a1 01       		.uleb128 0x1
 6231 06a2 9C       		.byte	0x9c
 6232 06a3 D5060000 		.4byte	0x6d5
 6233 06a7 19       		.uleb128 0x19
 6234 06a8 C4060000 		.4byte	.LASF97
 6235 06ac 01       		.byte	0x1
 6236 06ad 3C05     		.2byte	0x53c
 6237 06af 3E020000 		.4byte	0x23e
 6238 06b3 02       		.uleb128 0x2
 6239 06b4 91       		.byte	0x91
 6240 06b5 6C       		.sleb128 -20
 6241 06b6 1A       		.uleb128 0x1a
 6242 06b7 8D050000 		.4byte	.LASF84
 6243 06bb 01       		.byte	0x1
 6244 06bc 3E05     		.2byte	0x53e
 6245 06be AC040000 		.4byte	0x4ac
 6246 06c2 02       		.uleb128 0x2
 6247 06c3 91       		.byte	0x91
 6248 06c4 74       		.sleb128 -12
 6249 06c5 1A       		.uleb128 0x1a
 6250 06c6 EC050000 		.4byte	.LASF98
 6251 06ca 01       		.byte	0x1
 6252 06cb 3F05     		.2byte	0x53f
 6253 06cd 40010000 		.4byte	0x140
 6254 06d1 02       		.uleb128 0x2
 6255 06d2 91       		.byte	0x91
 6256 06d3 70       		.sleb128 -16
 6257 06d4 00       		.byte	0
 6258 06d5 18       		.uleb128 0x18
 6259 06d6 12090000 		.4byte	.LASF99
 6260 06da 01       		.byte	0x1
 6261 06db 5205     		.2byte	0x552
 6262 06dd 40010000 		.4byte	0x140
 6263 06e1 00000000 		.4byte	.LFB136
 6264 06e5 58000000 		.4byte	.LFE136-.LFB136
 6265 06e9 01       		.uleb128 0x1
 6266 06ea 9C       		.byte	0x9c
 6267 06eb 74070000 		.4byte	0x774
 6268 06ef 19       		.uleb128 0x19
 6269 06f0 C4060000 		.4byte	.LASF97
 6270 06f4 01       		.byte	0x1
 6271 06f5 5205     		.2byte	0x552
 6272 06f7 3E020000 		.4byte	0x23e
 6273 06fb 02       		.uleb128 0x2
 6274 06fc 91       		.byte	0x91
 6275 06fd 5C       		.sleb128 -36
 6276 06fe 1A       		.uleb128 0x1a
 6277 06ff 8D050000 		.4byte	.LASF84
 6278 0703 01       		.byte	0x1
 6279 0704 5405     		.2byte	0x554
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 201


 6280 0706 AC040000 		.4byte	0x4ac
 6281 070a 02       		.uleb128 0x2
 6282 070b 91       		.byte	0x91
 6283 070c 6C       		.sleb128 -20
 6284 070d 1A       		.uleb128 0x1a
 6285 070e EC050000 		.4byte	.LASF98
 6286 0712 01       		.byte	0x1
 6287 0713 5505     		.2byte	0x555
 6288 0715 40010000 		.4byte	0x140
 6289 0719 02       		.uleb128 0x2
 6290 071a 91       		.byte	0x91
 6291 071b 68       		.sleb128 -24
 6292 071c 1A       		.uleb128 0x1a
 6293 071d A10A0000 		.4byte	.LASF100
 6294 0721 01       		.byte	0x1
 6295 0722 5505     		.2byte	0x555
 6296 0724 40010000 		.4byte	0x140
 6297 0728 02       		.uleb128 0x2
 6298 0729 91       		.byte	0x91
 6299 072a 70       		.sleb128 -16
 6300 072b 1F       		.uleb128 0x1f
 6301 072c AC030000 		.4byte	0x3ac
 6302 0730 0C000000 		.4byte	.LBB20
 6303 0734 1A000000 		.4byte	.LBE20-.LBB20
 6304 0738 01       		.byte	0x1
 6305 0739 6905     		.2byte	0x569
 6306 073b 5A070000 		.4byte	0x75a
 6307 073f 1B       		.uleb128 0x1b
 6308 0740 0C000000 		.4byte	.LBB21
 6309 0744 1A000000 		.4byte	.LBE21-.LBB21
 6310 0748 20       		.uleb128 0x20
 6311 0749 BC030000 		.4byte	0x3bc
 6312 074d 02       		.uleb128 0x2
 6313 074e 91       		.byte	0x91
 6314 074f 64       		.sleb128 -28
 6315 0750 20       		.uleb128 0x20
 6316 0751 C7030000 		.4byte	0x3c7
 6317 0755 02       		.uleb128 0x2
 6318 0756 91       		.byte	0x91
 6319 0757 60       		.sleb128 -32
 6320 0758 00       		.byte	0
 6321 0759 00       		.byte	0
 6322 075a 21       		.uleb128 0x21
 6323 075b D3030000 		.4byte	0x3d3
 6324 075f 42000000 		.4byte	.LBB22
 6325 0763 06000000 		.4byte	.LBE22-.LBB22
 6326 0767 01       		.byte	0x1
 6327 0768 7005     		.2byte	0x570
 6328 076a 22       		.uleb128 0x22
 6329 076b DF030000 		.4byte	0x3df
 6330 076f 02       		.uleb128 0x2
 6331 0770 91       		.byte	0x91
 6332 0771 74       		.sleb128 -12
 6333 0772 00       		.byte	0
 6334 0773 00       		.byte	0
 6335 0774 1E       		.uleb128 0x1e
 6336 0775 0B040000 		.4byte	.LASF101
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 202


 6337 0779 01       		.byte	0x1
 6338 077a 7A05     		.2byte	0x57a
 6339 077c 00000000 		.4byte	.LFB137
 6340 0780 20010000 		.4byte	.LFE137-.LFB137
 6341 0784 01       		.uleb128 0x1
 6342 0785 9C       		.byte	0x9c
 6343 0786 E5070000 		.4byte	0x7e5
 6344 078a 19       		.uleb128 0x19
 6345 078b C4060000 		.4byte	.LASF97
 6346 078f 01       		.byte	0x1
 6347 0790 7A05     		.2byte	0x57a
 6348 0792 3E020000 		.4byte	0x23e
 6349 0796 02       		.uleb128 0x2
 6350 0797 91       		.byte	0x91
 6351 0798 64       		.sleb128 -28
 6352 0799 19       		.uleb128 0x19
 6353 079a E3060000 		.4byte	.LASF102
 6354 079e 01       		.byte	0x1
 6355 079f 7A05     		.2byte	0x57a
 6356 07a1 40010000 		.4byte	0x140
 6357 07a5 02       		.uleb128 0x2
 6358 07a6 91       		.byte	0x91
 6359 07a7 60       		.sleb128 -32
 6360 07a8 1A       		.uleb128 0x1a
 6361 07a9 8D050000 		.4byte	.LASF84
 6362 07ad 01       		.byte	0x1
 6363 07ae 7C05     		.2byte	0x57c
 6364 07b0 AC040000 		.4byte	0x4ac
 6365 07b4 02       		.uleb128 0x2
 6366 07b5 91       		.byte	0x91
 6367 07b6 70       		.sleb128 -16
 6368 07b7 1A       		.uleb128 0x1a
 6369 07b8 7A080000 		.4byte	.LASF103
 6370 07bc 01       		.byte	0x1
 6371 07bd 7D05     		.2byte	0x57d
 6372 07bf 40010000 		.4byte	0x140
 6373 07c3 02       		.uleb128 0x2
 6374 07c4 91       		.byte	0x91
 6375 07c5 6C       		.sleb128 -20
 6376 07c6 1A       		.uleb128 0x1a
 6377 07c7 53020000 		.4byte	.LASF104
 6378 07cb 01       		.byte	0x1
 6379 07cc 7D05     		.2byte	0x57d
 6380 07ce 40010000 		.4byte	0x140
 6381 07d2 02       		.uleb128 0x2
 6382 07d3 91       		.byte	0x91
 6383 07d4 68       		.sleb128 -24
 6384 07d5 1A       		.uleb128 0x1a
 6385 07d6 93050000 		.4byte	.LASF105
 6386 07da 01       		.byte	0x1
 6387 07db 7E05     		.2byte	0x57e
 6388 07dd 35010000 		.4byte	0x135
 6389 07e1 02       		.uleb128 0x2
 6390 07e2 91       		.byte	0x91
 6391 07e3 74       		.sleb128 -12
 6392 07e4 00       		.byte	0
 6393 07e5 1E       		.uleb128 0x1e
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 203


 6394 07e6 34000000 		.4byte	.LASF106
 6395 07ea 01       		.byte	0x1
 6396 07eb 1E06     		.2byte	0x61e
 6397 07ed 00000000 		.4byte	.LFB138
 6398 07f1 C4000000 		.4byte	.LFE138-.LFB138
 6399 07f5 01       		.uleb128 0x1
 6400 07f6 9C       		.byte	0x9c
 6401 07f7 1A080000 		.4byte	0x81a
 6402 07fb 19       		.uleb128 0x19
 6403 07fc 74060000 		.4byte	.LASF107
 6404 0800 01       		.byte	0x1
 6405 0801 1E06     		.2byte	0x61e
 6406 0803 3E020000 		.4byte	0x23e
 6407 0807 02       		.uleb128 0x2
 6408 0808 91       		.byte	0x91
 6409 0809 6C       		.sleb128 -20
 6410 080a 1A       		.uleb128 0x1a
 6411 080b 8D050000 		.4byte	.LASF84
 6412 080f 01       		.byte	0x1
 6413 0810 2006     		.2byte	0x620
 6414 0812 AC040000 		.4byte	0x4ac
 6415 0816 02       		.uleb128 0x2
 6416 0817 91       		.byte	0x91
 6417 0818 74       		.sleb128 -12
 6418 0819 00       		.byte	0
 6419 081a 23       		.uleb128 0x23
 6420 081b F00B0000 		.4byte	.LASF207
 6421 081f 01       		.byte	0x1
 6422 0820 7806     		.2byte	0x678
 6423 0822 35010000 		.4byte	0x135
 6424 0826 00000000 		.4byte	.LFB139
 6425 082a 64000000 		.4byte	.LFE139-.LFB139
 6426 082e 01       		.uleb128 0x1
 6427 082f 9C       		.byte	0x9c
 6428 0830 62080000 		.4byte	0x862
 6429 0834 19       		.uleb128 0x19
 6430 0835 C4060000 		.4byte	.LASF97
 6431 0839 01       		.byte	0x1
 6432 083a 7806     		.2byte	0x678
 6433 083c 62080000 		.4byte	0x862
 6434 0840 02       		.uleb128 0x2
 6435 0841 91       		.byte	0x91
 6436 0842 6C       		.sleb128 -20
 6437 0843 1A       		.uleb128 0x1a
 6438 0844 B2040000 		.4byte	.LASF78
 6439 0848 01       		.byte	0x1
 6440 0849 7A06     		.2byte	0x67a
 6441 084b 35010000 		.4byte	0x135
 6442 084f 02       		.uleb128 0x2
 6443 0850 91       		.byte	0x91
 6444 0851 74       		.sleb128 -12
 6445 0852 1A       		.uleb128 0x1a
 6446 0853 8D050000 		.4byte	.LASF84
 6447 0857 01       		.byte	0x1
 6448 0858 7B06     		.2byte	0x67b
 6449 085a 72080000 		.4byte	0x872
 6450 085e 02       		.uleb128 0x2
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 204


 6451 085f 91       		.byte	0x91
 6452 0860 70       		.sleb128 -16
 6453 0861 00       		.byte	0
 6454 0862 07       		.uleb128 0x7
 6455 0863 3E020000 		.4byte	0x23e
 6456 0867 06       		.uleb128 0x6
 6457 0868 04       		.byte	0x4
 6458 0869 6D080000 		.4byte	0x86d
 6459 086d 07       		.uleb128 0x7
 6460 086e A0030000 		.4byte	0x3a0
 6461 0872 07       		.uleb128 0x7
 6462 0873 67080000 		.4byte	0x867
 6463 0877 1E       		.uleb128 0x1e
 6464 0878 D0050000 		.4byte	.LASF108
 6465 087c 01       		.byte	0x1
 6466 087d A606     		.2byte	0x6a6
 6467 087f 00000000 		.4byte	.LFB140
 6468 0883 AC000000 		.4byte	.LFE140-.LFB140
 6469 0887 01       		.uleb128 0x1
 6470 0888 9C       		.byte	0x9c
 6471 0889 AC080000 		.4byte	0x8ac
 6472 088d 19       		.uleb128 0x19
 6473 088e E0080000 		.4byte	.LASF109
 6474 0892 01       		.byte	0x1
 6475 0893 A606     		.2byte	0x6a6
 6476 0895 3E020000 		.4byte	0x23e
 6477 0899 02       		.uleb128 0x2
 6478 089a 91       		.byte	0x91
 6479 089b 6C       		.sleb128 -20
 6480 089c 1A       		.uleb128 0x1a
 6481 089d 8D050000 		.4byte	.LASF84
 6482 08a1 01       		.byte	0x1
 6483 08a2 A806     		.2byte	0x6a8
 6484 08a4 AC080000 		.4byte	0x8ac
 6485 08a8 02       		.uleb128 0x2
 6486 08a9 91       		.byte	0x91
 6487 08aa 74       		.sleb128 -12
 6488 08ab 00       		.byte	0
 6489 08ac 07       		.uleb128 0x7
 6490 08ad AC040000 		.4byte	0x4ac
 6491 08b1 18       		.uleb128 0x18
 6492 08b2 97040000 		.4byte	.LASF110
 6493 08b6 01       		.byte	0x1
 6494 08b7 DC06     		.2byte	0x6dc
 6495 08b9 35010000 		.4byte	0x135
 6496 08bd 00000000 		.4byte	.LFB141
 6497 08c1 D0000000 		.4byte	.LFE141-.LFB141
 6498 08c5 01       		.uleb128 0x1
 6499 08c6 9C       		.byte	0x9c
 6500 08c7 50090000 		.4byte	0x950
 6501 08cb 19       		.uleb128 0x19
 6502 08cc E0080000 		.4byte	.LASF109
 6503 08d0 01       		.byte	0x1
 6504 08d1 DC06     		.2byte	0x6dc
 6505 08d3 3E020000 		.4byte	0x23e
 6506 08d7 02       		.uleb128 0x2
 6507 08d8 91       		.byte	0x91
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 205


 6508 08d9 5C       		.sleb128 -36
 6509 08da 1A       		.uleb128 0x1a
 6510 08db 93050000 		.4byte	.LASF105
 6511 08df 01       		.byte	0x1
 6512 08e0 DE06     		.2byte	0x6de
 6513 08e2 35010000 		.4byte	0x135
 6514 08e6 02       		.uleb128 0x2
 6515 08e7 91       		.byte	0x91
 6516 08e8 74       		.sleb128 -12
 6517 08e9 1A       		.uleb128 0x1a
 6518 08ea 8D050000 		.4byte	.LASF84
 6519 08ee 01       		.byte	0x1
 6520 08ef DF06     		.2byte	0x6df
 6521 08f1 AC080000 		.4byte	0x8ac
 6522 08f5 02       		.uleb128 0x2
 6523 08f6 91       		.byte	0x91
 6524 08f7 70       		.sleb128 -16
 6525 08f8 1A       		.uleb128 0x1a
 6526 08f9 86090000 		.4byte	.LASF111
 6527 08fd 01       		.byte	0x1
 6528 08fe E006     		.2byte	0x6e0
 6529 0900 40010000 		.4byte	0x140
 6530 0904 02       		.uleb128 0x2
 6531 0905 91       		.byte	0x91
 6532 0906 68       		.sleb128 -24
 6533 0907 1F       		.uleb128 0x1f
 6534 0908 AC030000 		.4byte	0x3ac
 6535 090c 1E000000 		.4byte	.LBB24
 6536 0910 1A000000 		.4byte	.LBE24-.LBB24
 6537 0914 01       		.byte	0x1
 6538 0915 F606     		.2byte	0x6f6
 6539 0917 36090000 		.4byte	0x936
 6540 091b 1B       		.uleb128 0x1b
 6541 091c 1E000000 		.4byte	.LBB25
 6542 0920 1A000000 		.4byte	.LBE25-.LBB25
 6543 0924 20       		.uleb128 0x20
 6544 0925 BC030000 		.4byte	0x3bc
 6545 0929 02       		.uleb128 0x2
 6546 092a 91       		.byte	0x91
 6547 092b 64       		.sleb128 -28
 6548 092c 20       		.uleb128 0x20
 6549 092d C7030000 		.4byte	0x3c7
 6550 0931 02       		.uleb128 0x2
 6551 0932 91       		.byte	0x91
 6552 0933 60       		.sleb128 -32
 6553 0934 00       		.byte	0
 6554 0935 00       		.byte	0
 6555 0936 21       		.uleb128 0x21
 6556 0937 D3030000 		.4byte	0x3d3
 6557 093b AC000000 		.4byte	.LBB26
 6558 093f 06000000 		.4byte	.LBE26-.LBB26
 6559 0943 01       		.byte	0x1
 6560 0944 1A07     		.2byte	0x71a
 6561 0946 22       		.uleb128 0x22
 6562 0947 DF030000 		.4byte	0x3df
 6563 094b 02       		.uleb128 0x2
 6564 094c 91       		.byte	0x91
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 206


 6565 094d 6C       		.sleb128 -20
 6566 094e 00       		.byte	0
 6567 094f 00       		.byte	0
 6568 0950 1E       		.uleb128 0x1e
 6569 0951 2B040000 		.4byte	.LASF112
 6570 0955 01       		.byte	0x1
 6571 0956 2207     		.2byte	0x722
 6572 0958 00000000 		.4byte	.LFB142
 6573 095c 78000000 		.4byte	.LFE142-.LFB142
 6574 0960 01       		.uleb128 0x1
 6575 0961 9C       		.byte	0x9c
 6576 0962 76090000 		.4byte	0x976
 6577 0966 1A       		.uleb128 0x1a
 6578 0967 B2040000 		.4byte	.LASF78
 6579 096b 01       		.byte	0x1
 6580 096c 2407     		.2byte	0x724
 6581 096e 35010000 		.4byte	0x135
 6582 0972 02       		.uleb128 0x2
 6583 0973 91       		.byte	0x91
 6584 0974 74       		.sleb128 -12
 6585 0975 00       		.byte	0
 6586 0976 24       		.uleb128 0x24
 6587 0977 BF080000 		.4byte	.LASF113
 6588 097b 01       		.byte	0x1
 6589 097c 8D07     		.2byte	0x78d
 6590 097e 00000000 		.4byte	.LFB143
 6591 0982 18000000 		.4byte	.LFE143-.LFB143
 6592 0986 01       		.uleb128 0x1
 6593 0987 9C       		.byte	0x9c
 6594 0988 25       		.uleb128 0x25
 6595 0989 E5090000 		.4byte	.LASF114
 6596 098d 01       		.byte	0x1
 6597 098e 9807     		.2byte	0x798
 6598 0990 00000000 		.4byte	.LFB144
 6599 0994 1C000000 		.4byte	.LFE144-.LFB144
 6600 0998 01       		.uleb128 0x1
 6601 0999 9C       		.byte	0x9c
 6602 099a 18       		.uleb128 0x18
 6603 099b EE080000 		.4byte	.LASF115
 6604 099f 01       		.byte	0x1
 6605 09a0 E107     		.2byte	0x7e1
 6606 09a2 35010000 		.4byte	0x135
 6607 09a6 00000000 		.4byte	.LFB145
 6608 09aa 28010000 		.4byte	.LFE145-.LFB145
 6609 09ae 01       		.uleb128 0x1
 6610 09af 9C       		.byte	0x9c
 6611 09b0 EC090000 		.4byte	0x9ec
 6612 09b4 1A       		.uleb128 0x1a
 6613 09b5 8D050000 		.4byte	.LASF84
 6614 09b9 01       		.byte	0x1
 6615 09ba E307     		.2byte	0x7e3
 6616 09bc AC040000 		.4byte	0x4ac
 6617 09c0 02       		.uleb128 0x2
 6618 09c1 91       		.byte	0x91
 6619 09c2 74       		.sleb128 -12
 6620 09c3 1A       		.uleb128 0x1a
 6621 09c4 CE010000 		.4byte	.LASF90
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 207


 6622 09c8 01       		.byte	0x1
 6623 09c9 E407     		.2byte	0x7e4
 6624 09cb 35010000 		.4byte	0x135
 6625 09cf 02       		.uleb128 0x2
 6626 09d0 91       		.byte	0x91
 6627 09d1 70       		.sleb128 -16
 6628 09d2 1B       		.uleb128 0x1b
 6629 09d3 AC000000 		.4byte	.LBB28
 6630 09d7 2E000000 		.4byte	.LBE28-.LBB28
 6631 09db 1A       		.uleb128 0x1a
 6632 09dc D1080000 		.4byte	.LASF116
 6633 09e0 01       		.byte	0x1
 6634 09e1 1C08     		.2byte	0x81c
 6635 09e3 40010000 		.4byte	0x140
 6636 09e7 02       		.uleb128 0x2
 6637 09e8 91       		.byte	0x91
 6638 09e9 6C       		.sleb128 -20
 6639 09ea 00       		.byte	0
 6640 09eb 00       		.byte	0
 6641 09ec 26       		.uleb128 0x26
 6642 09ed 25020000 		.4byte	.LASF117
 6643 09f1 01       		.byte	0x1
 6644 09f2 4F08     		.2byte	0x84f
 6645 09f4 4B010000 		.4byte	0x14b
 6646 09f8 00000000 		.4byte	.LFB146
 6647 09fc 20000000 		.4byte	.LFE146-.LFB146
 6648 0a00 01       		.uleb128 0x1
 6649 0a01 9C       		.byte	0x9c
 6650 0a02 160A0000 		.4byte	0xa16
 6651 0a06 1A       		.uleb128 0x1a
 6652 0a07 E90B0000 		.4byte	.LASF118
 6653 0a0b 01       		.byte	0x1
 6654 0a0c 5108     		.2byte	0x851
 6655 0a0e 4B010000 		.4byte	0x14b
 6656 0a12 02       		.uleb128 0x2
 6657 0a13 91       		.byte	0x91
 6658 0a14 74       		.sleb128 -12
 6659 0a15 00       		.byte	0
 6660 0a16 18       		.uleb128 0x18
 6661 0a17 55030000 		.4byte	.LASF119
 6662 0a1b 01       		.byte	0x1
 6663 0a1c 5E08     		.2byte	0x85e
 6664 0a1e 4B010000 		.4byte	0x14b
 6665 0a22 00000000 		.4byte	.LFB147
 6666 0a26 24000000 		.4byte	.LFE147-.LFB147
 6667 0a2a 01       		.uleb128 0x1
 6668 0a2b 9C       		.byte	0x9c
 6669 0a2c 4F0A0000 		.4byte	0xa4f
 6670 0a30 1A       		.uleb128 0x1a
 6671 0a31 B2040000 		.4byte	.LASF78
 6672 0a35 01       		.byte	0x1
 6673 0a36 6008     		.2byte	0x860
 6674 0a38 4B010000 		.4byte	0x14b
 6675 0a3c 02       		.uleb128 0x2
 6676 0a3d 91       		.byte	0x91
 6677 0a3e 70       		.sleb128 -16
 6678 0a3f 1A       		.uleb128 0x1a
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 208


 6679 0a40 86090000 		.4byte	.LASF111
 6680 0a44 01       		.byte	0x1
 6681 0a45 6108     		.2byte	0x861
 6682 0a47 40010000 		.4byte	0x140
 6683 0a4b 02       		.uleb128 0x2
 6684 0a4c 91       		.byte	0x91
 6685 0a4d 74       		.sleb128 -12
 6686 0a4e 00       		.byte	0
 6687 0a4f 27       		.uleb128 0x27
 6688 0a50 2E0B0000 		.4byte	.LASF208
 6689 0a54 01       		.byte	0x1
 6690 0a55 7D08     		.2byte	0x87d
 6691 0a57 40010000 		.4byte	0x140
 6692 0a5b 00000000 		.4byte	.LFB148
 6693 0a5f 18000000 		.4byte	.LFE148-.LFB148
 6694 0a63 01       		.uleb128 0x1
 6695 0a64 9C       		.byte	0x9c
 6696 0a65 26       		.uleb128 0x26
 6697 0a66 250A0000 		.4byte	.LASF120
 6698 0a6a 01       		.byte	0x1
 6699 0a6b 8508     		.2byte	0x885
 6700 0a6d B2000000 		.4byte	0xb2
 6701 0a71 00000000 		.4byte	.LFB149
 6702 0a75 38000000 		.4byte	.LFE149-.LFB149
 6703 0a79 01       		.uleb128 0x1
 6704 0a7a 9C       		.byte	0x9c
 6705 0a7b 9E0A0000 		.4byte	0xa9e
 6706 0a7f 19       		.uleb128 0x19
 6707 0a80 FE030000 		.4byte	.LASF121
 6708 0a84 01       		.byte	0x1
 6709 0a85 8508     		.2byte	0x885
 6710 0a87 3E020000 		.4byte	0x23e
 6711 0a8b 02       		.uleb128 0x2
 6712 0a8c 91       		.byte	0x91
 6713 0a8d 6C       		.sleb128 -20
 6714 0a8e 1A       		.uleb128 0x1a
 6715 0a8f 8D050000 		.4byte	.LASF84
 6716 0a93 01       		.byte	0x1
 6717 0a94 8708     		.2byte	0x887
 6718 0a96 AC040000 		.4byte	0x4ac
 6719 0a9a 02       		.uleb128 0x2
 6720 0a9b 91       		.byte	0x91
 6721 0a9c 74       		.sleb128 -12
 6722 0a9d 00       		.byte	0
 6723 0a9e 18       		.uleb128 0x18
 6724 0a9f 3F040000 		.4byte	.LASF122
 6725 0aa3 01       		.byte	0x1
 6726 0aa4 C309     		.2byte	0x9c3
 6727 0aa6 35010000 		.4byte	0x135
 6728 0aaa 00000000 		.4byte	.LFB150
 6729 0aae 4C010000 		.4byte	.LFE150-.LFB150
 6730 0ab2 01       		.uleb128 0x1
 6731 0ab3 9C       		.byte	0x9c
 6732 0ab4 180B0000 		.4byte	0xb18
 6733 0ab8 1A       		.uleb128 0x1a
 6734 0ab9 8D050000 		.4byte	.LASF84
 6735 0abd 01       		.byte	0x1
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 209


 6736 0abe C509     		.2byte	0x9c5
 6737 0ac0 AC040000 		.4byte	0x4ac
 6738 0ac4 02       		.uleb128 0x2
 6739 0ac5 91       		.byte	0x91
 6740 0ac6 68       		.sleb128 -24
 6741 0ac7 1A       		.uleb128 0x1a
 6742 0ac8 4C0A0000 		.4byte	.LASF28
 6743 0acc 01       		.byte	0x1
 6744 0acd C609     		.2byte	0x9c6
 6745 0acf 4B010000 		.4byte	0x14b
 6746 0ad3 02       		.uleb128 0x2
 6747 0ad4 91       		.byte	0x91
 6748 0ad5 64       		.sleb128 -28
 6749 0ad6 1A       		.uleb128 0x1a
 6750 0ad7 DC050000 		.4byte	.LASF123
 6751 0adb 01       		.byte	0x1
 6752 0adc C709     		.2byte	0x9c7
 6753 0ade 35010000 		.4byte	0x135
 6754 0ae2 02       		.uleb128 0x2
 6755 0ae3 91       		.byte	0x91
 6756 0ae4 74       		.sleb128 -12
 6757 0ae5 1B       		.uleb128 0x1b
 6758 0ae6 12000000 		.4byte	.LBB29
 6759 0aea EC000000 		.4byte	.LBE29-.LBB29
 6760 0aee 1A       		.uleb128 0x1a
 6761 0aef 17080000 		.4byte	.LASF92
 6762 0af3 01       		.byte	0x1
 6763 0af4 D109     		.2byte	0x9d1
 6764 0af6 53060000 		.4byte	0x653
 6765 0afa 02       		.uleb128 0x2
 6766 0afb 91       		.byte	0x91
 6767 0afc 70       		.sleb128 -16
 6768 0afd 1B       		.uleb128 0x1b
 6769 0afe 26000000 		.4byte	.LBB30
 6770 0b02 30000000 		.4byte	.LBE30-.LBB30
 6771 0b06 1A       		.uleb128 0x1a
 6772 0b07 F30A0000 		.4byte	.LASF124
 6773 0b0b 01       		.byte	0x1
 6774 0b0c D909     		.2byte	0x9d9
 6775 0b0e 180B0000 		.4byte	0xb18
 6776 0b12 02       		.uleb128 0x2
 6777 0b13 91       		.byte	0x91
 6778 0b14 6C       		.sleb128 -20
 6779 0b15 00       		.byte	0
 6780 0b16 00       		.byte	0
 6781 0b17 00       		.byte	0
 6782 0b18 06       		.uleb128 0x6
 6783 0b19 04       		.byte	0x4
 6784 0b1a 33020000 		.4byte	0x233
 6785 0b1e 1E       		.uleb128 0x1e
 6786 0b1f 56060000 		.4byte	.LASF125
 6787 0b23 01       		.byte	0x1
 6788 0b24 C90A     		.2byte	0xac9
 6789 0b26 00000000 		.4byte	.LFB151
 6790 0b2a F4000000 		.4byte	.LFE151-.LFB151
 6791 0b2e 01       		.uleb128 0x1
 6792 0b2f 9C       		.byte	0x9c
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 210


 6793 0b30 930B0000 		.4byte	0xb93
 6794 0b34 28       		.uleb128 0x28
 6795 0b35 1C000000 		.4byte	.LBB31
 6796 0b39 4E000000 		.4byte	.LBE31-.LBB31
 6797 0b3d 600B0000 		.4byte	0xb60
 6798 0b41 1A       		.uleb128 0x1a
 6799 0b42 C80D0000 		.4byte	.LASF126
 6800 0b46 01       		.byte	0x1
 6801 0b47 F30A     		.2byte	0xaf3
 6802 0b49 990B0000 		.4byte	0xb99
 6803 0b4d 02       		.uleb128 0x2
 6804 0b4e 91       		.byte	0x91
 6805 0b4f 70       		.sleb128 -16
 6806 0b50 1A       		.uleb128 0x1a
 6807 0b51 A0080000 		.4byte	.LASF127
 6808 0b55 01       		.byte	0x1
 6809 0b56 F40A     		.2byte	0xaf4
 6810 0b58 5D050000 		.4byte	0x55d
 6811 0b5c 02       		.uleb128 0x2
 6812 0b5d 91       		.byte	0x91
 6813 0b5e 6C       		.sleb128 -20
 6814 0b5f 00       		.byte	0
 6815 0b60 1B       		.uleb128 0x1b
 6816 0b61 6A000000 		.4byte	.LBB32
 6817 0b65 6C000000 		.4byte	.LBE32-.LBB32
 6818 0b69 1A       		.uleb128 0x1a
 6819 0b6a C4070000 		.4byte	.LASF128
 6820 0b6e 01       		.byte	0x1
 6821 0b6f 010B     		.2byte	0xb01
 6822 0b71 40010000 		.4byte	0x140
 6823 0b75 02       		.uleb128 0x2
 6824 0b76 91       		.byte	0x91
 6825 0b77 74       		.sleb128 -12
 6826 0b78 1B       		.uleb128 0x1b
 6827 0b79 96000000 		.4byte	.LBB33
 6828 0b7d 3A000000 		.4byte	.LBE33-.LBB33
 6829 0b81 1A       		.uleb128 0x1a
 6830 0b82 62050000 		.4byte	.LASF129
 6831 0b86 01       		.byte	0x1
 6832 0b87 010B     		.2byte	0xb01
 6833 0b89 9E0B0000 		.4byte	0xb9e
 6834 0b8d 02       		.uleb128 0x2
 6835 0b8e 91       		.byte	0x91
 6836 0b8f 68       		.sleb128 -24
 6837 0b90 00       		.byte	0
 6838 0b91 00       		.byte	0
 6839 0b92 00       		.byte	0
 6840 0b93 06       		.uleb128 0x6
 6841 0b94 04       		.byte	0x4
 6842 0b95 5D050000 		.4byte	0x55d
 6843 0b99 07       		.uleb128 0x7
 6844 0b9a 930B0000 		.4byte	0xb93
 6845 0b9e 07       		.uleb128 0x7
 6846 0b9f 180B0000 		.4byte	0xb18
 6847 0ba3 1E       		.uleb128 0x1e
 6848 0ba4 52040000 		.4byte	.LASF130
 6849 0ba8 01       		.byte	0x1
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 211


 6850 0ba9 0F0B     		.2byte	0xb0f
 6851 0bab 00000000 		.4byte	.LFB152
 6852 0baf 38000000 		.4byte	.LFE152-.LFB152
 6853 0bb3 01       		.uleb128 0x1
 6854 0bb4 9C       		.byte	0x9c
 6855 0bb5 D80B0000 		.4byte	0xbd8
 6856 0bb9 19       		.uleb128 0x19
 6857 0bba 28000000 		.4byte	.LASF131
 6858 0bbe 01       		.byte	0x1
 6859 0bbf 0F0B     		.2byte	0xb0f
 6860 0bc1 9E0B0000 		.4byte	0xb9e
 6861 0bc5 02       		.uleb128 0x2
 6862 0bc6 91       		.byte	0x91
 6863 0bc7 74       		.sleb128 -12
 6864 0bc8 19       		.uleb128 0x19
 6865 0bc9 69020000 		.4byte	.LASF132
 6866 0bcd 01       		.byte	0x1
 6867 0bce 0F0B     		.2byte	0xb0f
 6868 0bd0 53060000 		.4byte	0x653
 6869 0bd4 02       		.uleb128 0x2
 6870 0bd5 91       		.byte	0x91
 6871 0bd6 70       		.sleb128 -16
 6872 0bd7 00       		.byte	0
 6873 0bd8 1E       		.uleb128 0x1e
 6874 0bd9 DC040000 		.4byte	.LASF133
 6875 0bdd 01       		.byte	0x1
 6876 0bde 200B     		.2byte	0xb20
 6877 0be0 00000000 		.4byte	.LFB153
 6878 0be4 54000000 		.4byte	.LFE153-.LFB153
 6879 0be8 01       		.uleb128 0x1
 6880 0be9 9C       		.byte	0x9c
 6881 0bea 1C0C0000 		.4byte	0xc1c
 6882 0bee 19       		.uleb128 0x19
 6883 0bef 28000000 		.4byte	.LASF131
 6884 0bf3 01       		.byte	0x1
 6885 0bf4 200B     		.2byte	0xb20
 6886 0bf6 180B0000 		.4byte	0xb18
 6887 0bfa 02       		.uleb128 0x2
 6888 0bfb 91       		.byte	0x91
 6889 0bfc 74       		.sleb128 -12
 6890 0bfd 19       		.uleb128 0x19
 6891 0bfe 4C0A0000 		.4byte	.LASF28
 6892 0c02 01       		.byte	0x1
 6893 0c03 200B     		.2byte	0xb20
 6894 0c05 53060000 		.4byte	0x653
 6895 0c09 02       		.uleb128 0x2
 6896 0c0a 91       		.byte	0x91
 6897 0c0b 70       		.sleb128 -16
 6898 0c0c 19       		.uleb128 0x19
 6899 0c0d 69020000 		.4byte	.LASF132
 6900 0c11 01       		.byte	0x1
 6901 0c12 200B     		.2byte	0xb20
 6902 0c14 53060000 		.4byte	0x653
 6903 0c18 02       		.uleb128 0x2
 6904 0c19 91       		.byte	0x91
 6905 0c1a 6C       		.sleb128 -20
 6906 0c1b 00       		.byte	0
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 212


 6907 0c1c 1E       		.uleb128 0x1e
 6908 0c1d 210C0000 		.4byte	.LASF134
 6909 0c21 01       		.byte	0x1
 6910 0c22 3A0B     		.2byte	0xb3a
 6911 0c24 00000000 		.4byte	.LFB154
 6912 0c28 44000000 		.4byte	.LFE154-.LFB154
 6913 0c2c 01       		.uleb128 0x1
 6914 0c2d 9C       		.byte	0x9c
 6915 0c2e 600C0000 		.4byte	0xc60
 6916 0c32 19       		.uleb128 0x19
 6917 0c33 28000000 		.4byte	.LASF131
 6918 0c37 01       		.byte	0x1
 6919 0c38 3A0B     		.2byte	0xb3a
 6920 0c3a 9E0B0000 		.4byte	0xb9e
 6921 0c3e 02       		.uleb128 0x2
 6922 0c3f 91       		.byte	0x91
 6923 0c40 74       		.sleb128 -12
 6924 0c41 19       		.uleb128 0x19
 6925 0c42 69020000 		.4byte	.LASF132
 6926 0c46 01       		.byte	0x1
 6927 0c47 3A0B     		.2byte	0xb3a
 6928 0c49 4B010000 		.4byte	0x14b
 6929 0c4d 02       		.uleb128 0x2
 6930 0c4e 91       		.byte	0x91
 6931 0c4f 70       		.sleb128 -16
 6932 0c50 19       		.uleb128 0x19
 6933 0c51 1C0B0000 		.4byte	.LASF135
 6934 0c55 01       		.byte	0x1
 6935 0c56 3A0B     		.2byte	0xb3a
 6936 0c58 600C0000 		.4byte	0xc60
 6937 0c5c 02       		.uleb128 0x2
 6938 0c5d 91       		.byte	0x91
 6939 0c5e 6C       		.sleb128 -20
 6940 0c5f 00       		.byte	0
 6941 0c60 07       		.uleb128 0x7
 6942 0c61 35010000 		.4byte	0x135
 6943 0c65 18       		.uleb128 0x18
 6944 0c66 330A0000 		.4byte	.LASF136
 6945 0c6a 01       		.byte	0x1
 6946 0c6b 590B     		.2byte	0xb59
 6947 0c6d 35010000 		.4byte	0x135
 6948 0c71 00000000 		.4byte	.LFB155
 6949 0c75 B4000000 		.4byte	.LFE155-.LFB155
 6950 0c79 01       		.uleb128 0x1
 6951 0c7a 9C       		.byte	0x9c
 6952 0c7b AD0C0000 		.4byte	0xcad
 6953 0c7f 19       		.uleb128 0x19
 6954 0c80 28000000 		.4byte	.LASF131
 6955 0c84 01       		.byte	0x1
 6956 0c85 590B     		.2byte	0xb59
 6957 0c87 B80C0000 		.4byte	0xcb8
 6958 0c8b 02       		.uleb128 0x2
 6959 0c8c 91       		.byte	0x91
 6960 0c8d 6C       		.sleb128 -20
 6961 0c8e 1A       		.uleb128 0x1a
 6962 0c8f 33080000 		.4byte	.LASF137
 6963 0c93 01       		.byte	0x1
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 213


 6964 0c94 5B0B     		.2byte	0xb5b
 6965 0c96 AC040000 		.4byte	0x4ac
 6966 0c9a 02       		.uleb128 0x2
 6967 0c9b 91       		.byte	0x91
 6968 0c9c 70       		.sleb128 -16
 6969 0c9d 1A       		.uleb128 0x1a
 6970 0c9e B2040000 		.4byte	.LASF78
 6971 0ca2 01       		.byte	0x1
 6972 0ca3 5C0B     		.2byte	0xb5c
 6973 0ca5 35010000 		.4byte	0x135
 6974 0ca9 02       		.uleb128 0x2
 6975 0caa 91       		.byte	0x91
 6976 0cab 74       		.sleb128 -12
 6977 0cac 00       		.byte	0
 6978 0cad 06       		.uleb128 0x6
 6979 0cae 04       		.byte	0x4
 6980 0caf B30C0000 		.4byte	0xcb3
 6981 0cb3 07       		.uleb128 0x7
 6982 0cb4 33020000 		.4byte	0x233
 6983 0cb8 07       		.uleb128 0x7
 6984 0cb9 AD0C0000 		.4byte	0xcad
 6985 0cbd 18       		.uleb128 0x18
 6986 0cbe A60D0000 		.4byte	.LASF138
 6987 0cc2 01       		.byte	0x1
 6988 0cc3 9D0B     		.2byte	0xb9d
 6989 0cc5 35010000 		.4byte	0x135
 6990 0cc9 00000000 		.4byte	.LFB156
 6991 0ccd AC000000 		.4byte	.LFE156-.LFB156
 6992 0cd1 01       		.uleb128 0x1
 6993 0cd2 9C       		.byte	0x9c
 6994 0cd3 140D0000 		.4byte	0xd14
 6995 0cd7 19       		.uleb128 0x19
 6996 0cd8 D60A0000 		.4byte	.LASF139
 6997 0cdc 01       		.byte	0x1
 6998 0cdd 9D0B     		.2byte	0xb9d
 6999 0cdf 2D020000 		.4byte	0x22d
 7000 0ce3 02       		.uleb128 0x2
 7001 0ce4 91       		.byte	0x91
 7002 0ce5 6C       		.sleb128 -20
 7003 0ce6 19       		.uleb128 0x19
 7004 0ce7 4C0A0000 		.4byte	.LASF28
 7005 0ceb 01       		.byte	0x1
 7006 0cec 9D0B     		.2byte	0xb9d
 7007 0cee 53060000 		.4byte	0x653
 7008 0cf2 02       		.uleb128 0x2
 7009 0cf3 91       		.byte	0x91
 7010 0cf4 68       		.sleb128 -24
 7011 0cf5 1A       		.uleb128 0x1a
 7012 0cf6 33080000 		.4byte	.LASF137
 7013 0cfa 01       		.byte	0x1
 7014 0cfb 9F0B     		.2byte	0xb9f
 7015 0cfd AC040000 		.4byte	0x4ac
 7016 0d01 02       		.uleb128 0x2
 7017 0d02 91       		.byte	0x91
 7018 0d03 70       		.sleb128 -16
 7019 0d04 1A       		.uleb128 0x1a
 7020 0d05 B2040000 		.4byte	.LASF78
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 214


 7021 0d09 01       		.byte	0x1
 7022 0d0a A00B     		.2byte	0xba0
 7023 0d0c 35010000 		.4byte	0x135
 7024 0d10 02       		.uleb128 0x2
 7025 0d11 91       		.byte	0x91
 7026 0d12 74       		.sleb128 -12
 7027 0d13 00       		.byte	0
 7028 0d14 29       		.uleb128 0x29
 7029 0d15 710D0000 		.4byte	.LASF140
 7030 0d19 01       		.byte	0x1
 7031 0d1a CA0B     		.2byte	0xbca
 7032 0d1c 00000000 		.4byte	.LFB157
 7033 0d20 38000000 		.4byte	.LFE157-.LFB157
 7034 0d24 01       		.uleb128 0x1
 7035 0d25 9C       		.byte	0x9c
 7036 0d26 3A0D0000 		.4byte	0xd3a
 7037 0d2a 19       		.uleb128 0x19
 7038 0d2b DE010000 		.4byte	.LASF141
 7039 0d2f 01       		.byte	0x1
 7040 0d30 CA0B     		.2byte	0xbca
 7041 0d32 400D0000 		.4byte	0xd40
 7042 0d36 02       		.uleb128 0x2
 7043 0d37 91       		.byte	0x91
 7044 0d38 74       		.sleb128 -12
 7045 0d39 00       		.byte	0
 7046 0d3a 06       		.uleb128 0x6
 7047 0d3b 04       		.byte	0x4
 7048 0d3c A4020000 		.4byte	0x2a4
 7049 0d40 07       		.uleb128 0x7
 7050 0d41 3A0D0000 		.4byte	0xd3a
 7051 0d45 18       		.uleb128 0x18
 7052 0d46 C10A0000 		.4byte	.LASF142
 7053 0d4a 01       		.byte	0x1
 7054 0d4b D20B     		.2byte	0xbd2
 7055 0d4d 35010000 		.4byte	0x135
 7056 0d51 00000000 		.4byte	.LFB158
 7057 0d55 9C000000 		.4byte	.LFE158-.LFB158
 7058 0d59 01       		.uleb128 0x1
 7059 0d5a 9C       		.byte	0x9c
 7060 0d5b A60D0000 		.4byte	0xda6
 7061 0d5f 19       		.uleb128 0x19
 7062 0d60 DE010000 		.4byte	.LASF141
 7063 0d64 01       		.byte	0x1
 7064 0d65 D20B     		.2byte	0xbd2
 7065 0d67 400D0000 		.4byte	0xd40
 7066 0d6b 02       		.uleb128 0x2
 7067 0d6c 91       		.byte	0x91
 7068 0d6d 6C       		.sleb128 -20
 7069 0d6e 19       		.uleb128 0x19
 7070 0d6f 2F060000 		.4byte	.LASF143
 7071 0d73 01       		.byte	0x1
 7072 0d74 D20B     		.2byte	0xbd2
 7073 0d76 4E060000 		.4byte	0x64e
 7074 0d7a 02       		.uleb128 0x2
 7075 0d7b 91       		.byte	0x91
 7076 0d7c 68       		.sleb128 -24
 7077 0d7d 1A       		.uleb128 0x1a
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 215


 7078 0d7e B2040000 		.4byte	.LASF78
 7079 0d82 01       		.byte	0x1
 7080 0d83 D40B     		.2byte	0xbd4
 7081 0d85 35010000 		.4byte	0x135
 7082 0d89 02       		.uleb128 0x2
 7083 0d8a 91       		.byte	0x91
 7084 0d8b 74       		.sleb128 -12
 7085 0d8c 1B       		.uleb128 0x1b
 7086 0d8d 22000000 		.4byte	.LBB34
 7087 0d91 64000000 		.4byte	.LBE34-.LBB34
 7088 0d95 1A       		.uleb128 0x1a
 7089 0d96 17080000 		.4byte	.LASF92
 7090 0d9a 01       		.byte	0x1
 7091 0d9b DC0B     		.2byte	0xbdc
 7092 0d9d 53060000 		.4byte	0x653
 7093 0da1 02       		.uleb128 0x2
 7094 0da2 91       		.byte	0x91
 7095 0da3 70       		.sleb128 -16
 7096 0da4 00       		.byte	0
 7097 0da5 00       		.byte	0
 7098 0da6 25       		.uleb128 0x25
 7099 0da7 2B090000 		.4byte	.LASF144
 7100 0dab 01       		.byte	0x1
 7101 0dac 0F0C     		.2byte	0xc0f
 7102 0dae 00000000 		.4byte	.LFB159
 7103 0db2 18000000 		.4byte	.LFE159-.LFB159
 7104 0db6 01       		.uleb128 0x1
 7105 0db7 9C       		.byte	0x9c
 7106 0db8 1C       		.uleb128 0x1c
 7107 0db9 4A060000 		.4byte	.LASF145
 7108 0dbd 01       		.byte	0x1
 7109 0dbe 460C     		.2byte	0xc46
 7110 0dc0 00000000 		.4byte	.LFB160
 7111 0dc4 30000000 		.4byte	.LFE160-.LFB160
 7112 0dc8 01       		.uleb128 0x1
 7113 0dc9 9C       		.byte	0x9c
 7114 0dca DE0D0000 		.4byte	0xdde
 7115 0dce 19       		.uleb128 0x19
 7116 0dcf 4E050000 		.4byte	.LASF75
 7117 0dd3 01       		.byte	0x1
 7118 0dd4 460C     		.2byte	0xc46
 7119 0dd6 B0000000 		.4byte	0xb0
 7120 0dda 02       		.uleb128 0x2
 7121 0ddb 91       		.byte	0x91
 7122 0ddc 74       		.sleb128 -12
 7123 0ddd 00       		.byte	0
 7124 0dde 29       		.uleb128 0x29
 7125 0ddf 76020000 		.4byte	.LASF146
 7126 0de3 01       		.byte	0x1
 7127 0de4 DB0C     		.2byte	0xcdb
 7128 0de6 00000000 		.4byte	.LFB161
 7129 0dea 40000000 		.4byte	.LFE161-.LFB161
 7130 0dee 01       		.uleb128 0x1
 7131 0def 9C       		.byte	0x9c
 7132 0df0 310E0000 		.4byte	0xe31
 7133 0df4 19       		.uleb128 0x19
 7134 0df5 98020000 		.4byte	.LASF147
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 216


 7135 0df9 01       		.byte	0x1
 7136 0dfa DB0C     		.2byte	0xcdb
 7137 0dfc 3E020000 		.4byte	0x23e
 7138 0e00 02       		.uleb128 0x2
 7139 0e01 91       		.byte	0x91
 7140 0e02 6C       		.sleb128 -20
 7141 0e03 19       		.uleb128 0x19
 7142 0e04 F5050000 		.4byte	.LASF148
 7143 0e08 01       		.byte	0x1
 7144 0e09 DB0C     		.2byte	0xcdb
 7145 0e0b 35010000 		.4byte	0x135
 7146 0e0f 02       		.uleb128 0x2
 7147 0e10 91       		.byte	0x91
 7148 0e11 68       		.sleb128 -24
 7149 0e12 19       		.uleb128 0x19
 7150 0e13 00080000 		.4byte	.LASF149
 7151 0e17 01       		.byte	0x1
 7152 0e18 DB0C     		.2byte	0xcdb
 7153 0e1a B0000000 		.4byte	0xb0
 7154 0e1e 02       		.uleb128 0x2
 7155 0e1f 91       		.byte	0x91
 7156 0e20 64       		.sleb128 -28
 7157 0e21 1A       		.uleb128 0x1a
 7158 0e22 8D050000 		.4byte	.LASF84
 7159 0e26 01       		.byte	0x1
 7160 0e27 DD0C     		.2byte	0xcdd
 7161 0e29 AC040000 		.4byte	0x4ac
 7162 0e2d 02       		.uleb128 0x2
 7163 0e2e 91       		.byte	0x91
 7164 0e2f 74       		.sleb128 -12
 7165 0e30 00       		.byte	0
 7166 0e31 26       		.uleb128 0x26
 7167 0e32 350D0000 		.4byte	.LASF150
 7168 0e36 01       		.byte	0x1
 7169 0e37 EB0C     		.2byte	0xceb
 7170 0e39 B0000000 		.4byte	0xb0
 7171 0e3d 00000000 		.4byte	.LFB162
 7172 0e41 4C000000 		.4byte	.LFE162-.LFB162
 7173 0e45 01       		.uleb128 0x1
 7174 0e46 9C       		.byte	0x9c
 7175 0e47 880E0000 		.4byte	0xe88
 7176 0e4b 19       		.uleb128 0x19
 7177 0e4c FE030000 		.4byte	.LASF121
 7178 0e50 01       		.byte	0x1
 7179 0e51 EB0C     		.2byte	0xceb
 7180 0e53 3E020000 		.4byte	0x23e
 7181 0e57 02       		.uleb128 0x2
 7182 0e58 91       		.byte	0x91
 7183 0e59 6C       		.sleb128 -20
 7184 0e5a 19       		.uleb128 0x19
 7185 0e5b F5050000 		.4byte	.LASF148
 7186 0e5f 01       		.byte	0x1
 7187 0e60 EB0C     		.2byte	0xceb
 7188 0e62 35010000 		.4byte	0x135
 7189 0e66 02       		.uleb128 0x2
 7190 0e67 91       		.byte	0x91
 7191 0e68 68       		.sleb128 -24
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 217


 7192 0e69 1A       		.uleb128 0x1a
 7193 0e6a 0E080000 		.4byte	.LASF151
 7194 0e6e 01       		.byte	0x1
 7195 0e6f ED0C     		.2byte	0xced
 7196 0e71 B0000000 		.4byte	0xb0
 7197 0e75 02       		.uleb128 0x2
 7198 0e76 91       		.byte	0x91
 7199 0e77 74       		.sleb128 -12
 7200 0e78 1A       		.uleb128 0x1a
 7201 0e79 8D050000 		.4byte	.LASF84
 7202 0e7d 01       		.byte	0x1
 7203 0e7e EE0C     		.2byte	0xcee
 7204 0e80 AC040000 		.4byte	0x4ac
 7205 0e84 02       		.uleb128 0x2
 7206 0e85 91       		.byte	0x91
 7207 0e86 70       		.sleb128 -16
 7208 0e87 00       		.byte	0
 7209 0e88 1C       		.uleb128 0x1c
 7210 0e89 FC050000 		.4byte	.LASF152
 7211 0e8d 01       		.byte	0x1
 7212 0e8e 100D     		.2byte	0xd10
 7213 0e90 00000000 		.4byte	.LFB163
 7214 0e94 80000000 		.4byte	.LFE163-.LFB163
 7215 0e98 01       		.uleb128 0x1
 7216 0e99 9C       		.byte	0x9c
 7217 0e9a AE0E0000 		.4byte	0xeae
 7218 0e9e 1A       		.uleb128 0x1a
 7219 0e9f 180D0000 		.4byte	.LASF62
 7220 0ea3 01       		.byte	0x1
 7221 0ea4 120D     		.2byte	0xd12
 7222 0ea6 40010000 		.4byte	0x140
 7223 0eaa 02       		.uleb128 0x2
 7224 0eab 91       		.byte	0x91
 7225 0eac 74       		.sleb128 -12
 7226 0ead 00       		.byte	0
 7227 0eae 1C       		.uleb128 0x1c
 7228 0eaf AA090000 		.4byte	.LASF153
 7229 0eb3 01       		.byte	0x1
 7230 0eb4 300D     		.2byte	0xd30
 7231 0eb6 00000000 		.4byte	.LFB164
 7232 0eba 78000000 		.4byte	.LFE164-.LFB164
 7233 0ebe 01       		.uleb128 0x1
 7234 0ebf 9C       		.byte	0x9c
 7235 0ec0 F70E0000 		.4byte	0xef7
 7236 0ec4 1B       		.uleb128 0x1b
 7237 0ec5 06000000 		.4byte	.LBB35
 7238 0ec9 5C000000 		.4byte	.LBE35-.LBB35
 7239 0ecd 1A       		.uleb128 0x1a
 7240 0ece 18020000 		.4byte	.LASF154
 7241 0ed2 01       		.byte	0x1
 7242 0ed3 370D     		.2byte	0xd37
 7243 0ed5 35010000 		.4byte	0x135
 7244 0ed9 02       		.uleb128 0x2
 7245 0eda 91       		.byte	0x91
 7246 0edb 74       		.sleb128 -12
 7247 0edc 1B       		.uleb128 0x1b
 7248 0edd 26000000 		.4byte	.LBB36
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 218


 7249 0ee1 34000000 		.4byte	.LBE36-.LBB36
 7250 0ee5 1A       		.uleb128 0x1a
 7251 0ee6 8D050000 		.4byte	.LASF84
 7252 0eea 01       		.byte	0x1
 7253 0eeb 450D     		.2byte	0xd45
 7254 0eed AC040000 		.4byte	0x4ac
 7255 0ef1 02       		.uleb128 0x2
 7256 0ef2 91       		.byte	0x91
 7257 0ef3 70       		.sleb128 -16
 7258 0ef4 00       		.byte	0
 7259 0ef5 00       		.byte	0
 7260 0ef6 00       		.byte	0
 7261 0ef7 1C       		.uleb128 0x1c
 7262 0ef8 3D060000 		.4byte	.LASF155
 7263 0efc 01       		.byte	0x1
 7264 0efd 080E     		.2byte	0xe08
 7265 0eff 00000000 		.4byte	.LFB165
 7266 0f03 20000000 		.4byte	.LFE165-.LFB165
 7267 0f07 01       		.uleb128 0x1
 7268 0f08 9C       		.byte	0x9c
 7269 0f09 1D0F0000 		.4byte	0xf1d
 7270 0f0d 19       		.uleb128 0x19
 7271 0f0e 8D050000 		.4byte	.LASF84
 7272 0f12 01       		.byte	0x1
 7273 0f13 080E     		.2byte	0xe08
 7274 0f15 AC040000 		.4byte	0x4ac
 7275 0f19 02       		.uleb128 0x2
 7276 0f1a 91       		.byte	0x91
 7277 0f1b 74       		.sleb128 -12
 7278 0f1c 00       		.byte	0
 7279 0f1d 2A       		.uleb128 0x2a
 7280 0f1e D5030000 		.4byte	.LASF156
 7281 0f22 01       		.byte	0x1
 7282 0f23 3E0E     		.2byte	0xe3e
 7283 0f25 00000000 		.4byte	.LFB166
 7284 0f29 4C000000 		.4byte	.LFE166-.LFB166
 7285 0f2d 01       		.uleb128 0x1
 7286 0f2e 9C       		.byte	0x9c
 7287 0f2f 430F0000 		.4byte	0xf43
 7288 0f33 1A       		.uleb128 0x1a
 7289 0f34 8D050000 		.4byte	.LASF84
 7290 0f38 01       		.byte	0x1
 7291 0f39 400E     		.2byte	0xe40
 7292 0f3b AC040000 		.4byte	0x4ac
 7293 0f3f 02       		.uleb128 0x2
 7294 0f40 91       		.byte	0x91
 7295 0f41 74       		.sleb128 -12
 7296 0f42 00       		.byte	0
 7297 0f43 26       		.uleb128 0x26
 7298 0f44 B4000000 		.4byte	.LASF157
 7299 0f48 01       		.byte	0x1
 7300 0f49 580E     		.2byte	0xe58
 7301 0f4b 3E020000 		.4byte	0x23e
 7302 0f4f 00000000 		.4byte	.LFB167
 7303 0f53 20000000 		.4byte	.LFE167-.LFB167
 7304 0f57 01       		.uleb128 0x1
 7305 0f58 9C       		.byte	0x9c
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 219


 7306 0f59 6D0F0000 		.4byte	0xf6d
 7307 0f5d 1A       		.uleb128 0x1a
 7308 0f5e B2040000 		.4byte	.LASF78
 7309 0f62 01       		.byte	0x1
 7310 0f63 5A0E     		.2byte	0xe5a
 7311 0f65 3E020000 		.4byte	0x23e
 7312 0f69 02       		.uleb128 0x2
 7313 0f6a 91       		.byte	0x91
 7314 0f6b 74       		.sleb128 -12
 7315 0f6c 00       		.byte	0
 7316 0f6d 26       		.uleb128 0x26
 7317 0f6e 6F090000 		.4byte	.LASF158
 7318 0f72 01       		.byte	0x1
 7319 0f73 690E     		.2byte	0xe69
 7320 0f75 35010000 		.4byte	0x135
 7321 0f79 00000000 		.4byte	.LFB168
 7322 0f7d 3C000000 		.4byte	.LFE168-.LFB168
 7323 0f81 01       		.uleb128 0x1
 7324 0f82 9C       		.byte	0x9c
 7325 0f83 970F0000 		.4byte	0xf97
 7326 0f87 1A       		.uleb128 0x1a
 7327 0f88 B2040000 		.4byte	.LASF78
 7328 0f8c 01       		.byte	0x1
 7329 0f8d 6B0E     		.2byte	0xe6b
 7330 0f8f 35010000 		.4byte	0x135
 7331 0f93 02       		.uleb128 0x2
 7332 0f94 91       		.byte	0x91
 7333 0f95 74       		.sleb128 -12
 7334 0f96 00       		.byte	0
 7335 0f97 26       		.uleb128 0x26
 7336 0f98 8C000000 		.4byte	.LASF159
 7337 0f9c 01       		.byte	0x1
 7338 0f9d 4D10     		.2byte	0x104d
 7339 0f9f 4B010000 		.4byte	0x14b
 7340 0fa3 00000000 		.4byte	.LFB169
 7341 0fa7 30000000 		.4byte	.LFE169-.LFB169
 7342 0fab 01       		.uleb128 0x1
 7343 0fac 9C       		.byte	0x9c
 7344 0fad C10F0000 		.4byte	0xfc1
 7345 0fb1 1A       		.uleb128 0x1a
 7346 0fb2 EC050000 		.4byte	.LASF98
 7347 0fb6 01       		.byte	0x1
 7348 0fb7 4F10     		.2byte	0x104f
 7349 0fb9 4B010000 		.4byte	0x14b
 7350 0fbd 02       		.uleb128 0x2
 7351 0fbe 91       		.byte	0x91
 7352 0fbf 74       		.sleb128 -12
 7353 0fc0 00       		.byte	0
 7354 0fc1 18       		.uleb128 0x18
 7355 0fc2 B3060000 		.4byte	.LASF160
 7356 0fc6 01       		.byte	0x1
 7357 0fc7 6E10     		.2byte	0x106e
 7358 0fc9 EB000000 		.4byte	0xeb
 7359 0fcd 00000000 		.4byte	.LFB170
 7360 0fd1 90000000 		.4byte	.LFE170-.LFB170
 7361 0fd5 01       		.uleb128 0x1
 7362 0fd6 9C       		.byte	0x9c
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 220


 7363 0fd7 09100000 		.4byte	0x1009
 7364 0fdb 19       		.uleb128 0x19
 7365 0fdc 570B0000 		.4byte	.LASF161
 7366 0fe0 01       		.byte	0x1
 7367 0fe1 6E10     		.2byte	0x106e
 7368 0fe3 35010000 		.4byte	0x135
 7369 0fe7 02       		.uleb128 0x2
 7370 0fe8 91       		.byte	0x91
 7371 0fe9 6C       		.sleb128 -20
 7372 0fea 19       		.uleb128 0x19
 7373 0feb 69020000 		.4byte	.LASF132
 7374 0fef 01       		.byte	0x1
 7375 0ff0 6E10     		.2byte	0x106e
 7376 0ff2 4B010000 		.4byte	0x14b
 7377 0ff6 02       		.uleb128 0x2
 7378 0ff7 91       		.byte	0x91
 7379 0ff8 68       		.sleb128 -24
 7380 0ff9 1A       		.uleb128 0x1a
 7381 0ffa 510C0000 		.4byte	.LASF162
 7382 0ffe 01       		.byte	0x1
 7383 0fff 7010     		.2byte	0x1070
 7384 1001 EB000000 		.4byte	0xeb
 7385 1005 02       		.uleb128 0x2
 7386 1006 91       		.byte	0x91
 7387 1007 74       		.sleb128 -12
 7388 1008 00       		.byte	0
 7389 1009 18       		.uleb128 0x18
 7390 100a 410C0000 		.4byte	.LASF163
 7391 100e 01       		.byte	0x1
 7392 100f B210     		.2byte	0x10b2
 7393 1011 35010000 		.4byte	0x135
 7394 1015 00000000 		.4byte	.LFB171
 7395 1019 B4000000 		.4byte	.LFE171-.LFB171
 7396 101d 01       		.uleb128 0x1
 7397 101e 9C       		.byte	0x9c
 7398 101f 6F100000 		.4byte	0x106f
 7399 1023 19       		.uleb128 0x19
 7400 1024 A2050000 		.4byte	.LASF164
 7401 1028 01       		.byte	0x1
 7402 1029 B210     		.2byte	0x10b2
 7403 102b EB000000 		.4byte	0xeb
 7404 102f 02       		.uleb128 0x2
 7405 1030 91       		.byte	0x91
 7406 1031 6C       		.sleb128 -20
 7407 1032 19       		.uleb128 0x19
 7408 1033 860D0000 		.4byte	.LASF165
 7409 1037 01       		.byte	0x1
 7410 1038 B210     		.2byte	0x10b2
 7411 103a EB000000 		.4byte	0xeb
 7412 103e 02       		.uleb128 0x2
 7413 103f 91       		.byte	0x91
 7414 1040 68       		.sleb128 -24
 7415 1041 19       		.uleb128 0x19
 7416 1042 D2070000 		.4byte	.LASF166
 7417 1046 01       		.byte	0x1
 7418 1047 B210     		.2byte	0x10b2
 7419 1049 6F100000 		.4byte	0x106f
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 221


 7420 104d 02       		.uleb128 0x2
 7421 104e 91       		.byte	0x91
 7422 104f 64       		.sleb128 -28
 7423 1050 19       		.uleb128 0x19
 7424 1051 69020000 		.4byte	.LASF132
 7425 1055 01       		.byte	0x1
 7426 1056 B210     		.2byte	0x10b2
 7427 1058 4B010000 		.4byte	0x14b
 7428 105c 02       		.uleb128 0x2
 7429 105d 91       		.byte	0x91
 7430 105e 60       		.sleb128 -32
 7431 105f 1A       		.uleb128 0x1a
 7432 1060 B2040000 		.4byte	.LASF78
 7433 1064 01       		.byte	0x1
 7434 1065 B410     		.2byte	0x10b4
 7435 1067 35010000 		.4byte	0x135
 7436 106b 02       		.uleb128 0x2
 7437 106c 91       		.byte	0x91
 7438 106d 74       		.sleb128 -12
 7439 106e 00       		.byte	0
 7440 106f 06       		.uleb128 0x6
 7441 1070 04       		.byte	0x4
 7442 1071 EB000000 		.4byte	0xeb
 7443 1075 18       		.uleb128 0x18
 7444 1076 790B0000 		.4byte	.LASF167
 7445 107a 01       		.byte	0x1
 7446 107b 0211     		.2byte	0x1102
 7447 107d 35010000 		.4byte	0x135
 7448 1081 00000000 		.4byte	.LFB172
 7449 1085 24010000 		.4byte	.LFE172-.LFB172
 7450 1089 01       		.uleb128 0x1
 7451 108a 9C       		.byte	0x9c
 7452 108b F9100000 		.4byte	0x10f9
 7453 108f 19       		.uleb128 0x19
 7454 1090 2B050000 		.4byte	.LASF168
 7455 1094 01       		.byte	0x1
 7456 1095 0211     		.2byte	0x1102
 7457 1097 3E020000 		.4byte	0x23e
 7458 109b 02       		.uleb128 0x2
 7459 109c 91       		.byte	0x91
 7460 109d 64       		.sleb128 -28
 7461 109e 19       		.uleb128 0x19
 7462 109f 84000000 		.4byte	.LASF169
 7463 10a3 01       		.byte	0x1
 7464 10a4 0211     		.2byte	0x1102
 7465 10a6 EB000000 		.4byte	0xeb
 7466 10aa 02       		.uleb128 0x2
 7467 10ab 91       		.byte	0x91
 7468 10ac 60       		.sleb128 -32
 7469 10ad 19       		.uleb128 0x19
 7470 10ae C2020000 		.4byte	.LASF170
 7471 10b2 01       		.byte	0x1
 7472 10b3 0211     		.2byte	0x1102
 7473 10b5 74020000 		.4byte	0x274
 7474 10b9 02       		.uleb128 0x2
 7475 10ba 91       		.byte	0x91
 7476 10bb 5F       		.sleb128 -33
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 222


 7477 10bc 19       		.uleb128 0x19
 7478 10bd B8030000 		.4byte	.LASF171
 7479 10c1 01       		.byte	0x1
 7480 10c2 0211     		.2byte	0x1102
 7481 10c4 6F100000 		.4byte	0x106f
 7482 10c8 02       		.uleb128 0x2
 7483 10c9 91       		.byte	0x91
 7484 10ca 58       		.sleb128 -40
 7485 10cb 1A       		.uleb128 0x1a
 7486 10cc 8D050000 		.4byte	.LASF84
 7487 10d0 01       		.byte	0x1
 7488 10d1 0411     		.2byte	0x1104
 7489 10d3 AC040000 		.4byte	0x4ac
 7490 10d7 02       		.uleb128 0x2
 7491 10d8 91       		.byte	0x91
 7492 10d9 70       		.sleb128 -16
 7493 10da 1A       		.uleb128 0x1a
 7494 10db B2040000 		.4byte	.LASF78
 7495 10df 01       		.byte	0x1
 7496 10e0 0511     		.2byte	0x1105
 7497 10e2 35010000 		.4byte	0x135
 7498 10e6 02       		.uleb128 0x2
 7499 10e7 91       		.byte	0x91
 7500 10e8 74       		.sleb128 -12
 7501 10e9 1A       		.uleb128 0x1a
 7502 10ea 3F030000 		.4byte	.LASF172
 7503 10ee 01       		.byte	0x1
 7504 10ef 0611     		.2byte	0x1106
 7505 10f1 CA000000 		.4byte	0xca
 7506 10f5 02       		.uleb128 0x2
 7507 10f6 91       		.byte	0x91
 7508 10f7 6F       		.sleb128 -17
 7509 10f8 00       		.byte	0
 7510 10f9 18       		.uleb128 0x18
 7511 10fa E4000000 		.4byte	.LASF173
 7512 10fe 01       		.byte	0x1
 7513 10ff 6C11     		.2byte	0x116c
 7514 1101 35010000 		.4byte	0x135
 7515 1105 00000000 		.4byte	.LFB173
 7516 1109 68010000 		.4byte	.LFE173-.LFB173
 7517 110d 01       		.uleb128 0x1
 7518 110e 9C       		.byte	0x9c
 7519 110f E3110000 		.4byte	0x11e3
 7520 1113 19       		.uleb128 0x19
 7521 1114 2B050000 		.4byte	.LASF168
 7522 1118 01       		.byte	0x1
 7523 1119 6C11     		.2byte	0x116c
 7524 111b 3E020000 		.4byte	0x23e
 7525 111f 02       		.uleb128 0x2
 7526 1120 91       		.byte	0x91
 7527 1121 54       		.sleb128 -44
 7528 1122 19       		.uleb128 0x19
 7529 1123 84000000 		.4byte	.LASF169
 7530 1127 01       		.byte	0x1
 7531 1128 6C11     		.2byte	0x116c
 7532 112a EB000000 		.4byte	0xeb
 7533 112e 02       		.uleb128 0x2
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 223


 7534 112f 91       		.byte	0x91
 7535 1130 50       		.sleb128 -48
 7536 1131 19       		.uleb128 0x19
 7537 1132 C2020000 		.4byte	.LASF170
 7538 1136 01       		.byte	0x1
 7539 1137 6C11     		.2byte	0x116c
 7540 1139 74020000 		.4byte	0x274
 7541 113d 02       		.uleb128 0x2
 7542 113e 91       		.byte	0x91
 7543 113f 4F       		.sleb128 -49
 7544 1140 19       		.uleb128 0x19
 7545 1141 B8030000 		.4byte	.LASF171
 7546 1145 01       		.byte	0x1
 7547 1146 6C11     		.2byte	0x116c
 7548 1148 6F100000 		.4byte	0x106f
 7549 114c 02       		.uleb128 0x2
 7550 114d 91       		.byte	0x91
 7551 114e 48       		.sleb128 -56
 7552 114f 19       		.uleb128 0x19
 7553 1150 25030000 		.4byte	.LASF174
 7554 1154 01       		.byte	0x1
 7555 1155 6C11     		.2byte	0x116c
 7556 1157 E3110000 		.4byte	0x11e3
 7557 115b 02       		.uleb128 0x2
 7558 115c 91       		.byte	0x91
 7559 115d 00       		.sleb128 0
 7560 115e 1A       		.uleb128 0x1a
 7561 115f 8D050000 		.4byte	.LASF84
 7562 1163 01       		.byte	0x1
 7563 1164 6E11     		.2byte	0x116e
 7564 1166 AC040000 		.4byte	0x4ac
 7565 116a 02       		.uleb128 0x2
 7566 116b 91       		.byte	0x91
 7567 116c 70       		.sleb128 -16
 7568 116d 1A       		.uleb128 0x1a
 7569 116e 3F030000 		.4byte	.LASF172
 7570 1172 01       		.byte	0x1
 7571 1173 6F11     		.2byte	0x116f
 7572 1175 CA000000 		.4byte	0xca
 7573 1179 02       		.uleb128 0x2
 7574 117a 91       		.byte	0x91
 7575 117b 67       		.sleb128 -25
 7576 117c 1A       		.uleb128 0x1a
 7577 117d B2040000 		.4byte	.LASF78
 7578 1181 01       		.byte	0x1
 7579 1182 7011     		.2byte	0x1170
 7580 1184 35010000 		.4byte	0x135
 7581 1188 02       		.uleb128 0x2
 7582 1189 91       		.byte	0x91
 7583 118a 74       		.sleb128 -12
 7584 118b 1A       		.uleb128 0x1a
 7585 118c 86090000 		.4byte	.LASF111
 7586 1190 01       		.byte	0x1
 7587 1191 7111     		.2byte	0x1171
 7588 1193 40010000 		.4byte	0x140
 7589 1197 02       		.uleb128 0x2
 7590 1198 91       		.byte	0x91
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 224


 7591 1199 68       		.sleb128 -24
 7592 119a 1F       		.uleb128 0x1f
 7593 119b AC030000 		.4byte	0x3ac
 7594 119f 26000000 		.4byte	.LBB37
 7595 11a3 1A000000 		.4byte	.LBE37-.LBB37
 7596 11a7 01       		.byte	0x1
 7597 11a8 8911     		.2byte	0x1189
 7598 11aa C9110000 		.4byte	0x11c9
 7599 11ae 1B       		.uleb128 0x1b
 7600 11af 26000000 		.4byte	.LBB38
 7601 11b3 1A000000 		.4byte	.LBE38-.LBB38
 7602 11b7 20       		.uleb128 0x20
 7603 11b8 BC030000 		.4byte	0x3bc
 7604 11bc 02       		.uleb128 0x2
 7605 11bd 91       		.byte	0x91
 7606 11be 60       		.sleb128 -32
 7607 11bf 20       		.uleb128 0x20
 7608 11c0 C7030000 		.4byte	0x3c7
 7609 11c4 02       		.uleb128 0x2
 7610 11c5 91       		.byte	0x91
 7611 11c6 5C       		.sleb128 -36
 7612 11c7 00       		.byte	0
 7613 11c8 00       		.byte	0
 7614 11c9 21       		.uleb128 0x21
 7615 11ca D3030000 		.4byte	0x3d3
 7616 11ce 3E010000 		.4byte	.LBB39
 7617 11d2 06000000 		.4byte	.LBE39-.LBB39
 7618 11d6 01       		.byte	0x1
 7619 11d7 DE11     		.2byte	0x11de
 7620 11d9 22       		.uleb128 0x22
 7621 11da DF030000 		.4byte	0x3df
 7622 11de 02       		.uleb128 0x2
 7623 11df 91       		.byte	0x91
 7624 11e0 6C       		.sleb128 -20
 7625 11e1 00       		.byte	0
 7626 11e2 00       		.byte	0
 7627 11e3 06       		.uleb128 0x6
 7628 11e4 04       		.byte	0x4
 7629 11e5 35010000 		.4byte	0x135
 7630 11e9 1E       		.uleb128 0x1e
 7631 11ea 3C090000 		.4byte	.LASF175
 7632 11ee 01       		.byte	0x1
 7633 11ef E811     		.2byte	0x11e8
 7634 11f1 00000000 		.4byte	.LFB174
 7635 11f5 00010000 		.4byte	.LFE174-.LFB174
 7636 11f9 01       		.uleb128 0x1
 7637 11fa 9C       		.byte	0x9c
 7638 11fb 93120000 		.4byte	0x1293
 7639 11ff 19       		.uleb128 0x19
 7640 1200 2B050000 		.4byte	.LASF168
 7641 1204 01       		.byte	0x1
 7642 1205 E811     		.2byte	0x11e8
 7643 1207 3E020000 		.4byte	0x23e
 7644 120b 02       		.uleb128 0x2
 7645 120c 91       		.byte	0x91
 7646 120d 5C       		.sleb128 -36
 7647 120e 19       		.uleb128 0x19
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 225


 7648 120f 25030000 		.4byte	.LASF174
 7649 1213 01       		.byte	0x1
 7650 1214 E811     		.2byte	0x11e8
 7651 1216 E3110000 		.4byte	0x11e3
 7652 121a 02       		.uleb128 0x2
 7653 121b 91       		.byte	0x91
 7654 121c 58       		.sleb128 -40
 7655 121d 1A       		.uleb128 0x1a
 7656 121e 8D050000 		.4byte	.LASF84
 7657 1222 01       		.byte	0x1
 7658 1223 EA11     		.2byte	0x11ea
 7659 1225 AC040000 		.4byte	0x4ac
 7660 1229 02       		.uleb128 0x2
 7661 122a 91       		.byte	0x91
 7662 122b 74       		.sleb128 -12
 7663 122c 1A       		.uleb128 0x1a
 7664 122d 3F030000 		.4byte	.LASF172
 7665 1231 01       		.byte	0x1
 7666 1232 EB11     		.2byte	0x11eb
 7667 1234 CA000000 		.4byte	0xca
 7668 1238 02       		.uleb128 0x2
 7669 1239 91       		.byte	0x91
 7670 123a 6B       		.sleb128 -21
 7671 123b 1A       		.uleb128 0x1a
 7672 123c 86090000 		.4byte	.LASF111
 7673 1240 01       		.byte	0x1
 7674 1241 EC11     		.2byte	0x11ec
 7675 1243 40010000 		.4byte	0x140
 7676 1247 02       		.uleb128 0x2
 7677 1248 91       		.byte	0x91
 7678 1249 6C       		.sleb128 -20
 7679 124a 1F       		.uleb128 0x1f
 7680 124b AC030000 		.4byte	0x3ac
 7681 124f 1C000000 		.4byte	.LBB41
 7682 1253 1A000000 		.4byte	.LBE41-.LBB41
 7683 1257 01       		.byte	0x1
 7684 1258 0412     		.2byte	0x1204
 7685 125a 79120000 		.4byte	0x1279
 7686 125e 1B       		.uleb128 0x1b
 7687 125f 1C000000 		.4byte	.LBB42
 7688 1263 1A000000 		.4byte	.LBE42-.LBB42
 7689 1267 20       		.uleb128 0x20
 7690 1268 BC030000 		.4byte	0x3bc
 7691 126c 02       		.uleb128 0x2
 7692 126d 91       		.byte	0x91
 7693 126e 64       		.sleb128 -28
 7694 126f 20       		.uleb128 0x20
 7695 1270 C7030000 		.4byte	0x3c7
 7696 1274 02       		.uleb128 0x2
 7697 1275 91       		.byte	0x91
 7698 1276 60       		.sleb128 -32
 7699 1277 00       		.byte	0
 7700 1278 00       		.byte	0
 7701 1279 21       		.uleb128 0x21
 7702 127a D3030000 		.4byte	0x3d3
 7703 127e DA000000 		.4byte	.LBB43
 7704 1282 06000000 		.4byte	.LBE43-.LBB43
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 226


 7705 1286 01       		.byte	0x1
 7706 1287 3812     		.2byte	0x1238
 7707 1289 22       		.uleb128 0x22
 7708 128a DF030000 		.4byte	0x3df
 7709 128e 02       		.uleb128 0x2
 7710 128f 91       		.byte	0x91
 7711 1290 70       		.sleb128 -16
 7712 1291 00       		.byte	0
 7713 1292 00       		.byte	0
 7714 1293 18       		.uleb128 0x18
 7715 1294 85010000 		.4byte	.LASF176
 7716 1298 01       		.byte	0x1
 7717 1299 4112     		.2byte	0x1241
 7718 129b 35010000 		.4byte	0x135
 7719 129f 00000000 		.4byte	.LFB175
 7720 12a3 4C000000 		.4byte	.LFE175-.LFB175
 7721 12a7 01       		.uleb128 0x1
 7722 12a8 9C       		.byte	0x9c
 7723 12a9 DB120000 		.4byte	0x12db
 7724 12ad 19       		.uleb128 0x19
 7725 12ae C4060000 		.4byte	.LASF97
 7726 12b2 01       		.byte	0x1
 7727 12b3 4112     		.2byte	0x1241
 7728 12b5 3E020000 		.4byte	0x23e
 7729 12b9 02       		.uleb128 0x2
 7730 12ba 91       		.byte	0x91
 7731 12bb 6C       		.sleb128 -20
 7732 12bc 1A       		.uleb128 0x1a
 7733 12bd 8D050000 		.4byte	.LASF84
 7734 12c1 01       		.byte	0x1
 7735 12c2 4312     		.2byte	0x1243
 7736 12c4 AC040000 		.4byte	0x4ac
 7737 12c8 02       		.uleb128 0x2
 7738 12c9 91       		.byte	0x91
 7739 12ca 70       		.sleb128 -16
 7740 12cb 1A       		.uleb128 0x1a
 7741 12cc B2040000 		.4byte	.LASF78
 7742 12d0 01       		.byte	0x1
 7743 12d1 4412     		.2byte	0x1244
 7744 12d3 35010000 		.4byte	0x135
 7745 12d7 02       		.uleb128 0x2
 7746 12d8 91       		.byte	0x91
 7747 12d9 74       		.sleb128 -12
 7748 12da 00       		.byte	0
 7749 12db 1C       		.uleb128 0x1c
 7750 12dc 010A0000 		.4byte	.LASF177
 7751 12e0 01       		.byte	0x1
 7752 12e1 5F12     		.2byte	0x125f
 7753 12e3 00000000 		.4byte	.LFB176
 7754 12e7 A8000000 		.4byte	.LFE176-.LFB176
 7755 12eb 01       		.uleb128 0x1
 7756 12ec 9C       		.byte	0x9c
 7757 12ed 2E130000 		.4byte	0x132e
 7758 12f1 19       		.uleb128 0x19
 7759 12f2 69020000 		.4byte	.LASF132
 7760 12f6 01       		.byte	0x1
 7761 12f7 5F12     		.2byte	0x125f
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 227


 7762 12f9 4B010000 		.4byte	0x14b
 7763 12fd 02       		.uleb128 0x2
 7764 12fe 91       		.byte	0x91
 7765 12ff 6C       		.sleb128 -20
 7766 1300 19       		.uleb128 0x19
 7767 1301 00000000 		.4byte	.LASF178
 7768 1305 01       		.byte	0x1
 7769 1306 5F12     		.2byte	0x125f
 7770 1308 600C0000 		.4byte	0xc60
 7771 130c 02       		.uleb128 0x2
 7772 130d 91       		.byte	0x91
 7773 130e 68       		.sleb128 -24
 7774 130f 1A       		.uleb128 0x1a
 7775 1310 50080000 		.4byte	.LASF89
 7776 1314 01       		.byte	0x1
 7777 1315 6112     		.2byte	0x1261
 7778 1317 4B010000 		.4byte	0x14b
 7779 131b 02       		.uleb128 0x2
 7780 131c 91       		.byte	0x91
 7781 131d 70       		.sleb128 -16
 7782 131e 1A       		.uleb128 0x1a
 7783 131f 17080000 		.4byte	.LASF92
 7784 1323 01       		.byte	0x1
 7785 1324 6212     		.2byte	0x1262
 7786 1326 53060000 		.4byte	0x653
 7787 132a 02       		.uleb128 0x2
 7788 132b 91       		.byte	0x91
 7789 132c 74       		.sleb128 -12
 7790 132d 00       		.byte	0
 7791 132e 0B       		.uleb128 0xb
 7792 132f 33020000 		.4byte	0x233
 7793 1333 3E130000 		.4byte	0x133e
 7794 1337 0C       		.uleb128 0xc
 7795 1338 A9000000 		.4byte	0xa9
 7796 133c 06       		.byte	0x6
 7797 133d 00       		.byte	0
 7798 133e 1A       		.uleb128 0x1a
 7799 133f 0A0B0000 		.4byte	.LASF179
 7800 1343 01       		.byte	0x1
 7801 1344 7701     		.2byte	0x177
 7802 1346 2E130000 		.4byte	0x132e
 7803 134a 05       		.uleb128 0x5
 7804 134b 03       		.byte	0x3
 7805 134c 04000000 		.4byte	pxReadyTasksLists
 7806 1350 1A       		.uleb128 0x1a
 7807 1351 450B0000 		.4byte	.LASF180
 7808 1355 01       		.byte	0x1
 7809 1356 7801     		.2byte	0x178
 7810 1358 33020000 		.4byte	0x233
 7811 135c 05       		.uleb128 0x5
 7812 135d 03       		.byte	0x3
 7813 135e 90000000 		.4byte	xDelayedTaskList1
 7814 1362 1A       		.uleb128 0x1a
 7815 1363 BA040000 		.4byte	.LASF181
 7816 1367 01       		.byte	0x1
 7817 1368 7901     		.2byte	0x179
 7818 136a 33020000 		.4byte	0x233
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 228


 7819 136e 05       		.uleb128 0x5
 7820 136f 03       		.byte	0x3
 7821 1370 A4000000 		.4byte	xDelayedTaskList2
 7822 1374 1A       		.uleb128 0x1a
 7823 1375 230D0000 		.4byte	.LASF182
 7824 1379 01       		.byte	0x1
 7825 137a 7A01     		.2byte	0x17a
 7826 137c 86130000 		.4byte	0x1386
 7827 1380 05       		.uleb128 0x5
 7828 1381 03       		.byte	0x3
 7829 1382 B8000000 		.4byte	pxDelayedTaskList
 7830 1386 08       		.uleb128 0x8
 7831 1387 180B0000 		.4byte	0xb18
 7832 138b 1A       		.uleb128 0x1a
 7833 138c 83060000 		.4byte	.LASF183
 7834 1390 01       		.byte	0x1
 7835 1391 7B01     		.2byte	0x17b
 7836 1393 86130000 		.4byte	0x1386
 7837 1397 05       		.uleb128 0x5
 7838 1398 03       		.byte	0x3
 7839 1399 BC000000 		.4byte	pxOverflowDelayedTaskList
 7840 139d 1A       		.uleb128 0x1a
 7841 139e D3090000 		.4byte	.LASF184
 7842 13a2 01       		.byte	0x1
 7843 13a3 7C01     		.2byte	0x17c
 7844 13a5 33020000 		.4byte	0x233
 7845 13a9 05       		.uleb128 0x5
 7846 13aa 03       		.byte	0x3
 7847 13ab C0000000 		.4byte	xPendingReadyList
 7848 13af 1A       		.uleb128 0x1a
 7849 13b0 CA060000 		.4byte	.LASF185
 7850 13b4 01       		.byte	0x1
 7851 13b5 8001     		.2byte	0x180
 7852 13b7 33020000 		.4byte	0x233
 7853 13bb 05       		.uleb128 0x5
 7854 13bc 03       		.byte	0x3
 7855 13bd D4000000 		.4byte	xTasksWaitingTermination
 7856 13c1 1A       		.uleb128 0x1a
 7857 13c2 840A0000 		.4byte	.LASF186
 7858 13c6 01       		.byte	0x1
 7859 13c7 8101     		.2byte	0x181
 7860 13c9 D3130000 		.4byte	0x13d3
 7861 13cd 05       		.uleb128 0x5
 7862 13ce 03       		.byte	0x3
 7863 13cf E8000000 		.4byte	uxDeletedTasksWaitingCleanUp
 7864 13d3 08       		.uleb128 0x8
 7865 13d4 40010000 		.4byte	0x140
 7866 13d8 1A       		.uleb128 0x1a
 7867 13d9 5E010000 		.4byte	.LASF187
 7868 13dd 01       		.byte	0x1
 7869 13de 8701     		.2byte	0x187
 7870 13e0 33020000 		.4byte	0x233
 7871 13e4 05       		.uleb128 0x5
 7872 13e5 03       		.byte	0x3
 7873 13e6 EC000000 		.4byte	xSuspendedTaskList
 7874 13ea 1A       		.uleb128 0x1a
 7875 13eb 6D000000 		.4byte	.LASF188
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 229


 7876 13ef 01       		.byte	0x1
 7877 13f0 8C01     		.2byte	0x18c
 7878 13f2 D3130000 		.4byte	0x13d3
 7879 13f6 05       		.uleb128 0x5
 7880 13f7 03       		.byte	0x3
 7881 13f8 00010000 		.4byte	uxCurrentNumberOfTasks
 7882 13fc 1A       		.uleb128 0x1a
 7883 13fd 8C0B0000 		.4byte	.LASF189
 7884 1401 01       		.byte	0x1
 7885 1402 8D01     		.2byte	0x18d
 7886 1404 0E140000 		.4byte	0x140e
 7887 1408 05       		.uleb128 0x5
 7888 1409 03       		.byte	0x3
 7889 140a 04010000 		.4byte	xTickCount
 7890 140e 08       		.uleb128 0x8
 7891 140f 4B010000 		.4byte	0x14b
 7892 1413 1A       		.uleb128 0x1a
 7893 1414 48070000 		.4byte	.LASF190
 7894 1418 01       		.byte	0x1
 7895 1419 8E01     		.2byte	0x18e
 7896 141b D3130000 		.4byte	0x13d3
 7897 141f 05       		.uleb128 0x5
 7898 1420 03       		.byte	0x3
 7899 1421 08010000 		.4byte	uxTopReadyPriority
 7900 1425 1A       		.uleb128 0x1a
 7901 1426 AD080000 		.4byte	.LASF191
 7902 142a 01       		.byte	0x1
 7903 142b 8F01     		.2byte	0x18f
 7904 142d 37140000 		.4byte	0x1437
 7905 1431 05       		.uleb128 0x5
 7906 1432 03       		.byte	0x3
 7907 1433 0C010000 		.4byte	xSchedulerRunning
 7908 1437 08       		.uleb128 0x8
 7909 1438 35010000 		.4byte	0x135
 7910 143c 1A       		.uleb128 0x1a
 7911 143d D10D0000 		.4byte	.LASF192
 7912 1441 01       		.byte	0x1
 7913 1442 9001     		.2byte	0x190
 7914 1444 D3130000 		.4byte	0x13d3
 7915 1448 05       		.uleb128 0x5
 7916 1449 03       		.byte	0x3
 7917 144a 10010000 		.4byte	uxPendedTicks
 7918 144e 1A       		.uleb128 0x1a
 7919 144f A6000000 		.4byte	.LASF193
 7920 1453 01       		.byte	0x1
 7921 1454 9101     		.2byte	0x191
 7922 1456 37140000 		.4byte	0x1437
 7923 145a 05       		.uleb128 0x5
 7924 145b 03       		.byte	0x3
 7925 145c 14010000 		.4byte	xYieldPending
 7926 1460 1A       		.uleb128 0x1a
 7927 1461 690B0000 		.4byte	.LASF194
 7928 1465 01       		.byte	0x1
 7929 1466 9201     		.2byte	0x192
 7930 1468 37140000 		.4byte	0x1437
 7931 146c 05       		.uleb128 0x5
 7932 146d 03       		.byte	0x3
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 230


 7933 146e 18010000 		.4byte	xNumOfOverflows
 7934 1472 1A       		.uleb128 0x1a
 7935 1473 E60A0000 		.4byte	.LASF195
 7936 1477 01       		.byte	0x1
 7937 1478 9301     		.2byte	0x193
 7938 147a 40010000 		.4byte	0x140
 7939 147e 05       		.uleb128 0x5
 7940 147f 03       		.byte	0x3
 7941 1480 1C010000 		.4byte	uxTaskNumber
 7942 1484 1A       		.uleb128 0x1a
 7943 1485 1C070000 		.4byte	.LASF196
 7944 1489 01       		.byte	0x1
 7945 148a 9401     		.2byte	0x194
 7946 148c 0E140000 		.4byte	0x140e
 7947 1490 05       		.uleb128 0x5
 7948 1491 03       		.byte	0x3
 7949 1492 20010000 		.4byte	xNextTaskUnblockTime
 7950 1496 1A       		.uleb128 0x1a
 7951 1497 FA0A0000 		.4byte	.LASF197
 7952 149b 01       		.byte	0x1
 7953 149c 9501     		.2byte	0x195
 7954 149e 3E020000 		.4byte	0x23e
 7955 14a2 05       		.uleb128 0x5
 7956 14a3 03       		.byte	0x3
 7957 14a4 24010000 		.4byte	xIdleTaskHandle
 7958 14a8 1A       		.uleb128 0x1a
 7959 14a9 73040000 		.4byte	.LASF198
 7960 14ad 01       		.byte	0x1
 7961 14ae 9F01     		.2byte	0x19f
 7962 14b0 D3130000 		.4byte	0x13d3
 7963 14b4 05       		.uleb128 0x5
 7964 14b5 03       		.byte	0x3
 7965 14b6 28010000 		.4byte	uxSchedulerSuspended
 7966 14ba 2B       		.uleb128 0x2b
 7967 14bb F1010000 		.4byte	.LASF199
 7968 14bf 09       		.byte	0x9
 7969 14c0 EA07     		.2byte	0x7ea
 7970 14c2 C6140000 		.4byte	0x14c6
 7971 14c6 08       		.uleb128 0x8
 7972 14c7 E0000000 		.4byte	0xe0
 7973 14cb 2C       		.uleb128 0x2c
 7974 14cc 22060000 		.4byte	.LASF200
 7975 14d0 01       		.byte	0x1
 7976 14d1 7401     		.2byte	0x174
 7977 14d3 DD140000 		.4byte	0x14dd
 7978 14d7 05       		.uleb128 0x5
 7979 14d8 03       		.byte	0x3
 7980 14d9 00000000 		.4byte	pxCurrentTCB
 7981 14dd 08       		.uleb128 0x8
 7982 14de AC040000 		.4byte	0x4ac
 7983 14e2 00       		.byte	0
 7984              		.section	.debug_abbrev,"",%progbits
 7985              	.Ldebug_abbrev0:
 7986 0000 01       		.uleb128 0x1
 7987 0001 11       		.uleb128 0x11
 7988 0002 01       		.byte	0x1
 7989 0003 25       		.uleb128 0x25
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 231


 7990 0004 0E       		.uleb128 0xe
 7991 0005 13       		.uleb128 0x13
 7992 0006 0B       		.uleb128 0xb
 7993 0007 03       		.uleb128 0x3
 7994 0008 0E       		.uleb128 0xe
 7995 0009 1B       		.uleb128 0x1b
 7996 000a 0E       		.uleb128 0xe
 7997 000b 55       		.uleb128 0x55
 7998 000c 17       		.uleb128 0x17
 7999 000d 11       		.uleb128 0x11
 8000 000e 01       		.uleb128 0x1
 8001 000f 10       		.uleb128 0x10
 8002 0010 17       		.uleb128 0x17
 8003 0011 00       		.byte	0
 8004 0012 00       		.byte	0
 8005 0013 02       		.uleb128 0x2
 8006 0014 16       		.uleb128 0x16
 8007 0015 00       		.byte	0
 8008 0016 03       		.uleb128 0x3
 8009 0017 0E       		.uleb128 0xe
 8010 0018 3A       		.uleb128 0x3a
 8011 0019 0B       		.uleb128 0xb
 8012 001a 3B       		.uleb128 0x3b
 8013 001b 0B       		.uleb128 0xb
 8014 001c 49       		.uleb128 0x49
 8015 001d 13       		.uleb128 0x13
 8016 001e 00       		.byte	0
 8017 001f 00       		.byte	0
 8018 0020 03       		.uleb128 0x3
 8019 0021 24       		.uleb128 0x24
 8020 0022 00       		.byte	0
 8021 0023 0B       		.uleb128 0xb
 8022 0024 0B       		.uleb128 0xb
 8023 0025 3E       		.uleb128 0x3e
 8024 0026 0B       		.uleb128 0xb
 8025 0027 03       		.uleb128 0x3
 8026 0028 0E       		.uleb128 0xe
 8027 0029 00       		.byte	0
 8028 002a 00       		.byte	0
 8029 002b 04       		.uleb128 0x4
 8030 002c 24       		.uleb128 0x24
 8031 002d 00       		.byte	0
 8032 002e 0B       		.uleb128 0xb
 8033 002f 0B       		.uleb128 0xb
 8034 0030 3E       		.uleb128 0x3e
 8035 0031 0B       		.uleb128 0xb
 8036 0032 03       		.uleb128 0x3
 8037 0033 08       		.uleb128 0x8
 8038 0034 00       		.byte	0
 8039 0035 00       		.byte	0
 8040 0036 05       		.uleb128 0x5
 8041 0037 0F       		.uleb128 0xf
 8042 0038 00       		.byte	0
 8043 0039 0B       		.uleb128 0xb
 8044 003a 0B       		.uleb128 0xb
 8045 003b 00       		.byte	0
 8046 003c 00       		.byte	0
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 232


 8047 003d 06       		.uleb128 0x6
 8048 003e 0F       		.uleb128 0xf
 8049 003f 00       		.byte	0
 8050 0040 0B       		.uleb128 0xb
 8051 0041 0B       		.uleb128 0xb
 8052 0042 49       		.uleb128 0x49
 8053 0043 13       		.uleb128 0x13
 8054 0044 00       		.byte	0
 8055 0045 00       		.byte	0
 8056 0046 07       		.uleb128 0x7
 8057 0047 26       		.uleb128 0x26
 8058 0048 00       		.byte	0
 8059 0049 49       		.uleb128 0x49
 8060 004a 13       		.uleb128 0x13
 8061 004b 00       		.byte	0
 8062 004c 00       		.byte	0
 8063 004d 08       		.uleb128 0x8
 8064 004e 35       		.uleb128 0x35
 8065 004f 00       		.byte	0
 8066 0050 49       		.uleb128 0x49
 8067 0051 13       		.uleb128 0x13
 8068 0052 00       		.byte	0
 8069 0053 00       		.byte	0
 8070 0054 09       		.uleb128 0x9
 8071 0055 15       		.uleb128 0x15
 8072 0056 01       		.byte	0x1
 8073 0057 27       		.uleb128 0x27
 8074 0058 19       		.uleb128 0x19
 8075 0059 01       		.uleb128 0x1
 8076 005a 13       		.uleb128 0x13
 8077 005b 00       		.byte	0
 8078 005c 00       		.byte	0
 8079 005d 0A       		.uleb128 0xa
 8080 005e 05       		.uleb128 0x5
 8081 005f 00       		.byte	0
 8082 0060 49       		.uleb128 0x49
 8083 0061 13       		.uleb128 0x13
 8084 0062 00       		.byte	0
 8085 0063 00       		.byte	0
 8086 0064 0B       		.uleb128 0xb
 8087 0065 01       		.uleb128 0x1
 8088 0066 01       		.byte	0x1
 8089 0067 49       		.uleb128 0x49
 8090 0068 13       		.uleb128 0x13
 8091 0069 01       		.uleb128 0x1
 8092 006a 13       		.uleb128 0x13
 8093 006b 00       		.byte	0
 8094 006c 00       		.byte	0
 8095 006d 0C       		.uleb128 0xc
 8096 006e 21       		.uleb128 0x21
 8097 006f 00       		.byte	0
 8098 0070 49       		.uleb128 0x49
 8099 0071 13       		.uleb128 0x13
 8100 0072 2F       		.uleb128 0x2f
 8101 0073 0B       		.uleb128 0xb
 8102 0074 00       		.byte	0
 8103 0075 00       		.byte	0
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 233


 8104 0076 0D       		.uleb128 0xd
 8105 0077 13       		.uleb128 0x13
 8106 0078 01       		.byte	0x1
 8107 0079 03       		.uleb128 0x3
 8108 007a 0E       		.uleb128 0xe
 8109 007b 0B       		.uleb128 0xb
 8110 007c 0B       		.uleb128 0xb
 8111 007d 3A       		.uleb128 0x3a
 8112 007e 0B       		.uleb128 0xb
 8113 007f 3B       		.uleb128 0x3b
 8114 0080 0B       		.uleb128 0xb
 8115 0081 01       		.uleb128 0x1
 8116 0082 13       		.uleb128 0x13
 8117 0083 00       		.byte	0
 8118 0084 00       		.byte	0
 8119 0085 0E       		.uleb128 0xe
 8120 0086 0D       		.uleb128 0xd
 8121 0087 00       		.byte	0
 8122 0088 03       		.uleb128 0x3
 8123 0089 0E       		.uleb128 0xe
 8124 008a 3A       		.uleb128 0x3a
 8125 008b 0B       		.uleb128 0xb
 8126 008c 3B       		.uleb128 0x3b
 8127 008d 0B       		.uleb128 0xb
 8128 008e 49       		.uleb128 0x49
 8129 008f 13       		.uleb128 0x13
 8130 0090 38       		.uleb128 0x38
 8131 0091 0B       		.uleb128 0xb
 8132 0092 00       		.byte	0
 8133 0093 00       		.byte	0
 8134 0094 0F       		.uleb128 0xf
 8135 0095 04       		.uleb128 0x4
 8136 0096 01       		.byte	0x1
 8137 0097 0B       		.uleb128 0xb
 8138 0098 0B       		.uleb128 0xb
 8139 0099 49       		.uleb128 0x49
 8140 009a 13       		.uleb128 0x13
 8141 009b 3A       		.uleb128 0x3a
 8142 009c 0B       		.uleb128 0xb
 8143 009d 3B       		.uleb128 0x3b
 8144 009e 0B       		.uleb128 0xb
 8145 009f 01       		.uleb128 0x1
 8146 00a0 13       		.uleb128 0x13
 8147 00a1 00       		.byte	0
 8148 00a2 00       		.byte	0
 8149 00a3 10       		.uleb128 0x10
 8150 00a4 28       		.uleb128 0x28
 8151 00a5 00       		.byte	0
 8152 00a6 03       		.uleb128 0x3
 8153 00a7 0E       		.uleb128 0xe
 8154 00a8 1C       		.uleb128 0x1c
 8155 00a9 0B       		.uleb128 0xb
 8156 00aa 00       		.byte	0
 8157 00ab 00       		.byte	0
 8158 00ac 11       		.uleb128 0x11
 8159 00ad 13       		.uleb128 0x13
 8160 00ae 01       		.byte	0x1
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 234


 8161 00af 03       		.uleb128 0x3
 8162 00b0 0E       		.uleb128 0xe
 8163 00b1 0B       		.uleb128 0xb
 8164 00b2 0B       		.uleb128 0xb
 8165 00b3 3A       		.uleb128 0x3a
 8166 00b4 0B       		.uleb128 0xb
 8167 00b5 3B       		.uleb128 0x3b
 8168 00b6 05       		.uleb128 0x5
 8169 00b7 01       		.uleb128 0x1
 8170 00b8 13       		.uleb128 0x13
 8171 00b9 00       		.byte	0
 8172 00ba 00       		.byte	0
 8173 00bb 12       		.uleb128 0x12
 8174 00bc 0D       		.uleb128 0xd
 8175 00bd 00       		.byte	0
 8176 00be 03       		.uleb128 0x3
 8177 00bf 0E       		.uleb128 0xe
 8178 00c0 3A       		.uleb128 0x3a
 8179 00c1 0B       		.uleb128 0xb
 8180 00c2 3B       		.uleb128 0x3b
 8181 00c3 05       		.uleb128 0x5
 8182 00c4 49       		.uleb128 0x49
 8183 00c5 13       		.uleb128 0x13
 8184 00c6 38       		.uleb128 0x38
 8185 00c7 0B       		.uleb128 0xb
 8186 00c8 00       		.byte	0
 8187 00c9 00       		.byte	0
 8188 00ca 13       		.uleb128 0x13
 8189 00cb 16       		.uleb128 0x16
 8190 00cc 00       		.byte	0
 8191 00cd 03       		.uleb128 0x3
 8192 00ce 0E       		.uleb128 0xe
 8193 00cf 3A       		.uleb128 0x3a
 8194 00d0 0B       		.uleb128 0xb
 8195 00d1 3B       		.uleb128 0x3b
 8196 00d2 05       		.uleb128 0x5
 8197 00d3 49       		.uleb128 0x49
 8198 00d4 13       		.uleb128 0x13
 8199 00d5 00       		.byte	0
 8200 00d6 00       		.byte	0
 8201 00d7 14       		.uleb128 0x14
 8202 00d8 2E       		.uleb128 0x2e
 8203 00d9 01       		.byte	0x1
 8204 00da 03       		.uleb128 0x3
 8205 00db 0E       		.uleb128 0xe
 8206 00dc 3A       		.uleb128 0x3a
 8207 00dd 0B       		.uleb128 0xb
 8208 00de 3B       		.uleb128 0x3b
 8209 00df 0B       		.uleb128 0xb
 8210 00e0 27       		.uleb128 0x27
 8211 00e1 19       		.uleb128 0x19
 8212 00e2 49       		.uleb128 0x49
 8213 00e3 13       		.uleb128 0x13
 8214 00e4 20       		.uleb128 0x20
 8215 00e5 0B       		.uleb128 0xb
 8216 00e6 01       		.uleb128 0x1
 8217 00e7 13       		.uleb128 0x13
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 235


 8218 00e8 00       		.byte	0
 8219 00e9 00       		.byte	0
 8220 00ea 15       		.uleb128 0x15
 8221 00eb 34       		.uleb128 0x34
 8222 00ec 00       		.byte	0
 8223 00ed 03       		.uleb128 0x3
 8224 00ee 0E       		.uleb128 0xe
 8225 00ef 3A       		.uleb128 0x3a
 8226 00f0 0B       		.uleb128 0xb
 8227 00f1 3B       		.uleb128 0x3b
 8228 00f2 0B       		.uleb128 0xb
 8229 00f3 49       		.uleb128 0x49
 8230 00f4 13       		.uleb128 0x13
 8231 00f5 00       		.byte	0
 8232 00f6 00       		.byte	0
 8233 00f7 16       		.uleb128 0x16
 8234 00f8 2E       		.uleb128 0x2e
 8235 00f9 01       		.byte	0x1
 8236 00fa 03       		.uleb128 0x3
 8237 00fb 0E       		.uleb128 0xe
 8238 00fc 3A       		.uleb128 0x3a
 8239 00fd 0B       		.uleb128 0xb
 8240 00fe 3B       		.uleb128 0x3b
 8241 00ff 0B       		.uleb128 0xb
 8242 0100 27       		.uleb128 0x27
 8243 0101 19       		.uleb128 0x19
 8244 0102 20       		.uleb128 0x20
 8245 0103 0B       		.uleb128 0xb
 8246 0104 01       		.uleb128 0x1
 8247 0105 13       		.uleb128 0x13
 8248 0106 00       		.byte	0
 8249 0107 00       		.byte	0
 8250 0108 17       		.uleb128 0x17
 8251 0109 05       		.uleb128 0x5
 8252 010a 00       		.byte	0
 8253 010b 03       		.uleb128 0x3
 8254 010c 0E       		.uleb128 0xe
 8255 010d 3A       		.uleb128 0x3a
 8256 010e 0B       		.uleb128 0xb
 8257 010f 3B       		.uleb128 0x3b
 8258 0110 0B       		.uleb128 0xb
 8259 0111 49       		.uleb128 0x49
 8260 0112 13       		.uleb128 0x13
 8261 0113 00       		.byte	0
 8262 0114 00       		.byte	0
 8263 0115 18       		.uleb128 0x18
 8264 0116 2E       		.uleb128 0x2e
 8265 0117 01       		.byte	0x1
 8266 0118 3F       		.uleb128 0x3f
 8267 0119 19       		.uleb128 0x19
 8268 011a 03       		.uleb128 0x3
 8269 011b 0E       		.uleb128 0xe
 8270 011c 3A       		.uleb128 0x3a
 8271 011d 0B       		.uleb128 0xb
 8272 011e 3B       		.uleb128 0x3b
 8273 011f 05       		.uleb128 0x5
 8274 0120 27       		.uleb128 0x27
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 236


 8275 0121 19       		.uleb128 0x19
 8276 0122 49       		.uleb128 0x49
 8277 0123 13       		.uleb128 0x13
 8278 0124 11       		.uleb128 0x11
 8279 0125 01       		.uleb128 0x1
 8280 0126 12       		.uleb128 0x12
 8281 0127 06       		.uleb128 0x6
 8282 0128 40       		.uleb128 0x40
 8283 0129 18       		.uleb128 0x18
 8284 012a 9642     		.uleb128 0x2116
 8285 012c 19       		.uleb128 0x19
 8286 012d 01       		.uleb128 0x1
 8287 012e 13       		.uleb128 0x13
 8288 012f 00       		.byte	0
 8289 0130 00       		.byte	0
 8290 0131 19       		.uleb128 0x19
 8291 0132 05       		.uleb128 0x5
 8292 0133 00       		.byte	0
 8293 0134 03       		.uleb128 0x3
 8294 0135 0E       		.uleb128 0xe
 8295 0136 3A       		.uleb128 0x3a
 8296 0137 0B       		.uleb128 0xb
 8297 0138 3B       		.uleb128 0x3b
 8298 0139 05       		.uleb128 0x5
 8299 013a 49       		.uleb128 0x49
 8300 013b 13       		.uleb128 0x13
 8301 013c 02       		.uleb128 0x2
 8302 013d 18       		.uleb128 0x18
 8303 013e 00       		.byte	0
 8304 013f 00       		.byte	0
 8305 0140 1A       		.uleb128 0x1a
 8306 0141 34       		.uleb128 0x34
 8307 0142 00       		.byte	0
 8308 0143 03       		.uleb128 0x3
 8309 0144 0E       		.uleb128 0xe
 8310 0145 3A       		.uleb128 0x3a
 8311 0146 0B       		.uleb128 0xb
 8312 0147 3B       		.uleb128 0x3b
 8313 0148 05       		.uleb128 0x5
 8314 0149 49       		.uleb128 0x49
 8315 014a 13       		.uleb128 0x13
 8316 014b 02       		.uleb128 0x2
 8317 014c 18       		.uleb128 0x18
 8318 014d 00       		.byte	0
 8319 014e 00       		.byte	0
 8320 014f 1B       		.uleb128 0x1b
 8321 0150 0B       		.uleb128 0xb
 8322 0151 01       		.byte	0x1
 8323 0152 11       		.uleb128 0x11
 8324 0153 01       		.uleb128 0x1
 8325 0154 12       		.uleb128 0x12
 8326 0155 06       		.uleb128 0x6
 8327 0156 00       		.byte	0
 8328 0157 00       		.byte	0
 8329 0158 1C       		.uleb128 0x1c
 8330 0159 2E       		.uleb128 0x2e
 8331 015a 01       		.byte	0x1
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 237


 8332 015b 03       		.uleb128 0x3
 8333 015c 0E       		.uleb128 0xe
 8334 015d 3A       		.uleb128 0x3a
 8335 015e 0B       		.uleb128 0xb
 8336 015f 3B       		.uleb128 0x3b
 8337 0160 05       		.uleb128 0x5
 8338 0161 27       		.uleb128 0x27
 8339 0162 19       		.uleb128 0x19
 8340 0163 11       		.uleb128 0x11
 8341 0164 01       		.uleb128 0x1
 8342 0165 12       		.uleb128 0x12
 8343 0166 06       		.uleb128 0x6
 8344 0167 40       		.uleb128 0x40
 8345 0168 18       		.uleb128 0x18
 8346 0169 9642     		.uleb128 0x2116
 8347 016b 19       		.uleb128 0x19
 8348 016c 01       		.uleb128 0x1
 8349 016d 13       		.uleb128 0x13
 8350 016e 00       		.byte	0
 8351 016f 00       		.byte	0
 8352 0170 1D       		.uleb128 0x1d
 8353 0171 34       		.uleb128 0x34
 8354 0172 00       		.byte	0
 8355 0173 03       		.uleb128 0x3
 8356 0174 08       		.uleb128 0x8
 8357 0175 3A       		.uleb128 0x3a
 8358 0176 0B       		.uleb128 0xb
 8359 0177 3B       		.uleb128 0x3b
 8360 0178 05       		.uleb128 0x5
 8361 0179 49       		.uleb128 0x49
 8362 017a 13       		.uleb128 0x13
 8363 017b 02       		.uleb128 0x2
 8364 017c 18       		.uleb128 0x18
 8365 017d 00       		.byte	0
 8366 017e 00       		.byte	0
 8367 017f 1E       		.uleb128 0x1e
 8368 0180 2E       		.uleb128 0x2e
 8369 0181 01       		.byte	0x1
 8370 0182 3F       		.uleb128 0x3f
 8371 0183 19       		.uleb128 0x19
 8372 0184 03       		.uleb128 0x3
 8373 0185 0E       		.uleb128 0xe
 8374 0186 3A       		.uleb128 0x3a
 8375 0187 0B       		.uleb128 0xb
 8376 0188 3B       		.uleb128 0x3b
 8377 0189 05       		.uleb128 0x5
 8378 018a 27       		.uleb128 0x27
 8379 018b 19       		.uleb128 0x19
 8380 018c 11       		.uleb128 0x11
 8381 018d 01       		.uleb128 0x1
 8382 018e 12       		.uleb128 0x12
 8383 018f 06       		.uleb128 0x6
 8384 0190 40       		.uleb128 0x40
 8385 0191 18       		.uleb128 0x18
 8386 0192 9642     		.uleb128 0x2116
 8387 0194 19       		.uleb128 0x19
 8388 0195 01       		.uleb128 0x1
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 238


 8389 0196 13       		.uleb128 0x13
 8390 0197 00       		.byte	0
 8391 0198 00       		.byte	0
 8392 0199 1F       		.uleb128 0x1f
 8393 019a 1D       		.uleb128 0x1d
 8394 019b 01       		.byte	0x1
 8395 019c 31       		.uleb128 0x31
 8396 019d 13       		.uleb128 0x13
 8397 019e 11       		.uleb128 0x11
 8398 019f 01       		.uleb128 0x1
 8399 01a0 12       		.uleb128 0x12
 8400 01a1 06       		.uleb128 0x6
 8401 01a2 58       		.uleb128 0x58
 8402 01a3 0B       		.uleb128 0xb
 8403 01a4 59       		.uleb128 0x59
 8404 01a5 05       		.uleb128 0x5
 8405 01a6 01       		.uleb128 0x1
 8406 01a7 13       		.uleb128 0x13
 8407 01a8 00       		.byte	0
 8408 01a9 00       		.byte	0
 8409 01aa 20       		.uleb128 0x20
 8410 01ab 34       		.uleb128 0x34
 8411 01ac 00       		.byte	0
 8412 01ad 31       		.uleb128 0x31
 8413 01ae 13       		.uleb128 0x13
 8414 01af 02       		.uleb128 0x2
 8415 01b0 18       		.uleb128 0x18
 8416 01b1 00       		.byte	0
 8417 01b2 00       		.byte	0
 8418 01b3 21       		.uleb128 0x21
 8419 01b4 1D       		.uleb128 0x1d
 8420 01b5 01       		.byte	0x1
 8421 01b6 31       		.uleb128 0x31
 8422 01b7 13       		.uleb128 0x13
 8423 01b8 11       		.uleb128 0x11
 8424 01b9 01       		.uleb128 0x1
 8425 01ba 12       		.uleb128 0x12
 8426 01bb 06       		.uleb128 0x6
 8427 01bc 58       		.uleb128 0x58
 8428 01bd 0B       		.uleb128 0xb
 8429 01be 59       		.uleb128 0x59
 8430 01bf 05       		.uleb128 0x5
 8431 01c0 00       		.byte	0
 8432 01c1 00       		.byte	0
 8433 01c2 22       		.uleb128 0x22
 8434 01c3 05       		.uleb128 0x5
 8435 01c4 00       		.byte	0
 8436 01c5 31       		.uleb128 0x31
 8437 01c6 13       		.uleb128 0x13
 8438 01c7 02       		.uleb128 0x2
 8439 01c8 18       		.uleb128 0x18
 8440 01c9 00       		.byte	0
 8441 01ca 00       		.byte	0
 8442 01cb 23       		.uleb128 0x23
 8443 01cc 2E       		.uleb128 0x2e
 8444 01cd 01       		.byte	0x1
 8445 01ce 03       		.uleb128 0x3
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 239


 8446 01cf 0E       		.uleb128 0xe
 8447 01d0 3A       		.uleb128 0x3a
 8448 01d1 0B       		.uleb128 0xb
 8449 01d2 3B       		.uleb128 0x3b
 8450 01d3 05       		.uleb128 0x5
 8451 01d4 27       		.uleb128 0x27
 8452 01d5 19       		.uleb128 0x19
 8453 01d6 49       		.uleb128 0x49
 8454 01d7 13       		.uleb128 0x13
 8455 01d8 11       		.uleb128 0x11
 8456 01d9 01       		.uleb128 0x1
 8457 01da 12       		.uleb128 0x12
 8458 01db 06       		.uleb128 0x6
 8459 01dc 40       		.uleb128 0x40
 8460 01dd 18       		.uleb128 0x18
 8461 01de 9742     		.uleb128 0x2117
 8462 01e0 19       		.uleb128 0x19
 8463 01e1 01       		.uleb128 0x1
 8464 01e2 13       		.uleb128 0x13
 8465 01e3 00       		.byte	0
 8466 01e4 00       		.byte	0
 8467 01e5 24       		.uleb128 0x24
 8468 01e6 2E       		.uleb128 0x2e
 8469 01e7 00       		.byte	0
 8470 01e8 3F       		.uleb128 0x3f
 8471 01e9 19       		.uleb128 0x19
 8472 01ea 03       		.uleb128 0x3
 8473 01eb 0E       		.uleb128 0xe
 8474 01ec 3A       		.uleb128 0x3a
 8475 01ed 0B       		.uleb128 0xb
 8476 01ee 3B       		.uleb128 0x3b
 8477 01ef 05       		.uleb128 0x5
 8478 01f0 27       		.uleb128 0x27
 8479 01f1 19       		.uleb128 0x19
 8480 01f2 11       		.uleb128 0x11
 8481 01f3 01       		.uleb128 0x1
 8482 01f4 12       		.uleb128 0x12
 8483 01f5 06       		.uleb128 0x6
 8484 01f6 40       		.uleb128 0x40
 8485 01f7 18       		.uleb128 0x18
 8486 01f8 9642     		.uleb128 0x2116
 8487 01fa 19       		.uleb128 0x19
 8488 01fb 00       		.byte	0
 8489 01fc 00       		.byte	0
 8490 01fd 25       		.uleb128 0x25
 8491 01fe 2E       		.uleb128 0x2e
 8492 01ff 00       		.byte	0
 8493 0200 3F       		.uleb128 0x3f
 8494 0201 19       		.uleb128 0x19
 8495 0202 03       		.uleb128 0x3
 8496 0203 0E       		.uleb128 0xe
 8497 0204 3A       		.uleb128 0x3a
 8498 0205 0B       		.uleb128 0xb
 8499 0206 3B       		.uleb128 0x3b
 8500 0207 05       		.uleb128 0x5
 8501 0208 27       		.uleb128 0x27
 8502 0209 19       		.uleb128 0x19
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 240


 8503 020a 11       		.uleb128 0x11
 8504 020b 01       		.uleb128 0x1
 8505 020c 12       		.uleb128 0x12
 8506 020d 06       		.uleb128 0x6
 8507 020e 40       		.uleb128 0x40
 8508 020f 18       		.uleb128 0x18
 8509 0210 9742     		.uleb128 0x2117
 8510 0212 19       		.uleb128 0x19
 8511 0213 00       		.byte	0
 8512 0214 00       		.byte	0
 8513 0215 26       		.uleb128 0x26
 8514 0216 2E       		.uleb128 0x2e
 8515 0217 01       		.byte	0x1
 8516 0218 3F       		.uleb128 0x3f
 8517 0219 19       		.uleb128 0x19
 8518 021a 03       		.uleb128 0x3
 8519 021b 0E       		.uleb128 0xe
 8520 021c 3A       		.uleb128 0x3a
 8521 021d 0B       		.uleb128 0xb
 8522 021e 3B       		.uleb128 0x3b
 8523 021f 05       		.uleb128 0x5
 8524 0220 27       		.uleb128 0x27
 8525 0221 19       		.uleb128 0x19
 8526 0222 49       		.uleb128 0x49
 8527 0223 13       		.uleb128 0x13
 8528 0224 11       		.uleb128 0x11
 8529 0225 01       		.uleb128 0x1
 8530 0226 12       		.uleb128 0x12
 8531 0227 06       		.uleb128 0x6
 8532 0228 40       		.uleb128 0x40
 8533 0229 18       		.uleb128 0x18
 8534 022a 9742     		.uleb128 0x2117
 8535 022c 19       		.uleb128 0x19
 8536 022d 01       		.uleb128 0x1
 8537 022e 13       		.uleb128 0x13
 8538 022f 00       		.byte	0
 8539 0230 00       		.byte	0
 8540 0231 27       		.uleb128 0x27
 8541 0232 2E       		.uleb128 0x2e
 8542 0233 00       		.byte	0
 8543 0234 3F       		.uleb128 0x3f
 8544 0235 19       		.uleb128 0x19
 8545 0236 03       		.uleb128 0x3
 8546 0237 0E       		.uleb128 0xe
 8547 0238 3A       		.uleb128 0x3a
 8548 0239 0B       		.uleb128 0xb
 8549 023a 3B       		.uleb128 0x3b
 8550 023b 05       		.uleb128 0x5
 8551 023c 27       		.uleb128 0x27
 8552 023d 19       		.uleb128 0x19
 8553 023e 49       		.uleb128 0x49
 8554 023f 13       		.uleb128 0x13
 8555 0240 11       		.uleb128 0x11
 8556 0241 01       		.uleb128 0x1
 8557 0242 12       		.uleb128 0x12
 8558 0243 06       		.uleb128 0x6
 8559 0244 40       		.uleb128 0x40
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 241


 8560 0245 18       		.uleb128 0x18
 8561 0246 9742     		.uleb128 0x2117
 8562 0248 19       		.uleb128 0x19
 8563 0249 00       		.byte	0
 8564 024a 00       		.byte	0
 8565 024b 28       		.uleb128 0x28
 8566 024c 0B       		.uleb128 0xb
 8567 024d 01       		.byte	0x1
 8568 024e 11       		.uleb128 0x11
 8569 024f 01       		.uleb128 0x1
 8570 0250 12       		.uleb128 0x12
 8571 0251 06       		.uleb128 0x6
 8572 0252 01       		.uleb128 0x1
 8573 0253 13       		.uleb128 0x13
 8574 0254 00       		.byte	0
 8575 0255 00       		.byte	0
 8576 0256 29       		.uleb128 0x29
 8577 0257 2E       		.uleb128 0x2e
 8578 0258 01       		.byte	0x1
 8579 0259 3F       		.uleb128 0x3f
 8580 025a 19       		.uleb128 0x19
 8581 025b 03       		.uleb128 0x3
 8582 025c 0E       		.uleb128 0xe
 8583 025d 3A       		.uleb128 0x3a
 8584 025e 0B       		.uleb128 0xb
 8585 025f 3B       		.uleb128 0x3b
 8586 0260 05       		.uleb128 0x5
 8587 0261 27       		.uleb128 0x27
 8588 0262 19       		.uleb128 0x19
 8589 0263 11       		.uleb128 0x11
 8590 0264 01       		.uleb128 0x1
 8591 0265 12       		.uleb128 0x12
 8592 0266 06       		.uleb128 0x6
 8593 0267 40       		.uleb128 0x40
 8594 0268 18       		.uleb128 0x18
 8595 0269 9742     		.uleb128 0x2117
 8596 026b 19       		.uleb128 0x19
 8597 026c 01       		.uleb128 0x1
 8598 026d 13       		.uleb128 0x13
 8599 026e 00       		.byte	0
 8600 026f 00       		.byte	0
 8601 0270 2A       		.uleb128 0x2a
 8602 0271 2E       		.uleb128 0x2e
 8603 0272 01       		.byte	0x1
 8604 0273 03       		.uleb128 0x3
 8605 0274 0E       		.uleb128 0xe
 8606 0275 3A       		.uleb128 0x3a
 8607 0276 0B       		.uleb128 0xb
 8608 0277 3B       		.uleb128 0x3b
 8609 0278 05       		.uleb128 0x5
 8610 0279 27       		.uleb128 0x27
 8611 027a 19       		.uleb128 0x19
 8612 027b 11       		.uleb128 0x11
 8613 027c 01       		.uleb128 0x1
 8614 027d 12       		.uleb128 0x12
 8615 027e 06       		.uleb128 0x6
 8616 027f 40       		.uleb128 0x40
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 242


 8617 0280 18       		.uleb128 0x18
 8618 0281 9742     		.uleb128 0x2117
 8619 0283 19       		.uleb128 0x19
 8620 0284 01       		.uleb128 0x1
 8621 0285 13       		.uleb128 0x13
 8622 0286 00       		.byte	0
 8623 0287 00       		.byte	0
 8624 0288 2B       		.uleb128 0x2b
 8625 0289 34       		.uleb128 0x34
 8626 028a 00       		.byte	0
 8627 028b 03       		.uleb128 0x3
 8628 028c 0E       		.uleb128 0xe
 8629 028d 3A       		.uleb128 0x3a
 8630 028e 0B       		.uleb128 0xb
 8631 028f 3B       		.uleb128 0x3b
 8632 0290 05       		.uleb128 0x5
 8633 0291 49       		.uleb128 0x49
 8634 0292 13       		.uleb128 0x13
 8635 0293 3F       		.uleb128 0x3f
 8636 0294 19       		.uleb128 0x19
 8637 0295 3C       		.uleb128 0x3c
 8638 0296 19       		.uleb128 0x19
 8639 0297 00       		.byte	0
 8640 0298 00       		.byte	0
 8641 0299 2C       		.uleb128 0x2c
 8642 029a 34       		.uleb128 0x34
 8643 029b 00       		.byte	0
 8644 029c 03       		.uleb128 0x3
 8645 029d 0E       		.uleb128 0xe
 8646 029e 3A       		.uleb128 0x3a
 8647 029f 0B       		.uleb128 0xb
 8648 02a0 3B       		.uleb128 0x3b
 8649 02a1 05       		.uleb128 0x5
 8650 02a2 49       		.uleb128 0x49
 8651 02a3 13       		.uleb128 0x13
 8652 02a4 3F       		.uleb128 0x3f
 8653 02a5 19       		.uleb128 0x19
 8654 02a6 02       		.uleb128 0x2
 8655 02a7 18       		.uleb128 0x18
 8656 02a8 00       		.byte	0
 8657 02a9 00       		.byte	0
 8658 02aa 00       		.byte	0
 8659              		.section	.debug_aranges,"",%progbits
 8660 0000 94010000 		.4byte	0x194
 8661 0004 0200     		.2byte	0x2
 8662 0006 00000000 		.4byte	.Ldebug_info0
 8663 000a 04       		.byte	0x4
 8664 000b 00       		.byte	0
 8665 000c 0000     		.2byte	0
 8666 000e 0000     		.2byte	0
 8667 0010 00000000 		.4byte	.LFB129
 8668 0014 82000000 		.4byte	.LFE129-.LFB129
 8669 0018 00000000 		.4byte	.LFB130
 8670 001c 10010000 		.4byte	.LFE130-.LFB130
 8671 0020 00000000 		.4byte	.LFB131
 8672 0024 D8000000 		.4byte	.LFE131-.LFB131
 8673 0028 00000000 		.4byte	.LFB132
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 243


 8674 002c D4000000 		.4byte	.LFE132-.LFB132
 8675 0030 00000000 		.4byte	.LFB133
 8676 0034 C4000000 		.4byte	.LFE133-.LFB133
 8677 0038 00000000 		.4byte	.LFB134
 8678 003c 58000000 		.4byte	.LFE134-.LFB134
 8679 0040 00000000 		.4byte	.LFB135
 8680 0044 34000000 		.4byte	.LFE135-.LFB135
 8681 0048 00000000 		.4byte	.LFB136
 8682 004c 58000000 		.4byte	.LFE136-.LFB136
 8683 0050 00000000 		.4byte	.LFB137
 8684 0054 20010000 		.4byte	.LFE137-.LFB137
 8685 0058 00000000 		.4byte	.LFB138
 8686 005c C4000000 		.4byte	.LFE138-.LFB138
 8687 0060 00000000 		.4byte	.LFB139
 8688 0064 64000000 		.4byte	.LFE139-.LFB139
 8689 0068 00000000 		.4byte	.LFB140
 8690 006c AC000000 		.4byte	.LFE140-.LFB140
 8691 0070 00000000 		.4byte	.LFB141
 8692 0074 D0000000 		.4byte	.LFE141-.LFB141
 8693 0078 00000000 		.4byte	.LFB142
 8694 007c 78000000 		.4byte	.LFE142-.LFB142
 8695 0080 00000000 		.4byte	.LFB143
 8696 0084 18000000 		.4byte	.LFE143-.LFB143
 8697 0088 00000000 		.4byte	.LFB144
 8698 008c 1C000000 		.4byte	.LFE144-.LFB144
 8699 0090 00000000 		.4byte	.LFB145
 8700 0094 28010000 		.4byte	.LFE145-.LFB145
 8701 0098 00000000 		.4byte	.LFB146
 8702 009c 20000000 		.4byte	.LFE146-.LFB146
 8703 00a0 00000000 		.4byte	.LFB147
 8704 00a4 24000000 		.4byte	.LFE147-.LFB147
 8705 00a8 00000000 		.4byte	.LFB148
 8706 00ac 18000000 		.4byte	.LFE148-.LFB148
 8707 00b0 00000000 		.4byte	.LFB149
 8708 00b4 38000000 		.4byte	.LFE149-.LFB149
 8709 00b8 00000000 		.4byte	.LFB150
 8710 00bc 4C010000 		.4byte	.LFE150-.LFB150
 8711 00c0 00000000 		.4byte	.LFB151
 8712 00c4 F4000000 		.4byte	.LFE151-.LFB151
 8713 00c8 00000000 		.4byte	.LFB152
 8714 00cc 38000000 		.4byte	.LFE152-.LFB152
 8715 00d0 00000000 		.4byte	.LFB153
 8716 00d4 54000000 		.4byte	.LFE153-.LFB153
 8717 00d8 00000000 		.4byte	.LFB154
 8718 00dc 44000000 		.4byte	.LFE154-.LFB154
 8719 00e0 00000000 		.4byte	.LFB155
 8720 00e4 B4000000 		.4byte	.LFE155-.LFB155
 8721 00e8 00000000 		.4byte	.LFB156
 8722 00ec AC000000 		.4byte	.LFE156-.LFB156
 8723 00f0 00000000 		.4byte	.LFB157
 8724 00f4 38000000 		.4byte	.LFE157-.LFB157
 8725 00f8 00000000 		.4byte	.LFB158
 8726 00fc 9C000000 		.4byte	.LFE158-.LFB158
 8727 0100 00000000 		.4byte	.LFB159
 8728 0104 18000000 		.4byte	.LFE159-.LFB159
 8729 0108 00000000 		.4byte	.LFB160
 8730 010c 30000000 		.4byte	.LFE160-.LFB160
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 244


 8731 0110 00000000 		.4byte	.LFB161
 8732 0114 40000000 		.4byte	.LFE161-.LFB161
 8733 0118 00000000 		.4byte	.LFB162
 8734 011c 4C000000 		.4byte	.LFE162-.LFB162
 8735 0120 00000000 		.4byte	.LFB163
 8736 0124 80000000 		.4byte	.LFE163-.LFB163
 8737 0128 00000000 		.4byte	.LFB164
 8738 012c 78000000 		.4byte	.LFE164-.LFB164
 8739 0130 00000000 		.4byte	.LFB165
 8740 0134 20000000 		.4byte	.LFE165-.LFB165
 8741 0138 00000000 		.4byte	.LFB166
 8742 013c 4C000000 		.4byte	.LFE166-.LFB166
 8743 0140 00000000 		.4byte	.LFB167
 8744 0144 20000000 		.4byte	.LFE167-.LFB167
 8745 0148 00000000 		.4byte	.LFB168
 8746 014c 3C000000 		.4byte	.LFE168-.LFB168
 8747 0150 00000000 		.4byte	.LFB169
 8748 0154 30000000 		.4byte	.LFE169-.LFB169
 8749 0158 00000000 		.4byte	.LFB170
 8750 015c 90000000 		.4byte	.LFE170-.LFB170
 8751 0160 00000000 		.4byte	.LFB171
 8752 0164 B4000000 		.4byte	.LFE171-.LFB171
 8753 0168 00000000 		.4byte	.LFB172
 8754 016c 24010000 		.4byte	.LFE172-.LFB172
 8755 0170 00000000 		.4byte	.LFB173
 8756 0174 68010000 		.4byte	.LFE173-.LFB173
 8757 0178 00000000 		.4byte	.LFB174
 8758 017c 00010000 		.4byte	.LFE174-.LFB174
 8759 0180 00000000 		.4byte	.LFB175
 8760 0184 4C000000 		.4byte	.LFE175-.LFB175
 8761 0188 00000000 		.4byte	.LFB176
 8762 018c A8000000 		.4byte	.LFE176-.LFB176
 8763 0190 00000000 		.4byte	0
 8764 0194 00000000 		.4byte	0
 8765              		.section	.debug_ranges,"",%progbits
 8766              	.Ldebug_ranges0:
 8767 0000 00000000 		.4byte	.LFB129
 8768 0004 82000000 		.4byte	.LFE129
 8769 0008 00000000 		.4byte	.LFB130
 8770 000c 10010000 		.4byte	.LFE130
 8771 0010 00000000 		.4byte	.LFB131
 8772 0014 D8000000 		.4byte	.LFE131
 8773 0018 00000000 		.4byte	.LFB132
 8774 001c D4000000 		.4byte	.LFE132
 8775 0020 00000000 		.4byte	.LFB133
 8776 0024 C4000000 		.4byte	.LFE133
 8777 0028 00000000 		.4byte	.LFB134
 8778 002c 58000000 		.4byte	.LFE134
 8779 0030 00000000 		.4byte	.LFB135
 8780 0034 34000000 		.4byte	.LFE135
 8781 0038 00000000 		.4byte	.LFB136
 8782 003c 58000000 		.4byte	.LFE136
 8783 0040 00000000 		.4byte	.LFB137
 8784 0044 20010000 		.4byte	.LFE137
 8785 0048 00000000 		.4byte	.LFB138
 8786 004c C4000000 		.4byte	.LFE138
 8787 0050 00000000 		.4byte	.LFB139
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 245


 8788 0054 64000000 		.4byte	.LFE139
 8789 0058 00000000 		.4byte	.LFB140
 8790 005c AC000000 		.4byte	.LFE140
 8791 0060 00000000 		.4byte	.LFB141
 8792 0064 D0000000 		.4byte	.LFE141
 8793 0068 00000000 		.4byte	.LFB142
 8794 006c 78000000 		.4byte	.LFE142
 8795 0070 00000000 		.4byte	.LFB143
 8796 0074 18000000 		.4byte	.LFE143
 8797 0078 00000000 		.4byte	.LFB144
 8798 007c 1C000000 		.4byte	.LFE144
 8799 0080 00000000 		.4byte	.LFB145
 8800 0084 28010000 		.4byte	.LFE145
 8801 0088 00000000 		.4byte	.LFB146
 8802 008c 20000000 		.4byte	.LFE146
 8803 0090 00000000 		.4byte	.LFB147
 8804 0094 24000000 		.4byte	.LFE147
 8805 0098 00000000 		.4byte	.LFB148
 8806 009c 18000000 		.4byte	.LFE148
 8807 00a0 00000000 		.4byte	.LFB149
 8808 00a4 38000000 		.4byte	.LFE149
 8809 00a8 00000000 		.4byte	.LFB150
 8810 00ac 4C010000 		.4byte	.LFE150
 8811 00b0 00000000 		.4byte	.LFB151
 8812 00b4 F4000000 		.4byte	.LFE151
 8813 00b8 00000000 		.4byte	.LFB152
 8814 00bc 38000000 		.4byte	.LFE152
 8815 00c0 00000000 		.4byte	.LFB153
 8816 00c4 54000000 		.4byte	.LFE153
 8817 00c8 00000000 		.4byte	.LFB154
 8818 00cc 44000000 		.4byte	.LFE154
 8819 00d0 00000000 		.4byte	.LFB155
 8820 00d4 B4000000 		.4byte	.LFE155
 8821 00d8 00000000 		.4byte	.LFB156
 8822 00dc AC000000 		.4byte	.LFE156
 8823 00e0 00000000 		.4byte	.LFB157
 8824 00e4 38000000 		.4byte	.LFE157
 8825 00e8 00000000 		.4byte	.LFB158
 8826 00ec 9C000000 		.4byte	.LFE158
 8827 00f0 00000000 		.4byte	.LFB159
 8828 00f4 18000000 		.4byte	.LFE159
 8829 00f8 00000000 		.4byte	.LFB160
 8830 00fc 30000000 		.4byte	.LFE160
 8831 0100 00000000 		.4byte	.LFB161
 8832 0104 40000000 		.4byte	.LFE161
 8833 0108 00000000 		.4byte	.LFB162
 8834 010c 4C000000 		.4byte	.LFE162
 8835 0110 00000000 		.4byte	.LFB163
 8836 0114 80000000 		.4byte	.LFE163
 8837 0118 00000000 		.4byte	.LFB164
 8838 011c 78000000 		.4byte	.LFE164
 8839 0120 00000000 		.4byte	.LFB165
 8840 0124 20000000 		.4byte	.LFE165
 8841 0128 00000000 		.4byte	.LFB166
 8842 012c 4C000000 		.4byte	.LFE166
 8843 0130 00000000 		.4byte	.LFB167
 8844 0134 20000000 		.4byte	.LFE167
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 246


 8845 0138 00000000 		.4byte	.LFB168
 8846 013c 3C000000 		.4byte	.LFE168
 8847 0140 00000000 		.4byte	.LFB169
 8848 0144 30000000 		.4byte	.LFE169
 8849 0148 00000000 		.4byte	.LFB170
 8850 014c 90000000 		.4byte	.LFE170
 8851 0150 00000000 		.4byte	.LFB171
 8852 0154 B4000000 		.4byte	.LFE171
 8853 0158 00000000 		.4byte	.LFB172
 8854 015c 24010000 		.4byte	.LFE172
 8855 0160 00000000 		.4byte	.LFB173
 8856 0164 68010000 		.4byte	.LFE173
 8857 0168 00000000 		.4byte	.LFB174
 8858 016c 00010000 		.4byte	.LFE174
 8859 0170 00000000 		.4byte	.LFB175
 8860 0174 4C000000 		.4byte	.LFE175
 8861 0178 00000000 		.4byte	.LFB176
 8862 017c A8000000 		.4byte	.LFE176
 8863 0180 00000000 		.4byte	0
 8864 0184 00000000 		.4byte	0
 8865              		.section	.debug_line,"",%progbits
 8866              	.Ldebug_line0:
 8867 0000 790C0000 		.section	.debug_str,"MS",%progbits,1
 8867      0200C102 
 8867      00000201 
 8867      FB0E0D00 
 8867      01010101 
 8868              	.LASF178:
 8869 0000 7843616E 		.ascii	"xCanBlockIndefinitely\000"
 8869      426C6F63 
 8869      6B496E64 
 8869      6566696E 
 8869      6974656C 
 8870              	.LASF70:
 8871 0016 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 8871      6967696E 
 8871      616C4241 
 8871      53455052 
 8871      4900
 8872              	.LASF131:
 8873 0028 70784576 		.ascii	"pxEventList\000"
 8873      656E744C 
 8873      69737400 
 8874              	.LASF106:
 8875 0034 76546173 		.ascii	"vTaskSuspend\000"
 8875      6B537573 
 8875      70656E64 
 8875      00
 8876              	.LASF95:
 8877 0041 78546173 		.ascii	"xTaskCreate\000"
 8877      6B437265 
 8877      61746500 
 8878              	.LASF4:
 8879 004d 73697A65 		.ascii	"size_t\000"
 8879      5F7400
 8880              	.LASF36:
 8881 0054 4D696E69 		.ascii	"MiniListItem_t\000"
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 247


 8881      4C697374 
 8881      4974656D 
 8881      5F7400
 8882              	.LASF52:
 8883 0063 54696D65 		.ascii	"TimeOut_t\000"
 8883      4F75745F 
 8883      7400
 8884              	.LASF188:
 8885 006d 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 8885      7272656E 
 8885      744E756D 
 8885      6265724F 
 8885      66546173 
 8886              	.LASF169:
 8887 0084 756C5661 		.ascii	"ulValue\000"
 8887      6C756500 
 8888              	.LASF159:
 8889 008c 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 8889      736B5265 
 8889      73657445 
 8889      76656E74 
 8889      4974656D 
 8890              	.LASF193:
 8891 00a6 78596965 		.ascii	"xYieldPending\000"
 8891      6C645065 
 8891      6E64696E 
 8891      6700
 8892              	.LASF157:
 8893 00b4 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 8893      6B476574 
 8893      43757272 
 8893      656E7454 
 8893      61736B48 
 8894              	.LASF3:
 8895 00ce 7369676E 		.ascii	"signed char\000"
 8895      65642063 
 8895      68617200 
 8896              	.LASF5:
 8897 00da 5F5F7569 		.ascii	"__uint8_t\000"
 8897      6E74385F 
 8897      7400
 8898              	.LASF173:
 8899 00e4 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
 8899      6B47656E 
 8899      65726963 
 8899      4E6F7469 
 8899      66794672 
 8900              	.LASF203:
 8901 00fe 433A5C55 		.ascii	"C:\\Users\\ikomb\\Documents\\PSoC Creator\\CE222221"
 8901      73657273 
 8901      5C696B6F 
 8901      6D625C44 
 8901      6F63756D 
 8902 012c 5F566F69 		.ascii	"_Voice_Recorder01\\CE222221_Voice_Recorder01.cydsn\000"
 8902      63655F52 
 8902      65636F72 
 8902      64657230 
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 248


 8902      315C4345 
 8903              	.LASF187:
 8904 015e 78537573 		.ascii	"xSuspendedTaskList\000"
 8904      70656E64 
 8904      65645461 
 8904      736B4C69 
 8904      737400
 8905              	.LASF93:
 8906 0171 76546173 		.ascii	"vTaskDelay\000"
 8906      6B44656C 
 8906      617900
 8907              	.LASF11:
 8908 017c 6C6F6E67 		.ascii	"long int\000"
 8908      20696E74 
 8908      00
 8909              	.LASF176:
 8910 0185 78546173 		.ascii	"xTaskNotifyStateClear\000"
 8910      6B4E6F74 
 8910      69667953 
 8910      74617465 
 8910      436C6561 
 8911              	.LASF71:
 8912 019b 756C4E65 		.ascii	"ulNewBASEPRI\000"
 8912      77424153 
 8912      45505249 
 8912      00
 8913              	.LASF14:
 8914 01a8 6C6F6E67 		.ascii	"long long unsigned int\000"
 8914      206C6F6E 
 8914      6720756E 
 8914      7369676E 
 8914      65642069 
 8915              	.LASF61:
 8916 01bf 78457665 		.ascii	"xEventListItem\000"
 8916      6E744C69 
 8916      73744974 
 8916      656D00
 8917              	.LASF90:
 8918 01ce 78416C72 		.ascii	"xAlreadyYielded\000"
 8918      65616479 
 8918      5969656C 
 8918      64656400 
 8919              	.LASF141:
 8920 01de 70785469 		.ascii	"pxTimeOut\000"
 8920      6D654F75 
 8920      7400
 8921              	.LASF40:
 8922 01e8 784C6973 		.ascii	"xListEnd\000"
 8922      74456E64 
 8922      00
 8923              	.LASF199:
 8924 01f1 49544D5F 		.ascii	"ITM_RxBuffer\000"
 8924      52784275 
 8924      66666572 
 8924      00
 8925              	.LASF49:
 8926 01fe 7854494D 		.ascii	"xTIME_OUT\000"
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 249


 8926      455F4F55 
 8926      5400
 8927              	.LASF35:
 8928 0208 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 8928      495F4C49 
 8928      53545F49 
 8928      54454D00 
 8929              	.LASF154:
 8930 0218 784C6973 		.ascii	"xListIsEmpty\000"
 8930      74497345 
 8930      6D707479 
 8930      00
 8931              	.LASF117:
 8932 0225 78546173 		.ascii	"xTaskGetTickCount\000"
 8932      6B476574 
 8932      5469636B 
 8932      436F756E 
 8932      7400
 8933              	.LASF1:
 8934 0237 6C6F6E67 		.ascii	"long long int\000"
 8934      206C6F6E 
 8934      6720696E 
 8934      7400
 8935              	.LASF48:
 8936 0245 654E6F74 		.ascii	"eNotifyAction\000"
 8936      69667941 
 8936      6374696F 
 8936      6E00
 8937              	.LASF104:
 8938 0253 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 8938      696F7269 
 8938      74795573 
 8938      65644F6E 
 8938      456E7472 
 8939              	.LASF132:
 8940 0269 78546963 		.ascii	"xTicksToWait\000"
 8940      6B73546F 
 8940      57616974 
 8940      00
 8941              	.LASF146:
 8942 0276 76546173 		.ascii	"vTaskSetThreadLocalStoragePointer\000"
 8942      6B536574 
 8942      54687265 
 8942      61644C6F 
 8942      63616C53 
 8943              	.LASF147:
 8944 0298 78546173 		.ascii	"xTaskToSet\000"
 8944      6B546F53 
 8944      657400
 8945              	.LASF60:
 8946 02a3 78537461 		.ascii	"xStateListItem\000"
 8946      74654C69 
 8946      73744974 
 8946      656D00
 8947              	.LASF86:
 8948 02b2 76546173 		.ascii	"vTaskDelayUntil\000"
 8948      6B44656C 
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 250


 8948      6179556E 
 8948      74696C00 
 8949              	.LASF170:
 8950 02c2 65416374 		.ascii	"eAction\000"
 8950      696F6E00 
 8951              	.LASF54:
 8952 02ca 70764261 		.ascii	"pvBaseAddress\000"
 8952      73654164 
 8952      64726573 
 8952      7300
 8953              	.LASF65:
 8954 02d8 70765468 		.ascii	"pvThreadLocalStoragePointers\000"
 8954      72656164 
 8954      4C6F6361 
 8954      6C53746F 
 8954      72616765 
 8955              	.LASF204:
 8956 02f5 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 8956      72745261 
 8956      69736542 
 8956      41534550 
 8956      524900
 8957              	.LASF58:
 8958 0308 74736B54 		.ascii	"tskTaskControlBlock\000"
 8958      61736B43 
 8958      6F6E7472 
 8958      6F6C426C 
 8958      6F636B00 
 8959              	.LASF77:
 8960 031c 70784E65 		.ascii	"pxNewTCB\000"
 8960      77544342 
 8960      00
 8961              	.LASF174:
 8962 0325 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 8962      67686572 
 8962      5072696F 
 8962      72697479 
 8962      5461736B 
 8963              	.LASF172:
 8964 033f 75634F72 		.ascii	"ucOriginalNotifyState\000"
 8964      6967696E 
 8964      616C4E6F 
 8964      74696679 
 8964      53746174 
 8965              	.LASF119:
 8966 0355 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 8966      6B476574 
 8966      5469636B 
 8966      436F756E 
 8966      7446726F 
 8967              	.LASF42:
 8968 036e 5461736B 		.ascii	"TaskHandle_t\000"
 8968      48616E64 
 8968      6C655F74 
 8968      00
 8969              	.LASF63:
 8970 037b 70785374 		.ascii	"pxStack\000"
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 251


 8970      61636B00 
 8971              	.LASF27:
 8972 0383 5469636B 		.ascii	"TickType_t\000"
 8972      54797065 
 8972      5F7400
 8973              	.LASF57:
 8974 038e 4D656D6F 		.ascii	"MemoryRegion_t\000"
 8974      72795265 
 8974      67696F6E 
 8974      5F7400
 8975              	.LASF18:
 8976 039d 75696E74 		.ascii	"uint16_t\000"
 8976      31365F74 
 8976      00
 8977              	.LASF22:
 8978 03a6 646F7562 		.ascii	"double\000"
 8978      6C6500
 8979              	.LASF25:
 8980 03ad 42617365 		.ascii	"BaseType_t\000"
 8980      54797065 
 8980      5F7400
 8981              	.LASF171:
 8982 03b8 70756C50 		.ascii	"pulPreviousNotificationValue\000"
 8982      72657669 
 8982      6F75734E 
 8982      6F746966 
 8982      69636174 
 8983              	.LASF156:
 8984 03d5 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 8984      65736574 
 8984      4E657874 
 8984      5461736B 
 8984      556E626C 
 8985              	.LASF74:
 8986 03f1 75735374 		.ascii	"usStackDepth\000"
 8986      61636B44 
 8986      65707468 
 8986      00
 8987              	.LASF121:
 8988 03fe 78546173 		.ascii	"xTaskToQuery\000"
 8988      6B546F51 
 8988      75657279 
 8988      00
 8989              	.LASF101:
 8990 040b 76546173 		.ascii	"vTaskPrioritySet\000"
 8990      6B507269 
 8990      6F726974 
 8990      79536574 
 8990      00
 8991              	.LASF50:
 8992 041c 784F7665 		.ascii	"xOverflowCount\000"
 8992      72666C6F 
 8992      77436F75 
 8992      6E7400
 8993              	.LASF112:
 8994 042b 76546173 		.ascii	"vTaskStartScheduler\000"
 8994      6B537461 
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 252


 8994      72745363 
 8994      68656475 
 8994      6C657200 
 8995              	.LASF122:
 8996 043f 78546173 		.ascii	"xTaskIncrementTick\000"
 8996      6B496E63 
 8996      72656D65 
 8996      6E745469 
 8996      636B00
 8997              	.LASF130:
 8998 0452 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 8998      6B506C61 
 8998      63654F6E 
 8998      4576656E 
 8998      744C6973 
 8999              	.LASF12:
 9000 0468 5F5F7569 		.ascii	"__uint32_t\000"
 9000      6E743332 
 9000      5F7400
 9001              	.LASF198:
 9002 0473 75785363 		.ascii	"uxSchedulerSuspended\000"
 9002      68656475 
 9002      6C657253 
 9002      75737065 
 9002      6E646564 
 9003              	.LASF206:
 9004 0488 756C4E65 		.ascii	"ulNewMaskValue\000"
 9004      774D6173 
 9004      6B56616C 
 9004      756500
 9005              	.LASF110:
 9006 0497 78546173 		.ascii	"xTaskResumeFromISR\000"
 9006      6B526573 
 9006      756D6546 
 9006      726F6D49 
 9006      535200
 9007              	.LASF31:
 9008 04aa 70764F77 		.ascii	"pvOwner\000"
 9008      6E657200 
 9009              	.LASF78:
 9010 04b2 78526574 		.ascii	"xReturn\000"
 9010      75726E00 
 9011              	.LASF181:
 9012 04ba 7844656C 		.ascii	"xDelayedTaskList2\000"
 9012      61796564 
 9012      5461736B 
 9012      4C697374 
 9012      3200
 9013              	.LASF51:
 9014 04cc 7854696D 		.ascii	"xTimeOnEntering\000"
 9014      654F6E45 
 9014      6E746572 
 9014      696E6700 
 9015              	.LASF133:
 9016 04dc 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 9016      6B506C61 
 9016      63654F6E 
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 253


 9016      556E6F72 
 9016      64657265 
 9017              	.LASF76:
 9018 04fb 70784372 		.ascii	"pxCreatedTask\000"
 9018      65617465 
 9018      64546173 
 9018      6B00
 9019              	.LASF38:
 9020 0509 75784E75 		.ascii	"uxNumberOfItems\000"
 9020      6D626572 
 9020      4F664974 
 9020      656D7300 
 9021              	.LASF13:
 9022 0519 6C6F6E67 		.ascii	"long unsigned int\000"
 9022      20756E73 
 9022      69676E65 
 9022      6420696E 
 9022      7400
 9023              	.LASF168:
 9024 052b 78546173 		.ascii	"xTaskToNotify\000"
 9024      6B546F4E 
 9024      6F746966 
 9024      7900
 9025              	.LASF19:
 9026 0539 696E7433 		.ascii	"int32_t\000"
 9026      325F7400 
 9027              	.LASF59:
 9028 0541 7078546F 		.ascii	"pxTopOfStack\000"
 9028      704F6653 
 9028      7461636B 
 9028      00
 9029              	.LASF75:
 9030 054e 70765061 		.ascii	"pvParameters\000"
 9030      72616D65 
 9030      74657273 
 9030      00
 9031              	.LASF68:
 9032 055b 74736B54 		.ascii	"tskTCB\000"
 9032      434200
 9033              	.LASF129:
 9034 0562 7078436F 		.ascii	"pxConstList\000"
 9034      6E73744C 
 9034      69737400 
 9035              	.LASF9:
 9036 056e 73686F72 		.ascii	"short unsigned int\000"
 9036      7420756E 
 9036      7369676E 
 9036      65642069 
 9036      6E7400
 9037              	.LASF24:
 9038 0581 53746163 		.ascii	"StackType_t\000"
 9038      6B547970 
 9038      655F7400 
 9039              	.LASF84:
 9040 058d 70785443 		.ascii	"pxTCB\000"
 9040      4200
 9041              	.LASF105:
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 254


 9042 0593 78596965 		.ascii	"xYieldRequired\000"
 9042      6C645265 
 9042      71756972 
 9042      656400
 9043              	.LASF164:
 9044 05a2 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 9044      7473546F 
 9044      436C6561 
 9044      724F6E45 
 9044      6E747279 
 9045              	.LASF82:
 9046 05b7 70727641 		.ascii	"prvAddNewTaskToReadyList\000"
 9046      64644E65 
 9046      77546173 
 9046      6B546F52 
 9046      65616479 
 9047              	.LASF108:
 9048 05d0 76546173 		.ascii	"vTaskResume\000"
 9048      6B526573 
 9048      756D6500 
 9049              	.LASF123:
 9050 05dc 78537769 		.ascii	"xSwitchRequired\000"
 9050      74636852 
 9050      65717569 
 9050      72656400 
 9051              	.LASF98:
 9052 05ec 75785265 		.ascii	"uxReturn\000"
 9052      7475726E 
 9052      00
 9053              	.LASF148:
 9054 05f5 78496E64 		.ascii	"xIndex\000"
 9054      657800
 9055              	.LASF152:
 9056 05fc 70727649 		.ascii	"prvInitialiseTaskLists\000"
 9056      6E697469 
 9056      616C6973 
 9056      65546173 
 9056      6B4C6973 
 9057              	.LASF53:
 9058 0613 784D454D 		.ascii	"xMEMORY_REGION\000"
 9058      4F52595F 
 9058      52454749 
 9058      4F4E00
 9059              	.LASF200:
 9060 0622 70784375 		.ascii	"pxCurrentTCB\000"
 9060      7272656E 
 9060      74544342 
 9060      00
 9061              	.LASF143:
 9062 062f 70785469 		.ascii	"pxTicksToWait\000"
 9062      636B7354 
 9062      6F576169 
 9062      7400
 9063              	.LASF155:
 9064 063d 70727644 		.ascii	"prvDeleteTCB\000"
 9064      656C6574 
 9064      65544342 
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 255


 9064      00
 9065              	.LASF145:
 9066 064a 70727649 		.ascii	"prvIdleTask\000"
 9066      646C6554 
 9066      61736B00 
 9067              	.LASF125:
 9068 0656 76546173 		.ascii	"vTaskSwitchContext\000"
 9068      6B537769 
 9068      74636843 
 9068      6F6E7465 
 9068      787400
 9069              	.LASF45:
 9070 0669 65496E63 		.ascii	"eIncrement\000"
 9070      72656D65 
 9070      6E7400
 9071              	.LASF107:
 9072 0674 78546173 		.ascii	"xTaskToSuspend\000"
 9072      6B546F53 
 9072      75737065 
 9072      6E6400
 9073              	.LASF183:
 9074 0683 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 9074      6572666C 
 9074      6F774465 
 9074      6C617965 
 9074      64546173 
 9075              	.LASF56:
 9076 069d 756C5061 		.ascii	"ulParameters\000"
 9076      72616D65 
 9076      74657273 
 9076      00
 9077              	.LASF80:
 9078 06aa 78526567 		.ascii	"xRegions\000"
 9078      696F6E73 
 9078      00
 9079              	.LASF160:
 9080 06b3 756C5461 		.ascii	"ulTaskNotifyTake\000"
 9080      736B4E6F 
 9080      74696679 
 9080      54616B65 
 9080      00
 9081              	.LASF97:
 9082 06c4 78546173 		.ascii	"xTask\000"
 9082      6B00
 9083              	.LASF185:
 9084 06ca 78546173 		.ascii	"xTasksWaitingTermination\000"
 9084      6B735761 
 9084      6974696E 
 9084      67546572 
 9084      6D696E61 
 9085              	.LASF102:
 9086 06e3 75784E65 		.ascii	"uxNewPriority\000"
 9086      77507269 
 9086      6F726974 
 9086      7900
 9087              	.LASF72:
 9088 06f1 70785461 		.ascii	"pxTaskCode\000"
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 256


 9088      736B436F 
 9088      646500
 9089              	.LASF79:
 9090 06fc 756C5374 		.ascii	"ulStackDepth\000"
 9090      61636B44 
 9090      65707468 
 9090      00
 9091              	.LASF87:
 9092 0709 70785072 		.ascii	"pxPreviousWakeTime\000"
 9092      6576696F 
 9092      75735761 
 9092      6B655469 
 9092      6D6500
 9093              	.LASF196:
 9094 071c 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 9094      74546173 
 9094      6B556E62 
 9094      6C6F636B 
 9094      54696D65 
 9095              	.LASF46:
 9096 0731 65536574 		.ascii	"eSetValueWithOverwrite\000"
 9096      56616C75 
 9096      65576974 
 9096      684F7665 
 9096      72777269 
 9097              	.LASF190:
 9098 0748 7578546F 		.ascii	"uxTopReadyPriority\000"
 9098      70526561 
 9098      64795072 
 9098      696F7269 
 9098      747900
 9099              	.LASF202:
 9100 075b 47656E65 		.ascii	"Generated_Source\\PSoC6\\pdl\\rtos\\FreeRTOS\\9.0.0"
 9100      72617465 
 9100      645F536F 
 9100      75726365 
 9100      5C50536F 
 9101 0789 5C536F75 		.ascii	"\\Source\\tasks.c\000"
 9101      7263655C 
 9101      7461736B 
 9101      732E6300 
 9102              	.LASF55:
 9103 0799 756C4C65 		.ascii	"ulLengthInBytes\000"
 9103      6E677468 
 9103      496E4279 
 9103      74657300 
 9104              	.LASF205:
 9105 07a9 76506F72 		.ascii	"vPortSetBASEPRI\000"
 9105      74536574 
 9105      42415345 
 9105      50524900 
 9106              	.LASF33:
 9107 07b9 4C697374 		.ascii	"ListItem_t\000"
 9107      4974656D 
 9107      5F7400
 9108              	.LASF128:
 9109 07c4 7578546F 		.ascii	"uxTopPriority\000"
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 257


 9109      70507269 
 9109      6F726974 
 9109      7900
 9110              	.LASF166:
 9111 07d2 70756C4E 		.ascii	"pulNotificationValue\000"
 9111      6F746966 
 9111      69636174 
 9111      696F6E56 
 9111      616C7565 
 9112              	.LASF30:
 9113 07e7 70785072 		.ascii	"pxPrevious\000"
 9113      6576696F 
 9113      757300
 9114              	.LASF83:
 9115 07f2 78546173 		.ascii	"xTaskToDelete\000"
 9115      6B546F44 
 9115      656C6574 
 9115      6500
 9116              	.LASF149:
 9117 0800 70765661 		.ascii	"pvValue\000"
 9117      6C756500 
 9118              	.LASF21:
 9119 0808 666C6F61 		.ascii	"float\000"
 9119      7400
 9120              	.LASF151:
 9121 080e 70765265 		.ascii	"pvReturn\000"
 9121      7475726E 
 9121      00
 9122              	.LASF92:
 9123 0817 78436F6E 		.ascii	"xConstTickCount\000"
 9123      73745469 
 9123      636B436F 
 9123      756E7400 
 9124              	.LASF32:
 9125 0827 7076436F 		.ascii	"pvContainer\000"
 9125      6E746169 
 9125      6E657200 
 9126              	.LASF137:
 9127 0833 7078556E 		.ascii	"pxUnblockedTCB\000"
 9127      626C6F63 
 9127      6B656454 
 9127      434200
 9128              	.LASF67:
 9129 0842 75634E6F 		.ascii	"ucNotifyState\000"
 9129      74696679 
 9129      53746174 
 9129      6500
 9130              	.LASF89:
 9131 0850 7854696D 		.ascii	"xTimeToWake\000"
 9131      65546F57 
 9131      616B6500 
 9132              	.LASF6:
 9133 085c 756E7369 		.ascii	"unsigned char\000"
 9133      676E6564 
 9133      20636861 
 9133      7200
 9134              	.LASF66:
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 258


 9135 086a 756C4E6F 		.ascii	"ulNotifiedValue\000"
 9135      74696669 
 9135      65645661 
 9135      6C756500 
 9136              	.LASF103:
 9137 087a 75784375 		.ascii	"uxCurrentBasePriority\000"
 9137      7272656E 
 9137      74426173 
 9137      65507269 
 9137      6F726974 
 9138              	.LASF69:
 9139 0890 5443425F 		.ascii	"TCB_t\000"
 9139      7400
 9140              	.LASF7:
 9141 0896 73686F72 		.ascii	"short int\000"
 9141      7420696E 
 9141      7400
 9142              	.LASF127:
 9143 08a0 756C4368 		.ascii	"ulCheckValue\000"
 9143      65636B56 
 9143      616C7565 
 9143      00
 9144              	.LASF191:
 9145 08ad 78536368 		.ascii	"xSchedulerRunning\000"
 9145      6564756C 
 9145      65725275 
 9145      6E6E696E 
 9145      6700
 9146              	.LASF113:
 9147 08bf 76546173 		.ascii	"vTaskEndScheduler\000"
 9147      6B456E64 
 9147      53636865 
 9147      64756C65 
 9147      7200
 9148              	.LASF116:
 9149 08d1 75785065 		.ascii	"uxPendedCounts\000"
 9149      6E646564 
 9149      436F756E 
 9149      747300
 9150              	.LASF109:
 9151 08e0 78546173 		.ascii	"xTaskToResume\000"
 9151      6B546F52 
 9151      6573756D 
 9151      6500
 9152              	.LASF115:
 9153 08ee 78546173 		.ascii	"xTaskResumeAll\000"
 9153      6B526573 
 9153      756D6541 
 9153      6C6C00
 9154              	.LASF23:
 9155 08fd 5461736B 		.ascii	"TaskFunction_t\000"
 9155      46756E63 
 9155      74696F6E 
 9155      5F7400
 9156              	.LASF37:
 9157 090c 784C4953 		.ascii	"xLIST\000"
 9157      5400
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 259


 9158              	.LASF99:
 9159 0912 75785461 		.ascii	"uxTaskPriorityGetFromISR\000"
 9159      736B5072 
 9159      696F7269 
 9159      74794765 
 9159      7446726F 
 9160              	.LASF144:
 9161 092b 76546173 		.ascii	"vTaskMissedYield\000"
 9161      6B4D6973 
 9161      73656459 
 9161      69656C64 
 9161      00
 9162              	.LASF175:
 9163 093c 76546173 		.ascii	"vTaskNotifyGiveFromISR\000"
 9163      6B4E6F74 
 9163      69667947 
 9163      69766546 
 9163      726F6D49 
 9164              	.LASF41:
 9165 0953 4C697374 		.ascii	"List_t\000"
 9165      5F7400
 9166              	.LASF81:
 9167 095a 70727649 		.ascii	"prvInitialiseNewTask\000"
 9167      6E697469 
 9167      616C6973 
 9167      654E6577 
 9167      5461736B 
 9168              	.LASF158:
 9169 096f 78546173 		.ascii	"xTaskGetSchedulerState\000"
 9169      6B476574 
 9169      53636865 
 9169      64756C65 
 9169      72537461 
 9170              	.LASF111:
 9171 0986 75785361 		.ascii	"uxSavedInterruptStatus\000"
 9171      76656449 
 9171      6E746572 
 9171      72757074 
 9171      53746174 
 9172              	.LASF91:
 9173 099d 7853686F 		.ascii	"xShouldDelay\000"
 9173      756C6444 
 9173      656C6179 
 9173      00
 9174              	.LASF153:
 9175 09aa 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 9175      6865636B 
 9175      5461736B 
 9175      73576169 
 9175      74696E67 
 9176              	.LASF20:
 9177 09ca 75696E74 		.ascii	"uint32_t\000"
 9177      33325F74 
 9177      00
 9178              	.LASF184:
 9179 09d3 7850656E 		.ascii	"xPendingReadyList\000"
 9179      64696E67 
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 260


 9179      52656164 
 9179      794C6973 
 9179      7400
 9180              	.LASF114:
 9181 09e5 76546173 		.ascii	"vTaskSuspendAll\000"
 9181      6B537573 
 9181      70656E64 
 9181      416C6C00 
 9182              	.LASF2:
 9183 09f5 6C6F6E67 		.ascii	"long double\000"
 9183      20646F75 
 9183      626C6500 
 9184              	.LASF177:
 9185 0a01 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 9185      64644375 
 9185      7272656E 
 9185      74546173 
 9185      6B546F44 
 9186              	.LASF16:
 9187 0a20 63686172 		.ascii	"char\000"
 9187      00
 9188              	.LASF120:
 9189 0a25 70635461 		.ascii	"pcTaskGetName\000"
 9189      736B4765 
 9189      744E616D 
 9189      6500
 9190              	.LASF136:
 9191 0a33 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 9191      6B52656D 
 9191      6F766546 
 9191      726F6D45 
 9191      76656E74 
 9192              	.LASF28:
 9193 0a4c 78497465 		.ascii	"xItemValue\000"
 9193      6D56616C 
 9193      756500
 9194              	.LASF0:
 9195 0a57 756E7369 		.ascii	"unsigned int\000"
 9195      676E6564 
 9195      20696E74 
 9195      00
 9196              	.LASF8:
 9197 0a64 5F5F7569 		.ascii	"__uint16_t\000"
 9197      6E743136 
 9197      5F7400
 9198              	.LASF85:
 9199 0a6f 76546173 		.ascii	"vTaskDelete\000"
 9199      6B44656C 
 9199      65746500 
 9200              	.LASF44:
 9201 0a7b 65536574 		.ascii	"eSetBits\000"
 9201      42697473 
 9201      00
 9202              	.LASF186:
 9203 0a84 75784465 		.ascii	"uxDeletedTasksWaitingCleanUp\000"
 9203      6C657465 
 9203      64546173 
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 261


 9203      6B735761 
 9203      6974696E 
 9204              	.LASF100:
 9205 0aa1 75785361 		.ascii	"uxSavedInterruptState\000"
 9205      76656449 
 9205      6E746572 
 9205      72757074 
 9205      53746174 
 9206              	.LASF10:
 9207 0ab7 5F5F696E 		.ascii	"__int32_t\000"
 9207      7433325F 
 9207      7400
 9208              	.LASF142:
 9209 0ac1 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 9209      6B436865 
 9209      636B466F 
 9209      7254696D 
 9209      654F7574 
 9210              	.LASF139:
 9211 0ad6 70784576 		.ascii	"pxEventListItem\000"
 9211      656E744C 
 9211      69737449 
 9211      74656D00 
 9212              	.LASF195:
 9213 0ae6 75785461 		.ascii	"uxTaskNumber\000"
 9213      736B4E75 
 9213      6D626572 
 9213      00
 9214              	.LASF124:
 9215 0af3 70785465 		.ascii	"pxTemp\000"
 9215      6D7000
 9216              	.LASF197:
 9217 0afa 7849646C 		.ascii	"xIdleTaskHandle\000"
 9217      65546173 
 9217      6B48616E 
 9217      646C6500 
 9218              	.LASF179:
 9219 0b0a 70785265 		.ascii	"pxReadyTasksLists\000"
 9219      61647954 
 9219      61736B73 
 9219      4C697374 
 9219      7300
 9220              	.LASF135:
 9221 0b1c 78576169 		.ascii	"xWaitIndefinitely\000"
 9221      74496E64 
 9221      6566696E 
 9221      6974656C 
 9221      7900
 9222              	.LASF208:
 9223 0b2e 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 9223      736B4765 
 9223      744E756D 
 9223      6265724F 
 9223      66546173 
 9224              	.LASF180:
 9225 0b45 7844656C 		.ascii	"xDelayedTaskList1\000"
 9225      61796564 
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 262


 9225      5461736B 
 9225      4C697374 
 9225      3100
 9226              	.LASF161:
 9227 0b57 78436C65 		.ascii	"xClearCountOnExit\000"
 9227      6172436F 
 9227      756E744F 
 9227      6E457869 
 9227      7400
 9228              	.LASF194:
 9229 0b69 784E756D 		.ascii	"xNumOfOverflows\000"
 9229      4F664F76 
 9229      6572666C 
 9229      6F777300 
 9230              	.LASF167:
 9231 0b79 78546173 		.ascii	"xTaskGenericNotify\000"
 9231      6B47656E 
 9231      65726963 
 9231      4E6F7469 
 9231      667900
 9232              	.LASF189:
 9233 0b8c 78546963 		.ascii	"xTickCount\000"
 9233      6B436F75 
 9233      6E7400
 9234              	.LASF39:
 9235 0b97 7078496E 		.ascii	"pxIndex\000"
 9235      64657800 
 9236              	.LASF94:
 9237 0b9f 78546963 		.ascii	"xTicksToDelay\000"
 9237      6B73546F 
 9237      44656C61 
 9237      7900
 9238              	.LASF88:
 9239 0bad 7854696D 		.ascii	"xTimeIncrement\000"
 9239      65496E63 
 9239      72656D65 
 9239      6E7400
 9240              	.LASF47:
 9241 0bbc 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 9241      56616C75 
 9241      65576974 
 9241      686F7574 
 9241      4F766572 
 9242              	.LASF64:
 9243 0bd6 70635461 		.ascii	"pcTaskName\000"
 9243      736B4E61 
 9243      6D6500
 9244              	.LASF17:
 9245 0be1 75696E74 		.ascii	"uint8_t\000"
 9245      385F7400 
 9246              	.LASF118:
 9247 0be9 78546963 		.ascii	"xTicks\000"
 9247      6B7300
 9248              	.LASF207:
 9249 0bf0 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 9249      61736B49 
 9249      73546173 
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 263


 9249      6B537573 
 9249      70656E64 
 9250              	.LASF43:
 9251 0c07 654E6F41 		.ascii	"eNoAction\000"
 9251      6374696F 
 9251      6E00
 9252              	.LASF15:
 9253 0c11 73697A65 		.ascii	"sizetype\000"
 9253      74797065 
 9253      00
 9254              	.LASF29:
 9255 0c1a 70784E65 		.ascii	"pxNext\000"
 9255      787400
 9256              	.LASF134:
 9257 0c21 76546173 		.ascii	"vTaskPlaceOnEventListRestricted\000"
 9257      6B506C61 
 9257      63654F6E 
 9257      4576656E 
 9257      744C6973 
 9258              	.LASF163:
 9259 0c41 78546173 		.ascii	"xTaskNotifyWait\000"
 9259      6B4E6F74 
 9259      69667957 
 9259      61697400 
 9260              	.LASF162:
 9261 0c51 756C5265 		.ascii	"ulReturn\000"
 9261      7475726E 
 9261      00
 9262              	.LASF34:
 9263 0c5a 784C4953 		.ascii	"xLIST_ITEM\000"
 9263      545F4954 
 9263      454D00
 9264              	.LASF201:
 9265 0c65 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 9265      43313120 
 9265      352E342E 
 9265      31203230 
 9265      31363036 
 9266 0c98 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m4 -mfloat-abi=s"
 9266      20726576 
 9266      6973696F 
 9266      6E203233 
 9266      37373135 
 9267 0ccb 6F667466 		.ascii	"oftfp -mfpu=fpv4-sp-d16 -mthumb -g -O0 -ffunction-s"
 9267      70202D6D 
 9267      6670753D 
 9267      66707634 
 9267      2D73702D 
 9268 0cfe 65637469 		.ascii	"ections -ffat-lto-objects\000"
 9268      6F6E7320 
 9268      2D666661 
 9268      742D6C74 
 9268      6F2D6F62 
 9269              	.LASF62:
 9270 0d18 75785072 		.ascii	"uxPriority\000"
 9270      696F7269 
 9270      747900
ARM GAS  C:\Users\ikomb\AppData\Local\Temp\ccNQc6m6.s 			page 264


 9271              	.LASF182:
 9272 0d23 70784465 		.ascii	"pxDelayedTaskList\000"
 9272      6C617965 
 9272      64546173 
 9272      6B4C6973 
 9272      7400
 9273              	.LASF150:
 9274 0d35 70765461 		.ascii	"pvTaskGetThreadLocalStoragePointer\000"
 9274      736B4765 
 9274      74546872 
 9274      6561644C 
 9274      6F63616C 
 9275              	.LASF73:
 9276 0d58 70634E61 		.ascii	"pcName\000"
 9276      6D6500
 9277              	.LASF96:
 9278 0d5f 75785461 		.ascii	"uxTaskPriorityGet\000"
 9278      736B5072 
 9278      696F7269 
 9278      74794765 
 9278      7400
 9279              	.LASF140:
 9280 0d71 76546173 		.ascii	"vTaskSetTimeOutState\000"
 9280      6B536574 
 9280      54696D65 
 9280      4F757453 
 9280      74617465 
 9281              	.LASF165:
 9282 0d86 756C4269 		.ascii	"ulBitsToClearOnExit\000"
 9282      7473546F 
 9282      436C6561 
 9282      724F6E45 
 9282      78697400 
 9283              	.LASF26:
 9284 0d9a 55426173 		.ascii	"UBaseType_t\000"
 9284      65547970 
 9284      655F7400 
 9285              	.LASF138:
 9286 0da6 78546173 		.ascii	"xTaskRemoveFromUnorderedEventList\000"
 9286      6B52656D 
 9286      6F766546 
 9286      726F6D55 
 9286      6E6F7264 
 9287              	.LASF126:
 9288 0dc8 70756C53 		.ascii	"pulStack\000"
 9288      7461636B 
 9288      00
 9289              	.LASF192:
 9290 0dd1 75785065 		.ascii	"uxPendedTicks\000"
 9290      6E646564 
 9290      5469636B 
 9290      7300
 9291              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
